{
  "info": {
    "_postman_id": "cd9f279f-2978-46aa-86aa-b12fd1e7fb98",
    "name": "Validation Checks",
    "description": "A collection of tests that hit all the V3 API endpoints to ensure the API is functioning properly. The requests are split into 4 folders: Types, Customers, Targets, and Switches. The tests must be run in the order displayed here to function properly. Currently there are **73** requests and **466** tests in this collection.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "61a16caf-31bc-4911-860c-1531e15c0bee",
      "name": "Authentication",
      "description": "",
      "item": [
        {
          "_postman_id": "68d08d2c-ee0f-4f11-81b1-4193010623ac",
          "name": "Missing api key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,        ",
                  "            \"message\": \"The header did not contain the key api-key.\",",
                  "            \"errors\": [",
                  "                {",
                  "                    \"message\": \"The header did not contain the key api-key.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
          },
          "response": []
        },
        {
          "_postman_id": "0abdac75-198d-4f76-93c6-979fc470901c",
          "name": "Invalid api key",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 401,",
                  "            \"message\": \"The api-key header provided was not valid.\",",
                  "            \"errors\": [",
                  "                {",
                  "                    \"message\": \"The api-key header provided was not valid.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "Api Key",
                "key": "api-key",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "80017610-fd4e-40f2-b217-26d92e5fbc04",
      "name": "Customers",
      "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
      "item": [
        {
          "_postman_id": "8d9cb909-ce5d-4b55-a294-8304b3b8f2db",
          "name": "Missing country field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Addresses[0].Country\",",
                  "                    \"message\": \"'Country' should not be empty.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"Addresses[0].Country\",",
                  "                    \"message\": \"The length of 'Country' must be at least 2 characters. You entered 0 characters.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "api key"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "8d357a14-2349-4ade-b7ac-dd846bc27553",
          "name": "Missing state field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Addresses[0].State\",",
                  "                    \"message\": \"'State' should not be empty.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"Addresses[0].State\",",
                  "                    \"message\": \"The length of 'State' must be at least 2 characters. You entered 0 characters.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "6458cf8a-f4c0-4f72-94b2-7aa8b18f438b",
          "name": "Missing zip field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Addresses[0].Zip\",",
                  "                    \"message\": \"'Zip' should not be empty.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"Addresses[0].Zip\",",
                  "                    \"message\": \"The length of 'Zip' must be at least 5 characters. You entered 0 characters.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "d68e8c23-045e-41e2-a721-83a02e1aa2d8",
          "name": "Missing city field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Addresses[0].City\",",
                  "                    \"message\": \"'City' should not be empty.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "138f7029-cc29-4624-8c17-b032cecf1674",
          "name": "Missing line1 field",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Addresses[0].Line1\",",
                  "                    \"message\": \"'Line1' should not be empty.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "63a9be1f-5b25-497a-adbb-f0b4f50a8667",
          "name": "Incorrect routing number",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Accounts\",",
                  "                    \"message\": \"There is a routing number which is not a routing number of this institution.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}0\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "57722f73-377f-4c4e-8c30-1cf12692bc76",
          "name": "Invalid account number",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Accounts[0].Number\",",
                  "                    \"message\": \"The account must provide a valid account number.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "f12ce680-afd4-4069-827f-c9d788c0bdee",
          "name": "Incorrect account type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Accounts\",",
                  "                    \"message\": \"There is an account type which is not an account type for this institution.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}s\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "3078eea3-2952-4d10-a0f6-3c84dcb8e5c7",
          "name": "Incorrect account name",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Accounts\",",
                  "                    \"message\": \"There is an account name which is not an account name for this institution.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}0\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        },
        {
          "_postman_id": "f3f07102-e61a-4d12-a8eb-58b5ae0616ab",
          "name": "Invalid account holder name",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "var timestamp = Date.now();",
                  "",
                  "var randomString = makeRandomString();",
                  "",
                  "// Set the timestamp to environment vars to create an unique",
                  "// customer on each test run.",
                  "pm.environment.set(\"customer_key\", timestamp);",
                  "",
                  "pm.environment.set(\"customer_name\", randomString);",
                  "",
                  "// Creates a random string of length 10.",
                  "function makeRandomString() {",
                  "  var text = \"\";",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                  "",
                  "  for (var i = 0; i < 10; i++)",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                  "",
                  "  return text;",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"AccountHolders[0].LastName\",",
                  "                    \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"AccountHolders[0].FirstName\",",
                  "                    \"message\": \"The first name is required and must not exceed 50 characters.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"AccountHolders[0].MiddleInitial\",",
                  "                    \"message\": \"The middle initial must not exceed one character.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"context\": \"testing_context\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "api key",
                "key": "api-key",
                "value": "{{api_key}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n        \"middleInitial\": \"Jd\",\n        \"lastName\": \"Testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55803\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
            "description": "Creates a customer with a single account holder and a single account."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "17290933-6ded-4d3f-934e-5a34f55eb013",
      "name": "Targets",
      "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
      "item": [
        {
          "_postman_id": "887c951a-310e-43e4-8dd5-c35733363507",
          "name": "Missing name and customer params",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"Name\",",
                  "                    \"message\": \"'Name' should not be empty.\"",
                  "                },",
                  "                {",
                  "                    \"reason\": \"Customer\",",
                  "                    \"message\": \"'Customer' must not be empty.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name=&customer=",
              "host": [
                "{{base_url}}{{targets_postfix2}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "deposit",
                  "equals": true
                },
                {
                  "key": "name",
                  "value": "",
                  "equals": true
                },
                {
                  "key": "customer",
                  "value": "",
                  "equals": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "_postman_id": "34e0f324-4283-4804-a202-283323ae132e",
          "name": "Invalid target id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Has the correct error message', function() {",
                  "   var response = {",
                  "        \"error\": {",
                  "            \"code\": 400,",
                  "            \"errors\": [",
                  "                {",
                  "                    \"reason\": \"targetId\",",
                  "                    \"message\": \"The value 'test' is not valid.\"",
                  "                }",
                  "            ]",
                  "        },",
                  "        \"apiVersion\": \"3.0.0\",",
                  "        \"id\": \"\"",
                  "    };",
                  "    ",
                  "    jsonData.id = \"\";",
                  "                ",
                  "    pm.expect(jsonData).to.eql(response);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{targets_postfix3}}test"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "88fe5d3b-a494-41f0-befd-2c0ac7ab756d",
      "name": "Switches",
      "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
      "item": [
        {
          "_postman_id": "6902e4fe-c3a0-4d91-a3af-02e532e794e6",
          "name": "Invalid indices and fields",
          "description": "",
          "item": [
            {
              "_postman_id": "b02ea782-3f12-41f5-8c5b-c2b3476c5586",
              "name": "Invalid customer key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Customer Not Found\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Customer Not Found\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "Api Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}test{{switches_postfix}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "9fe90317-2f18-46cf-9e9a-c70ec03a8d50",
              "name": "Create switch - invalid target id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"TargetId\",",
                      "                    \"message\": \"Invalid target id\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "Api-Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "99a64944-6b3c-46a8-941e-77bbf13f898a",
              "name": "Create switch - invalid type",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Type\",",
                      "                    \"message\": \"Invalid type provided.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "Api-Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "698d00ee-c4c6-4e59-94c2-ae19880e9c9a",
              "name": "Create switch - invalid accountHolderIndex",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"AccountHolderIndex\",",
                      "                    \"message\": \"Invalid account holder index\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "Api-Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 15\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "bec41c3f-1d37-4b15-8848-710335c5bbc7",
              "name": "Invalid switch index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "Api Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11"
              },
              "response": []
            },
            {
              "_postman_id": "d22d4b14-0a83-4b6e-964c-7e8ac6eedd07",
              "name": "Invalid switch index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": \"500\",\r\n      \"Custom_or Percentage of Pay (1 - 100)\": \"50\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11"
              },
              "response": []
            },
            {
              "_postman_id": "51c2208e-c821-4f20-87a3-ac5f277a6178",
              "name": "Submit Switch - invalid switch index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11/action"
              },
              "response": []
            },
            {
              "_postman_id": "e001725b-350f-409b-8b54-31cd234a72db",
              "name": "Cancel Switch- invalid switch index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11/action"
              },
              "response": []
            },
            {
              "_postman_id": "1b3b6c91-3eeb-495e-9bed-c387f3797035",
              "name": "Delete Switch - invalid switch index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 404,",
                      "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11",
                "description": "\t"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}