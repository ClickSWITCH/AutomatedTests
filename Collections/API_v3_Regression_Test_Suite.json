{
  "info": {
    "_postman_id": "a4f3ca2d-39fb-4238-b328-131f9bc3c51c",
    "name": "API v3 Regression Test Suite",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Types",
      "item": [
        {
          "name": "Targets",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                  "    pm.expect(jsonData.data).to.have.property(\"items\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                  "});",
                  "",
                  "const itemCount = 2;",
                  "pm.test(\"Has the correct number of items\", function () {",
                  "    // Change count and add expect to next test when account closure is added.",
                  "    pm.expect(jsonData.data.currentItemCount).to.eql(itemCount);",
                  "    pm.expect(jsonData.data.items).to.have.length(itemCount);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    for (var i = 0; i < itemCount; i++) {",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"id\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"label\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"plural\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"recipient\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"help\");",
                  "        pm.expect(Object.keys(jsonData.data.items[i]).length).to.equal(5);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Has the correct items\", function () {",
                  "    var deposit = {",
                  "        \"id\": \"deposit\",",
                  "        \"label\": \"Direct Deposit\",",
                  "        \"plural\": \"Direct Deposits\",",
                  "        \"recipient\": \"Depositor\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future direct deposits to your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deposit);",
                  "    ",
                  "    var payment =  {",
                  "        \"id\": \"payment\",",
                  "        \"label\": \"Automatic Payment\",",
                  "        \"plural\": \"Automatic Payments\",",
                  "        \"recipient\": \"Payee\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future automatic payments from your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(payment);",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4bde1cdd-4913-4b70-a734-8874f0834193",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/types/targets?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "types",
                "targets"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                  "    pm.expect(jsonData.data).to.have.property(\"items\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                  "});",
                  "",
                  "const itemCount = 10;",
                  "pm.test(\"Has the correct number of items\", function () {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(itemCount);",
                  "   pm.expect(jsonData.data.items).to.have.length(itemCount);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    for (var i = 0; i < itemCount; i++) {",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"id\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"label\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"help\");",
                  "        pm.expect(Object.keys(jsonData.data.items[i]).length).to.equal(3);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Has the correct items\", function () {",
                  "    var ready = {",
                  "        \"id\": \"ready\",",
                  "        \"label\": \"Ready\",",
                  "        \"help\": \"The switch is ready to submit for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(ready);",
                  "",
                  "    var incomplete = {",
                  "        \"id\": \"incomplete\",",
                  "        \"label\": \"Incomplete\",",
                  "        \"help\": \"The switch is missing information required for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(incomplete);",
                  "",
                  "    var canceled =  {",
                  "        \"id\": \"canceled\",",
                  "        \"label\": \"Canceled\",",
                  "        \"help\": \"The switch has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(canceled);",
                  "    ",
                  "    var submitted =  {",
                  "        \"id\": \"submitted\",",
                  "        \"label\": \"Submitted\",",
                  "        \"help\": \"The switch has been submitted for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submitted);",
                  "    ",
                  "    var printed =  {",
                  "        \"id\": \"printed\",",
                  "        \"label\": \"Printed\",",
                  "        \"help\": \"The switch has been printed for signature and/or in-person delivery.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printed);",
                  "    ",
                  "    var processing =  {",
                  "        \"id\": \"processing\",",
                  "        \"label\": \"In Process\",",
                  "        \"help\": \"The switch is currently being processed by our fulfillment team.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(processing);",
                  "    ",
                  "    var sent =  {",
                  "        \"id\": \"sent\",",
                  "        \"label\": \"Sent\",",
                  "        \"help\": \"The switch has been sent to the company or govt. agency for action.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(sent);",
                  "    ",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"The company or govt. agency has acknowledged that the change has been completed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var unableToProcess =  {",
                  "        \"id\": \"unabletoprocess\",",
                  "        \"label\": \"Unable To Process\",",
                  "        \"help\": \"The switch is unable to be processed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(unableToProcess);",
                  "    ",
                  "    var deleted =  {",
                  "        \"id\": \"deleted\",",
                  "        \"label\": \"Deleted\",",
                  "        \"help\": \"The switch is deleted\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleted);",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "    pm.expect(jsonData.data.kind).to.equal(\"types#switch#statuses\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4b53ccba-a447-422e-9a34-e36c4eca97be",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/types/switch/statuses?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "types",
                "switch",
                "statuses"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74d90fde-2509-4451-a886-18647421cd78",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                  "    pm.expect(jsonData.data).to.have.property(\"items\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                  "});",
                  "",
                  "const itemCount = 12;",
                  "pm.test(\"Has the correct number of items\", function () {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(itemCount);",
                  "   pm.expect(jsonData.data.items).to.have.length(itemCount);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    for (var i = 0; i < itemCount; i++) {",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"id\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"label\");",
                  "        pm.expect(jsonData.data.items[i]).to.have.property(\"help\");",
                  "        pm.expect(Object.keys(jsonData.data.items[i]).length).to.equal(3);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Has the correct items\", function () {",
                  "    var save = {",
                  "        \"id\": \"http-put\",",
                  "        \"label\": \"Save\",",
                  "        \"help\": \"Saves a switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(save);",
                  "    ",
                  "    var submit = {",
                  "        \"id\": \"submit\",",
                  "        \"label\": \"Submit\",",
                  "        \"help\": \"Submit the switch for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submit);",
                  "",
                  "    var cancel = {",
                  "        \"id\": \"cancel\",",
                  "        \"label\": \"Cancel\",",
                  "        \"help\": \"Cancel the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(cancel);",
                  "",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"You've taken the steps to make this change online or in person, so mark it complete.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var printformailing =  {",
                  "        \"id\": \"printformailing\",",
                  "        \"label\": \"Print For Mailing\",",
                  "        \"help\": \"Print this switch for mailing\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printformailing);",
                  "    ",
                  "    var print =  {",
                  "        \"id\": \"print\",",
                  "        \"label\": \"Print\",",
                  "        \"help\": \"Print the switch to sign or deliver in person.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(print);",
                  "    ",
                  "    var uncancel =  {",
                  "        \"id\": \"uncancel\",",
                  "        \"label\": \"Un-Cancel\",",
                  "        \"help\": \"Returns a canceled switch back to a state where it can be edited.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(uncancel);",
                  "    ",
                  "    var httpDelete =  {",
                  "        \"id\": \"http-delete\",",
                  "        \"label\": \"Delete\",",
                  "        \"help\": \"Deletes a switch that has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(httpDelete);",
                  "    ",
                  "    var startprocessing =  {",
                  "        \"id\": \"startprocessing\",",
                  "        \"label\": \"Start Processing\",",
                  "        \"help\": \"Start the processing of the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(startprocessing);",
                  "    ",
                  "    var reassign =  {",
                  "        \"id\": \"reassign\",",
                  "        \"label\": \"Reassign\",",
                  "        \"help\": \"Reassign the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reassign);",
                  "    ",
                  "    var mailreturned =  {",
                  "        \"id\": \"mailreturned\",",
                  "        \"label\": \"Mail Returned\",",
                  "        \"help\": \"Mail the returned switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(mailreturned);",
                  "    ",
                  "    var reject = {",
                  "        \"id\": \"reject\",",
                  "        \"label\": \"Reject\",",
                  "        \"help\": \"Reject the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reject);",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"types#switch#actions\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c033d823-1ac5-4da5-ad71-c5cde38f2830",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/types/switch/actions?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "types",
                "switch",
                "actions"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "cab73952-03a0-4e1c-b59c-7ee03d8e049e",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Customers",
      "item": [
        {
          "name": "Create Minimum Data",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                  "var timestamp = Date.now().toString();\r",
                  "var randomString = makeRandomString();\r",
                  "pm.environment.set(\"customerKey\", timestamp);\r",
                  "pm.environment.set(\"firstName\", randomString);\r",
                  "// Creates a random string of length 10.\r",
                  "function makeRandomString() {\r",
                  "  var text = \"\";\r",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                  "  for (var i = 0; i < 10; i++) {\r",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                  "  }\r",
                  "  \r",
                  "  return text;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has the required accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the required accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(5);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the required addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(5);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct account holders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = {",
                  "        firstName: pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"\",",
                  "        lastName: \"Test\"",
                  "    };",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(1);",
                  "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = {",
                  "        number: pm.environment.get(\"customerKey\"),",
                  "        type: pm.environment.get(\"accountTypeChecking\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber\"),",
                  "        index: 0,",
                  "        metadata: {}",
                  "    };",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.include(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        city: \"Minneapolis\",",
                  "        state: \"MN\",",
                  "        zip: \"55401\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "455dd84b-7830-42fa-9415-3f5f4909510f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{customerKey}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "619f588b-8132-4851-ad93-3b1caa61401e",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create One Customer One Account (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                "exec": [
                  "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                  "var timestamp = Date.now().toString();\r",
                  "var randomString = makeRandomString();\r",
                  "pm.environment.set(\"customerKey\", timestamp);\r",
                  "pm.environment.set(\"firstName\", randomString);\r",
                  "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    accountsMetadata: \"accountsMetadata\",\r",
                  "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                  "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                  "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                  "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                  "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                  "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                  "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                  "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                  "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                  "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                  "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                  "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                  "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                  "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                  "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                  "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                  "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                  "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                  "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                  "    }\r",
                  "));\r",
                  "pm.environment.set(\"metadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    metadata: \"metadata\",\r",
                  "    \tmetadata2: \"metadata2\",\r",
                  "    \tmetadata3: \"metadata3\",\r",
                  "    \tmetadata4: \"metadata4\",\r",
                  "    \tmetadata5: \"metadata5\",\r",
                  "    \tmetadata6: \"metadata6\",\r",
                  "    \tmetadata7: \"metadata7\",\r",
                  "    \tmetadata8: \"metadata8\",\r",
                  "    \tmetadata9: \"metadata9\",\r",
                  "    \tmetadata10: \"metadata10\",\r",
                  "    \tmetadata11: \"metadata11\",\r",
                  "    \tmetadata12: \"metadata12\",\r",
                  "    \tmetadata13: \"metadata13\",\r",
                  "    \tmetadata14: \"metadata14\",\r",
                  "    \tmetadata15: \"metadata15\",\r",
                  "    \tmetadata16: \"metadata16\",\r",
                  "    \tmetadata17: \"metadata17\",\r",
                  "    \tmetadata18: \"metadata18\",\r",
                  "    \tmetadata19: \"metadata19\",\r",
                  "    \tmetadata20: \"metadata20\"\r",
                  "    }\r",
                  "));\r",
                  "\r",
                  "// Creates a random string of length 10.\r",
                  "function makeRandomString() {\r",
                  "  var text = \"\";\r",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                  "  \r",
                  "  for (var i = 0; i < 10; i++) {\r",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                  "  }\r",
                  "  \r",
                  "  return text;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = {",
                  "        firstName: pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"J\",",
                  "        lastName: \"Test\"",
                  "    };",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(1);",
                  "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = {",
                  "        number: pm.environment.get(\"customerKey\"),",
                  "        type: pm.environment.get(\"accountTypeChecking\"),",
                  "        name: pm.environment.get(\"accountName\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber\"),",
                  "        index: 0,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    };",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.include(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b9b89b23-cf76-4870-b0b7-83039e389c19",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{customerKey}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update One Customer Add Account (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has expected addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(5);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"123\" + pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6124444444\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [",
                  "       {",
                  "            firstName: \"A\" + pm.environment.get(\"firstName\"),",
                  "            middleInitial: \"j\",",
                  "            lastName: \"Testing\"",
                  "        },",
                  "        {",
                  "            firstName: \"Testing\",",
                  "            middleInitial: \"S\",",
                  "            lastName: \"Tester\"",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(2);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [",
                  "       {",
                  "            number: pm.environment.get(\"customerKey\") + \"1\",",
                  "            type: pm.environment.get(\"accountTypeSavings\"),",
                  "            name: pm.environment.get(\"accountName2\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber2\"),",
                  "            index: 0,",
                  "            metadata: {}",
                  "        },",
                  "        {",
                  "            number: pm.environment.get(\"customerKey\") + \"0\",",
                  "            type: pm.environment.get(\"accountTypeChecking\"),",
                  "            name: pm.environment.get(\"accountName\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber\"),",
                  "            index: 1,",
                  "            metadata: {}",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(2);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. S\",",
                  "        city: \"St. Paul\",",
                  "        zip: \"55410\",",
                  "        state: \"WI\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f0617700-df4d-4b36-bb2c-3e6fbd1cc643",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"123{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6124444444\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"A{{firstName}}\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Testing\"\n        },\n        {\n        \"firstName\": \"Testing\",\n        \"middleInitial\": \"S\",\n        \"lastName\": \"Tester\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{customerKey}}1\",\n\t        \"type\": \"{{accountTypeSavings}}\",\n\t        \"name\": \"{{accountName2}}\",\n\t        \"routingNumber\": \"{{routingNumber2}}\"\n        },\n        {\n\t        \"number\": \"{{customerKey}}0\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. S\",\n            \"city\": \"St. Paul\",\n            \"state\": \"WI\",\n            \"zip\": \"55410\",\n            \"country\": \"US\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "09e0edac-1dbc-4258-b658-78263f0db74e",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update One Customer Rename Updated Values (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"321\" + pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [",
                  "       {",
                  "            firstName: pm.environment.get(\"firstName\"),",
                  "            middleInitial: \"J\",",
                  "            lastName: \"Test\"",
                  "        },",
                  "        {",
                  "            firstName: \"TestingAgain\",",
                  "            middleInitial: \"s\",",
                  "            lastName: \"TesterAgain\"",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(2);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [",
                  "       {",
                  "            number: pm.environment.get(\"customerKey\"),",
                  "            type: pm.environment.get(\"accountTypeChecking\"),",
                  "            name: pm.environment.get(\"accountName\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber\"),",
                  "            index: 0,",
                  "            metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "        },",
                  "        {",
                  "            number: pm.environment.get(\"customerKey\") + \"0\",",
                  "            type: pm.environment.get(\"accountTypeSavings\"),",
                  "            name: pm.environment.get(\"accountName2\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber2\"),",
                  "            index: 1,",
                  "            metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(2);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "d6f252c5-ed84-4453-b09c-7b431966dd92",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"321{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"TestingAgain\",\n        \"middleInitial\": \"s\",\n        \"lastName\": \"TesterAgain\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n        },\n        {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "6b40ad2d-89c2-4ba3-956c-ee95fb814be1",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update One Customer Remove Account (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "992025da-dba6-4a58-bb10-38a80e9a8724",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"321\" + pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [",
                  "       {",
                  "            firstName: pm.environment.get(\"firstName\"),",
                  "            middleInitial: \"J\",",
                  "            lastName: \"Test\"",
                  "        },",
                  "        {",
                  "            firstName: \"TestingAgain\",",
                  "            middleInitial: \"s\",",
                  "            lastName: \"TesterAgain\"",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(2);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [",
                  "       {",
                  "            number: pm.environment.get(\"customerKey\"),",
                  "            type: pm.environment.get(\"accountTypeChecking\"),",
                  "            name: pm.environment.get(\"accountName\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber\"),",
                  "            index: 0,",
                  "            metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4f38d72d-1e12-42d8-856c-5f78f7faedb6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"321{{customerKey}}@clickswitch.com\",\r\n  \"phoneNumber\": \"6125555555\",\r\n  \"accountHolders\" : [\r\n      {\r\n      \"firstName\": \"{{firstName}}\",\r\n      \"middleInitial\": \"J\",\r\n      \"lastName\": \"Test\"\r\n      },\r\n      {\r\n      \"firstName\": \"TestingAgain\",\r\n      \"middleInitial\": \"s\",\r\n      \"lastName\": \"TesterAgain\"\r\n      }\r\n  ],\r\n  \"accounts\": [\r\n      {\r\n      \"number\": \"{{customerKey}}\",\r\n      \"type\": \"{{accountTypeChecking}}\",\r\n      \"name\": \"{{accountName}}\",\r\n      \"routingNumber\": \"{{routingNumber}}\",\r\n      \"metadata\": {{accountsMetadata}}\r\n      }\r\n  ],\r\n  \"addresses\": [\r\n      {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"state\": \"MN\",\r\n          \"zip\": \"55401\",\r\n          \"country\": \"US\"\r\n      }\r\n  ],\r\n  \"metadata\": {{metadata}}\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "68cc81fb-e187-437c-a057-fbd14046aa3a",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update One Customer Remove Account Holder (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2b1ed99f-d52e-45ca-8e52-96456a95c43f",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"321\" + pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [",
                  "       {",
                  "            firstName: pm.environment.get(\"firstName\"),",
                  "            middleInitial: \"J\",",
                  "            lastName: \"Test\"",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(1);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [",
                  "       {",
                  "            number: pm.environment.get(\"customerKey\"),",
                  "            type: pm.environment.get(\"accountTypeChecking\"),",
                  "            name: pm.environment.get(\"accountName\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber\"),",
                  "            index: 0,",
                  "            metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a4dc5c3e-d6da-47ec-b6b5-7a2f1ce41351",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"321{{customerKey}}@clickswitch.com\",\r\n  \"phoneNumber\": \"6125555555\",\r\n  \"accountHolders\" : [\r\n      {\r\n      \"firstName\": \"{{firstName}}\",\r\n      \"middleInitial\": \"J\",\r\n      \"lastName\": \"Test\"\r\n      }\r\n  ],\r\n  \"accounts\": [\r\n      {\r\n      \"number\": \"{{customerKey}}\",\r\n      \"type\": \"{{accountTypeChecking}}\",\r\n      \"name\": \"{{accountName}}\",\r\n      \"routingNumber\": \"{{routingNumber}}\",\r\n      \"metadata\": {{accountsMetadata}}\r\n      }\r\n  ],\r\n  \"addresses\": [\r\n      {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"state\": \"MN\",\r\n          \"zip\": \"55401\",\r\n          \"country\": \"US\"\r\n      }\r\n  ],\r\n  \"metadata\": {{metadata}}\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "2d905cab-b5b7-483f-8961-720bd2fcca3d",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "By customerKey",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(\"321\" + pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [",
                  "       {",
                  "            firstName: pm.environment.get(\"firstName\"),",
                  "            middleInitial: \"J\",",
                  "            lastName: \"Test\"",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(1);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [",
                  "       {",
                  "            number: pm.environment.get(\"customerKey\"),",
                  "            type: pm.environment.get(\"accountTypeChecking\"),",
                  "            name: pm.environment.get(\"accountName\"),",
                  "            routingNumber: pm.environment.get(\"routingNumber\"),",
                  "            index: 0,",
                  "            metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "        }",
                  "    ];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5d265f02-8bdc-4f92-97b4-70c1ddb9a918",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "e46362ad-5e86-4fcb-81cf-6383d4ed2013",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create One Customer Two Accounts",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                "exec": [
                  "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                  "var timestamp = Date.now().toString();\r",
                  "var randomString = makeRandomString();\r",
                  "pm.environment.set(\"customerKey\", timestamp);\r",
                  "pm.environment.set(\"firstName\", randomString);\r",
                  "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    accountsMetadata: \"accountsMetadata\",\r",
                  "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                  "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                  "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                  "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                  "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                  "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                  "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                  "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                  "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                  "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                  "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                  "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                  "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                  "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                  "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                  "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                  "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                  "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                  "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                  "    }\r",
                  "));\r",
                  "pm.environment.set(\"metadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    metadata: \"metadata\",\r",
                  "    \tmetadata2: \"metadata2\",\r",
                  "    \tmetadata3: \"metadata3\",\r",
                  "    \tmetadata4: \"metadata4\",\r",
                  "    \tmetadata5: \"metadata5\",\r",
                  "    \tmetadata6: \"metadata6\",\r",
                  "    \tmetadata7: \"metadata7\",\r",
                  "    \tmetadata8: \"metadata8\",\r",
                  "    \tmetadata9: \"metadata9\",\r",
                  "    \tmetadata10: \"metadata10\",\r",
                  "    \tmetadata11: \"metadata11\",\r",
                  "    \tmetadata12: \"metadata12\",\r",
                  "    \tmetadata13: \"metadata13\",\r",
                  "    \tmetadata14: \"metadata14\",\r",
                  "    \tmetadata15: \"metadata15\",\r",
                  "    \tmetadata16: \"metadata16\",\r",
                  "    \tmetadata17: \"metadata17\",\r",
                  "    \tmetadata18: \"metadata18\",\r",
                  "    \tmetadata19: \"metadata19\",\r",
                  "    \tmetadata20: \"metadata20\"\r",
                  "    }\r",
                  "));\r",
                  "\r",
                  "// Creates a random string of length 10.\r",
                  "function makeRandomString() {\r",
                  "  var text = \"\";\r",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                  "  \r",
                  "  for (var i = 0; i < 10; i++) {\r",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                  "  }\r",
                  "  \r",
                  "  return text;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "744d30ab-5c71-47e4-a9de-62f86d6ba104",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = {",
                  "        firstName: pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"J\",",
                  "        lastName: \"Test\"",
                  "    };",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(1);",
                  "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [{",
                  "        number: pm.environment.get(\"customerKey\"),",
                  "        type: pm.environment.get(\"accountTypeChecking\"),",
                  "        name: pm.environment.get(\"accountName\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber\"),",
                  "        index: 0,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    },",
                  "    {",
                  "        number: pm.environment.get(\"customerKey\") + \"0\",",
                  "        type: pm.environment.get(\"accountTypeSavings\"),",
                  "        name: pm.environment.get(\"accountName2\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber2\"),",
                  "        index: 1,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    }];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(2);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "e14cf382-558b-4535-9699-3edede63da93",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{customerKey}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        },\n        {\n\t        \"number\": \"{{customerKey}}0\",\n\t        \"type\": \"{{accountTypeSavings}}\",\n\t        \"name\": \"{{accountName2}}\",\n\t        \"routingNumber\": \"{{routingNumber2}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "fff86fae-89d1-43fd-8ac9-9d2af4c92e5e",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Joint Customer One Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                "exec": [
                  "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                  "var timestamp = Date.now().toString();\r",
                  "var randomString = makeRandomString();\r",
                  "pm.environment.set(\"customerKey\", timestamp);\r",
                  "pm.environment.set(\"firstName\", randomString);\r",
                  "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    accountsMetadata: \"accountsMetadata\",\r",
                  "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                  "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                  "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                  "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                  "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                  "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                  "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                  "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                  "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                  "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                  "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                  "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                  "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                  "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                  "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                  "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                  "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                  "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                  "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                  "    }\r",
                  "));\r",
                  "pm.environment.set(\"metadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    metadata: \"metadata\",\r",
                  "    \tmetadata2: \"metadata2\",\r",
                  "    \tmetadata3: \"metadata3\",\r",
                  "    \tmetadata4: \"metadata4\",\r",
                  "    \tmetadata5: \"metadata5\",\r",
                  "    \tmetadata6: \"metadata6\",\r",
                  "    \tmetadata7: \"metadata7\",\r",
                  "    \tmetadata8: \"metadata8\",\r",
                  "    \tmetadata9: \"metadata9\",\r",
                  "    \tmetadata10: \"metadata10\",\r",
                  "    \tmetadata11: \"metadata11\",\r",
                  "    \tmetadata12: \"metadata12\",\r",
                  "    \tmetadata13: \"metadata13\",\r",
                  "    \tmetadata14: \"metadata14\",\r",
                  "    \tmetadata15: \"metadata15\",\r",
                  "    \tmetadata16: \"metadata16\",\r",
                  "    \tmetadata17: \"metadata17\",\r",
                  "    \tmetadata18: \"metadata18\",\r",
                  "    \tmetadata19: \"metadata19\",\r",
                  "    \tmetadata20: \"metadata20\"\r",
                  "    }\r",
                  "));\r",
                  "\r",
                  "// Creates a random string of length 10.\r",
                  "function makeRandomString() {\r",
                  "  var text = \"\";\r",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                  "  \r",
                  "  for (var i = 0; i < 10; i++) {\r",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                  "  }\r",
                  "  \r",
                  "  return text;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "744d30ab-5c71-47e4-a9de-62f86d6ba104",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [{",
                  "        firstName: pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"J\",",
                  "        lastName: \"Test\"",
                  "    },",
                  "    {",
                  "        firstName: \"A\" + pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"S\",",
                  "        lastName: \"Tester\"",
                  "    }];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(2);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [{",
                  "        number: pm.environment.get(\"customerKey\"),",
                  "        type: pm.environment.get(\"accountTypeChecking\"),",
                  "        name: pm.environment.get(\"accountName\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber\"),",
                  "        index: 0,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    }];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(1);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fb927391-94b7-45ba-8ca2-847ab59903b2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n        {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n        {\r\n\t        \"number\": \"{{customerKey}}\",\r\n\t        \"type\": \"{{accountTypeChecking}}\",\r\n\t        \"name\": \"{{accountName}}\",\r\n\t        \"routingNumber\": \"{{routingNumber}}\",\r\n\t        \"metadata\": {{accountsMetadata}}\r\n        }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n            \"line1\": \"244 1st Ave. N\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"zip\": \"55401\",\r\n            \"state\": \"MN\",\r\n            \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "208841a8-90fd-45ad-9a1a-be6ab245d637",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Joint Customer Two Accounts (Dependency)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                "exec": [
                  "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                  "var timestamp = Date.now().toString();\r",
                  "var randomString = makeRandomString();\r",
                  "pm.environment.set(\"customerKey\", timestamp);\r",
                  "pm.environment.set(\"firstName\", randomString);\r",
                  "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    accountsMetadata: \"accountsMetadata\",\r",
                  "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                  "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                  "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                  "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                  "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                  "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                  "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                  "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                  "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                  "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                  "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                  "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                  "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                  "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                  "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                  "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                  "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                  "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                  "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                  "    }\r",
                  "));\r",
                  "pm.environment.set(\"metadata\", JSON.stringify(\r",
                  "    {\r",
                  "\t    metadata: \"metadata\",\r",
                  "    \tmetadata2: \"metadata2\",\r",
                  "    \tmetadata3: \"metadata3\",\r",
                  "    \tmetadata4: \"metadata4\",\r",
                  "    \tmetadata5: \"metadata5\",\r",
                  "    \tmetadata6: \"metadata6\",\r",
                  "    \tmetadata7: \"metadata7\",\r",
                  "    \tmetadata8: \"metadata8\",\r",
                  "    \tmetadata9: \"metadata9\",\r",
                  "    \tmetadata10: \"metadata10\",\r",
                  "    \tmetadata11: \"metadata11\",\r",
                  "    \tmetadata12: \"metadata12\",\r",
                  "    \tmetadata13: \"metadata13\",\r",
                  "    \tmetadata14: \"metadata14\",\r",
                  "    \tmetadata15: \"metadata15\",\r",
                  "    \tmetadata16: \"metadata16\",\r",
                  "    \tmetadata17: \"metadata17\",\r",
                  "    \tmetadata18: \"metadata18\",\r",
                  "    \tmetadata19: \"metadata19\",\r",
                  "    \tmetadata20: \"metadata20\"\r",
                  "    }\r",
                  "));\r",
                  "\r",
                  "// Creates a random string of length 10.\r",
                  "function makeRandomString() {\r",
                  "  var text = \"\";\r",
                  "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                  "  \r",
                  "  for (var i = 0; i < 10; i++) {\r",
                  "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                  "  }\r",
                  "  \r",
                  "  return text;\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "744d30ab-5c71-47e4-a9de-62f86d6ba104",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has all item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has all accountHolders properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                  "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all accounts properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                  "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                  "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has all addresses properties\", function () {",
                  "    var looped = false;",
                  "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                  "        looped = true;",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                  "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                  "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                  "    }",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct email\", function () {",
                  "   pm.expect(jsonData.data.item.email).to.equal(pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct phoneNumber\", function () {",
                  "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                  "});",
                  "",
                  "pm.test(\"Has the correct accountHolders\", function () {",
                  "   var accountHolders = jsonData.data.item.accountHolders;",
                  "   var expectedAccountHolders = [{",
                  "        firstName: pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"J\",",
                  "        lastName: \"Test\"",
                  "    },",
                  "    {",
                  "        firstName: \"A\" + pm.environment.get(\"firstName\"),",
                  "        middleInitial: \"S\",",
                  "        lastName: \"Tester\"",
                  "    }];",
                  "    ",
                  "    pm.expect(accountHolders).to.have.length(2);",
                  "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                  "});",
                  "",
                  "pm.test(\"Has the correct accounts\", function () {",
                  "   var accounts = jsonData.data.item.accounts;",
                  "   var expectedAccounts = [{",
                  "        number: pm.environment.get(\"customerKey\"),",
                  "        type: pm.environment.get(\"accountTypeChecking\"),",
                  "        name: pm.environment.get(\"accountName\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber\"),",
                  "        index: 0,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    },",
                  "    {",
                  "        number: pm.environment.get(\"customerKey\") + \"0\",",
                  "        type: pm.environment.get(\"accountTypeSavings\"),",
                  "        name: pm.environment.get(\"accountName2\"),",
                  "        routingNumber: pm.environment.get(\"routingNumber2\"),",
                  "        index: 1,",
                  "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                  "    }];",
                  "    ",
                  "    pm.expect(accounts).to.have.length(2);",
                  "    pm.expect(accounts).to.deep.equal(expectedAccounts);",
                  "});",
                  "",
                  "pm.test(\"Has the correct addresses\", function () {",
                  "   var addresses = jsonData.data.item.addresses;",
                  "   var expectedAddresses = {",
                  "        line1: \"244 1st Ave. N\",",
                  "        line2: \"#100\",",
                  "        line3: \"ATTN Test\",",
                  "        city: \"Minneapolis\",",
                  "        zip: \"55401\",",
                  "        state: \"MN\",",
                  "        country: \"US\"",
                  "    };",
                  "    ",
                  "    pm.expect(addresses).to.have.length(1);",
                  "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                  "});",
                  "",
                  "pm.test(\"Has the correct metadata\", function () {",
                  "    metadata = jsonData.data.item.metadata;",
                  "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                  "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2406dd0a-4253-4242-8d78-4d13c91639f7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n    \t{\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authorization URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56fdbea3-e852-49e2-959c-e2f961c9b94a",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has all properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has all data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has url property\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"url\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(1);",
                  "});",
                  "",
                  "pm.test(\"Has correct url\", function () {",
                  "    var url = jsonData.data.item.url;",
                  "    pm.expect(jsonData.data.item.url).to.have.string(pm.environment.get(\"baseAuthorizationUrl\"));",
                  "    pm.expect(url).to.match(/https:\\/\\/(.*)\\.(.*)\\.(com|ca)\\/Account\\/LoginFromToken\\?token=(.*)/);",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8108a8a7-eaf4-4607-b3a9-c9690e45b190",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey/auth?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey",
                "auth"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "8f2ba21f-d4e8-4a5f-8598-9afdf5a40a9f",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "1d810d1d-7c13-47a1-b651-57dafd5dcabb",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Targets",
      "item": [
        {
          "name": "Deposit",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e433da92-d5e1-49f8-808e-087d5b5d5aa4",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdDeposit\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdDeposit\"),",
                      "        name: pm.environment.get(\"targetNameDeposit\"),",
                      "        type: \"deposit\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3e7f35ce-f09c-41d4-b27b-a09bbb11fda5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDeposit}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNameDeposit}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"submit\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": stateFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": stateFieldRegex,",
                      "                        \"validationMessage\": stateFieldValidation",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": zipFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": zipFieldRegex,",
                      "                        \"validationMessage\": zipFieldValidation",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1a100f73-4aa3-4469-bde7-debf2cbc4167",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "targetId",
                      "value": "{{targetIdDeposit}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "36bc600d-ec24-4879-b4ad-34d47784e545",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Print Only",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a026d7c-53d9-417c-a1a9-0cc5e523c9f0",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdDepositPrint\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdDepositPrint\"),",
                      "        name: pm.environment.get(\"targetNameDepositPrint\"),",
                      "        type: \"deposit\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a8645896-7941-4a82-a4f6-9ae1bb234078",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDepositPrint}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNameDepositPrint}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc35a7-dcc5-4588-a688-b3508d48835b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"print\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": stateFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": stateFieldRegex,",
                      "                        \"validationMessage\": stateFieldValidation",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": zipFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": zipFieldRegex,",
                      "                        \"validationMessage\": zipFieldValidation",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "010037d4-8114-4861-814c-9968d3993c15",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "targetId",
                      "value": "{{targetIdDepositPrint}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "1dcb79f8-8701-4625-8593-48e3649006b1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c0ffdb5-8dc3-457a-b310-abeb59957e26",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "495c4015-ece3-4c26-b205-2c9ff1a3dcd9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Online Only",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96f36281-d983-4cd3-b650-56aef5c60e0c",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdDepositOnline\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdDepositOnline\"),",
                      "        name: pm.environment.get(\"targetNameDepositOnline\"),",
                      "        type: \"deposit\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fa800dd4-dc7c-4659-aa70-016ca7a178dd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDepositOnline}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNameDepositOnline}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5b905ea-437e-4b74-b222-56195e89a5f0",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"complete\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux);",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c5d9b964-1f68-4509-a3bb-f5b2fe5fa26d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "1b988c2b-e5c9-41d5-a291-56c9d18af98c",
                      "key": "targetId",
                      "value": "{{targetIdDepositOnline}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "9a8fd152-087a-4ee8-9176-5e8457e3d336",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "259129d1-ff5f-4ffb-b5a2-31a9ab9e5b5b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "03ea0fbb-28d7-4151-94d5-96bd84a56b84",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Split",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10795ed6-ce38-4565-8bdb-19fc007914ed",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdDepositSplit\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdDepositSplit\"),",
                      "        name: pm.environment.get(\"targetNameDepositSplit\"),",
                      "        type: \"deposit\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f41a0771-6a3d-44b9-ae6b-219e7617c0ed",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDepositSplit}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNameDepositSplit}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e61e303a-619f-4bcf-aa1a-8b5f128fc5bc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"submit\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 5,",
                      "            \"maxChecking\": 5,",
                      "            \"maxSavings\": 5,",
                      "            \"choices\": [],",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": false,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"currency\",",
                      "                            \"label\": \"$ Amount\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Account:Add\",",
                      "                    \"label\": \"Account Add\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Account:Change\",",
                      "                    \"label\": \"Account Change\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Employee/ID\",",
                      "                \"label\": \"Employee ID Number (EIN)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Company/Dept\",",
                      "                \"label\": \"Agency ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1d03c858-ef2c-49dd-9bcb-afb153ce690b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "targetId",
                      "value": "{{targetIdDepositSplit}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "c52f829e-a51f-4db2-b06b-c67f3bb43467",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d93cfc3-8c8b-42c1-8d01-71b448777378",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5a33755b-181b-4d3c-94fe-37e66da9cc7e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47bd635b-41c3-4c34-9f84-4510d828b3c0",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdPayment\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdPayment\"),",
                      "        name: pm.environment.get(\"targetNamePayment\"),",
                      "        type: \"payment\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "59060d3f-3493-4763-ab8d-88d42e5bc326",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=payment&name={{targetNamePayment}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNamePayment}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c32d0f62-0067-43d3-b4e7-3becab451b1a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"submit\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Amount\",",
                      "                \"label\": \"Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_SSN4\",",
                      "                \"label\": \"SSN - Last 4\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Frequency\",",
                      "                \"label\": \"Frequency\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_WithdrawalDate\",",
                      "                \"label\": \"Withdrawal Date\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_EffectiveDate\",",
                      "                \"label\": \"Effective Date\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Policy/Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": stateFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": stateFieldRegex,",
                      "                        \"validationMessage\": stateFieldValidation",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": zipFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": zipFieldRegex,",
                      "                        \"validationMessage\": zipFieldValidation",
                      "                    }",
                      "                ]",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "738be77b-bf34-4ffa-92b7-b678ae0410a6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "targetId",
                      "value": "{{targetIdPayment}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "34af6487-7503-4b38-9808-3a3069f6230f",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9500365-9511-4bf2-95b4-ea818babc929",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e67aca5-900e-43bc-8111-59c6c7ae6ade",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Print Only",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bda6b21d-4ac8-4bf0-84ca-5a5b57d7905b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdPaymentPrint\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdPaymentPrint\"),",
                      "        name: pm.environment.get(\"targetNamePaymentPrint\"),",
                      "        type: \"payment\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e5842ad5-abfc-4c8e-9588-f14a0bedb2dc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=payment&name={{targetNamePaymentPrint}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNamePaymentPrint}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77525ab5-0ef7-4dae-b49e-71380f5a4f2a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function () {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"print\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function() {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Amount\",",
                      "                \"label\": \"Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_SSN4\",",
                      "                \"label\": \"SSN - Last 4\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Frequency\",",
                      "                \"label\": \"Frequency\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_WithdrawalDate\",",
                      "                \"label\": \"Withdrawal Date\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_EffectiveDate\",",
                      "                \"label\": \"Effective Date\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Policy/Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": stateFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": stateFieldRegex,",
                      "                        \"validationMessage\": stateFieldValidation",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": zipFieldLabel,",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": zipFieldRegex,",
                      "                        \"validationMessage\": zipFieldValidation",
                      "                    }",
                      "                ]",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7bcb7b59-ca2d-42ef-907e-8039475ab4e3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "targetId",
                      "value": "{{targetIdPaymentPrint}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "f23e0db4-1f7d-4ff2-b04c-35d39bdf0754",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8695ee9-2ce3-4b07-9c0f-18f591e4c942",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b40855f1-9802-40df-b929-318cfc0de191",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Online Only",
          "item": [
            {
              "name": "By Name (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e64aea4-1175-4ff1-ad86-1a0886f45ec0",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set(\"targetIdPaymentOnline\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct number of items\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "    pm.expect(jsonData.data.items.length).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.items.forEach(item => {",
                      "        looped = true;",
                      "        pm.expect(item).to.have.property('targetId');",
                      "        pm.expect(item).to.have.property('name');",
                      "        pm.expect(item).to.have.property('type');",
                      "        pm.expect(Object.keys(item).length).to.equal(3);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(1); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function () {",
                      "    var items = [{",
                      "        targetId: pm.environment.get(\"targetIdPaymentOnline\"),",
                      "        name: pm.environment.get(\"targetNamePaymentOnline\"),",
                      "        type: \"payment\"",
                      "    }];",
                      "    ",
                      "   pm.expect(jsonData.data.items).to.deep.equal(items); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"types#targets\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "006c7284-8c9e-4116-a784-7f16ffb3a5f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets?type=payment&name={{targetNamePaymentOnline}}&customer={{customerKey}}&context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment"
                    },
                    {
                      "key": "name",
                      "value": "{{targetNamePaymentOnline}}"
                    },
                    {
                      "key": "customer",
                      "value": "{{customerKey}}"
                    },
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76f0cfa0-2c33-4ebf-a49b-349cd95ff332",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the required item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"targetId\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"name\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"type\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"categories\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"finalAction\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"ux\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has the required categories properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.data.item.categories.forEach(category => {",
                      "        looped = true;",
                      "        pm.expect(category).to.have.property(\"key\");",
                      "        pm.expect(category).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(category).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentOnline\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct categories\", function () {",
                      "    var categories = [{",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    }];",
                      "    ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.equal(categories); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct final action\", function () {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal(\"complete\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct ux\", function () {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.equal(ux); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"target\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a505b01e-2eeb-4c62-9f58-579739eaf2bb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "targets",
                    ":targetId"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "a8b3bbdd-23ff-4bb3-8c21-88ec039173f0",
                      "key": "targetId",
                      "value": "{{targetIdPaymentOnline}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "32ef32e9-0835-4338-84eb-7bfb5136a9a0",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e0f4761e-690b-4320-8652-aba30853e02e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2f4ff74-89c0-4623-bd15-833450903b61",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "By Location (Dependency)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                  "    pm.expect(jsonData.data).to.have.property(\"items\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the correct number of items\", function () {",
                  "    pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                  "    pm.expect(jsonData.data.items.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    var looped = false;",
                  "    jsonData.data.items.forEach(item => {",
                  "        looped = true;",
                  "        pm.expect(item).to.have.property('locationId');",
                  "        pm.expect(item).to.have.property('name');",
                  "        pm.expect(item).to.have.property('address');",
                  "        pm.expect(Object.keys(item).length).to.equal(3);",
                  "    });",
                  "    ",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has matching items\", function () {",
                  "    var looped = false;",
                  "    jsonData.data.items.forEach(item => {",
                  "        looped = true;",
                  "        pm.expect(item.locationId).to.have.length(27);",
                  "        pm.expect(item.name).to.include(pm.environment.get(\"targetNameLocationSearch\"));",
                  "        pm.expect(item.address).to.include(\"USA\");",
                  "    });",
                  "    ",
                  "    pm.expect(looped).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"location\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.environment.set(\"locationId\", jsonData.data.items[0].locationId);",
                  "pm.environment.set(\"targetNameLocation\", jsonData.data.items[0].name);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "72b9d9e7-ba97-49fd-9541-8b80b4754f55",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/locations?customer={{customerKey}}&name={{targetNameLocationSearch}}&context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "locations"
              ],
              "query": [
                {
                  "key": "customer",
                  "value": "{{customerKey}}"
                },
                {
                  "key": "name",
                  "value": "{{targetNameLocationSearch}}"
                },
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "4334e94a-befc-4149-934b-333488d155d8",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Switches",
      "item": [
        {
          "name": "Deposit Using TargetId",
          "item": [
            {
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"Has empty array of switches\", function() {",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function() {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d27f6bfc-b324-4c5a-8e1c-e33b1ed60c30",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "39ad85dd-7583-4d9b-88e1-2f70f83fe2ae",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "53e0f2eb-7e07-4e5e-b85e-14a9ae22a60f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b8393408-8c8b-4077-baa7-5f80dee1f3c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c90b51ef-04f8-4c02-8893-0577e29c143e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "801f1160-5e80-4bdf-8826-fab1f1a273e3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"Deposit\",\n  \"targetId\": \"{{targetIdDeposit}}\",\n  \"accountHolderIndex\": 0,\n  \"values\": {\n\t  \"accounts\":[\n\t\t{\n\t\t\t\"index\": 0\n\t\t}\n\t],\n\t\"fields\": {\n        \"Custom_Net or Amount (in dollars)\": \"100\",\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\n        \"Custom_Depositor's Full Mailing Address\": {\n            \"line1\": \"244 N 1st Ave\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"{{state}}\",\n            \"zip\": \"{{zip}}\"\n        },\n        \"Custom_Employee ID\": \"1234\",\n        \"Custom_Last 4 of SSN\": \"1234\"\n\t}\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9d657074-8507-4494-8577-39e116a87195",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "eb3a880d-9b34-4d46-b53a-d1ab79a9a5e9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Uncancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c2dbd95b-4806-4a51-bc47-a63ff6d219af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Uncancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0ee42505-195b-4aaf-bae9-87b5ebcebf90",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e87c42df-ec72-4211-baa0-325e446fd028",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "50e1963a-7fc3-4507-b7ad-483a07242739",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Deleted Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4fa8f464-9f1d-46d8-932a-e57b29d5cb20",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "e5e482d0-93f8-424f-b149-5a2c9a9b3496",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "277b0496-0247-432c-8938-3298cbda1b80",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Using LocationId",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": 0,",
                      "            \"Custom_Employee/ID\": null",
                      "        }",
                      "    };",
                      "",
                      "    isUs ? values.fields.Custom_SSN4 = null : values.fields.Custom_SIN3 = null;",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"category\": \"The field is required and must match one of the provided categories.\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields.Custom_SSN4 = \"This field is required\"",
                      "    } else {",
                      "        state.validation.fields.Custom_SIN3 = \"This field is required\"",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b6945200-6553-49c7-89ee-3c7f1c93ff38",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{locationId}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"index\": 0,\n        \"fields\": {\n        \t\"splitAmount\": 100,\n        \t\"splitType\": \"currency\"\n        }\n      }\n    ]\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": 0,",
                      "            \"Custom_Employee/ID\": null",
                      "        }",
                      "    };",
                      "",
                      "    isUs ? values.fields.Custom_SSN4 = null : values.fields.Custom_SIN3 = null;",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"category\": \"The field is required and must match one of the provided categories.\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields.Custom_SSN4 = \"This field is required\"",
                      "    } else {",
                      "        state.validation.fields.Custom_SIN3 = \"This field is required\"",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "824d4022-239c-4242-ae3f-9fad23b7458b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92d7ba5b-e11a-49fc-937a-a6081d6cf9c4",
                    "exec": [
                      "if (pm.environment.get(\"country\") === 'US') {\r",
                      "    pm.environment.set(\"requestFields\", JSON.stringify({\r",
                      "        \"category\": 1,\r",
                      "        \"Custom_Employee/ID\": \"1234\",\r",
                      "        \"Custom_SSN4\": \"1234\"\r",
                      "    }));    \r",
                      "} else {\r",
                      "    pm.environment.set(\"requestFields\", JSON.stringify({\r",
                      "        \"category\": 1,\r",
                      "        \"Custom_Employee/ID\": \"1234\",\r",
                      "        \"Custom_SIN3\": \"123\"\r",
                      "    }));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ee0e72c0-c96a-4bca-97e1-482dcbcbcd68",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"locationId\": \"{{locationId}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0,\r\n        \"fields\": {\r\n        \t\"splitAmount\": 100,\r\n        \t\"splitType\": \"currency\"\r\n        }\r\n      }\r\n    ],\r\n    \"fields\": {{requestFields}}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b4de0216-4572-4b2b-aa32-928da3d36285",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch In Submitted State",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal('Unable to HTTP-DELETE the switch currently with the status Submitted');",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal('Unable to HTTP-DELETE the switch currently with the status Submitted');",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7908891a-fdda-4159-9b4c-48da29a1a22e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "c1f6fb8d-4b9a-4aa0-ac05-f0a2f06ef275",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f67c409a-5af8-419d-9bae-93c460765e8f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "06e2147b-95dc-435d-a5ce-2bd773223899",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "973eeead-e3fc-4cca-9f2b-b62c04af08d2",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Deleted Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct code\", function () {",
                      "    pm.expect(jsonData.error.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7669288e-7edb-48ac-82ee-75d99c579344",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "540f7c23-fc8c-49ef-9559-34cce7f102b7",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "6fb28845-c08e-4075-8e75-b086c3f768fb",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Using Neither",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(8);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.false;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [],",
                      "        \"fields\": {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Employee/ID\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = null : values.fields.Custom_SIN3 = null;",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" ",
                      "                            : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                \"name\": \"This field is required\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\"",
                      "                }",
                      "            },",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? state.validation.fields.Custom_SSN4 = \"This field is required\" : state.validation.fields.Custom_SIN3 = \"This field is required\"",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "20c0171c-7a66-4c5e-9e53-a0455a1b09b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(8);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.false;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [],",
                      "        \"fields\": {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Employee/ID\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = null : values.fields.Custom_SIN3 = null;",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" ",
                      "                            : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                \"name\": \"This field is required\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\"",
                      "                }",
                      "            },",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? state.validation.fields.Custom_SSN4 = \"This field is required\" : state.validation.fields.Custom_SIN3 = \"This field is required\"",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "cfab906e-323d-4552-84a7-a4ccbc468db3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" ",
                      "                            : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0b0c5025-5ff9-455e-b8af-8fbe0e605d31",
                    "exec": [
                      "if (pm.environment.get(\"country\") === 'US') {\r",
                      "    pm.environment.set(\"requestFields\", JSON.stringify({\r",
                      "        \"name\": \"Test\",\r",
                      "        \"phoneNumber\": \"1234567890\",\r",
                      "        \"website\": \"www.test.com\",\r",
                      "        \"mailingAddress\": {\r",
                      "            \"line1\": \"244 N 1st Ave\",\r",
                      "            \"line2\": null,\r",
                      "            \"line3\": null,\r",
                      "            \"city\": \"Minneapolis\",\r",
                      "            \"state\": \"{{state}}\",\r",
                      "            \"zip\": \"{{zip}}\"\r",
                      "        },\r",
                      "        \"category\": 1,\r",
                      "        \"Custom_SSN4\": \"1234\",\r",
                      "        \"Custom_Employee/ID\": \"1234\"\r",
                      "    }));    \r",
                      "} else {\r",
                      "    pm.environment.set(\"requestFields\", JSON.stringify({\r",
                      "        \"name\": \"Test\",\r",
                      "        \"phoneNumber\": \"1234567890\",\r",
                      "        \"website\": \"www.test.com\",\r",
                      "        \"mailingAddress\": {\r",
                      "            \"line1\": \"244 N 1st Ave\",\r",
                      "            \"line2\": null,\r",
                      "            \"line3\": null,\r",
                      "            \"city\": \"Minneapolis\",\r",
                      "            \"state\": \"{{state}}\",\r",
                      "            \"zip\": \"{{zip}}\"\r",
                      "        },\r",
                      "        \"category\": 1,\r",
                      "        \"Custom_SIN3\": \"123\",\r",
                      "        \"Custom_Employee/ID\": \"1234\"\r",
                      "    }));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fe59b31a-3992-419e-bc77-6acb7a12f556",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0,\r\n        \"fields\": {\r\n        \t\"splitAmount\": 100,\r\n        \t\"splitType\": \"currency\"\r\n        }\r\n      }\r\n    ], \r\n    \"fields\": {{requestFields}}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(\"Test\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" ",
                      "                            : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    valuesFieldKeys.sort();",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    uxFieldsKeys.sort();",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "cb6d052d-31e0-402f-af60-fe9aa43f33d8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (isUs) {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 100,",
                      "                    \"splitType\": \"Currency\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Employee/ID\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    isUs ? values.fields.Custom_SSN4 = \"1234\" : values.fields.Custom_SIN3 = \"123\";",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" ",
                      "                            : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"3\",",
                      "                    \"label\": \"Annuity\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"13\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"9\",",
                      "                    \"label\": \"Federal Benefit\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"6\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"4\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"11\",",
                      "                    \"label\": \"Military\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"8\",",
                      "                    \"label\": \"Mutual Fund\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"1\",",
                      "                    \"label\": \"Payroll\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"2\",",
                      "                    \"label\": \"Pension\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"14\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"7\",",
                      "                    \"label\": \"Retirement\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"5\",",
                      "                    \"label\": \"Social Security\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"12\",",
                      "                    \"label\": \"State/County Benefits\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"10\",",
                      "                    \"label\": \"VA\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        })",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"ID Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SIN3\",",
                      "            \"label\": \"SIN - Last 3\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        })",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4d9e0b02-352d-4e3c-85be-7e965a64ef42",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "397e5868-a980-4485-aec2-d4d303339a2d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "cbb8646c-70ae-422f-9f76-49b1ff5406ec",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "50e03e81-ffbb-43d0-906d-09bec7b063f8",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Split Deposits",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null,",
                      "                    \"Custom_Account:Add\": \"False\",",
                      "                    \"Custom_Account:Change\": \"False\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Employee/ID\": null,",
                      "            \"Custom_Company/Dept\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 5,",
                      "        \"maxChecking\": 5,",
                      "        \"maxSavings\": 5,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Add\",",
                      "                \"label\": \"Account Add\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Change\",",
                      "                \"label\": \"Account Change\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"Employee ID Number (EIN)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Company/Dept\",",
                      "            \"label\": \"Agency ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Employee/ID\": \"This field is required\",",
                      "                \"Custom_Company/Dept\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e9725127-819b-475d-9ce4-8f09e57b775a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositSplit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "74bea7ed-a5e4-4c48-be0e-e6433081cdf3",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null,",
                      "                    \"Custom_Account:Add\": \"False\",",
                      "                    \"Custom_Account:Change\": \"False\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Employee/ID\": null,",
                      "            \"Custom_Company/Dept\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 5,",
                      "        \"maxChecking\": 5,",
                      "        \"maxSavings\": 5,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Add\",",
                      "                \"label\": \"Account Add\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Change\",",
                      "                \"label\": \"Account Change\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"Employee ID Number (EIN)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Company/Dept\",",
                      "            \"label\": \"Agency ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Employee/ID\": \"This field is required\",",
                      "                \"Custom_Company/Dept\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d75bb2ab-84af-413c-b328-62759c1e00d4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "0daf473c-e74a-46e4-a682-2e822601aba3",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 50,",
                      "                    \"splitType\": \"Currency\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 0,",
                      "                    \"splitType\": \"Remainder\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Employee/ID\": \"1234\",",
                      "            \"Custom_Company/Dept\": \"Testing\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 5,",
                      "        \"maxChecking\": 5,",
                      "        \"maxSavings\": 5,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Add\",",
                      "                \"label\": \"Account Add\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Change\",",
                      "                \"label\": \"Account Change\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"Employee ID Number (EIN)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Company/Dept\",",
                      "            \"label\": \"Agency ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4c2e2531-ebc3-42c3-a1ea-546f1ae81a29",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"type\": \"deposit\",\n    \"targetId\": \"{{targetIdDepositSplit}}\",\n    \"accountholderIndex\": 0,\n    \"values\": {\n        \"accounts\": [\n            {\n                \"index\": 0,\n                \"fields\": {\n                    \"splitAmount\": 50,\n                    \"splitType\": \"Currency\",\n                    \"Custom_Account:Add\": \"True\",\n                    \"Custom_Account:Change\": \"True\"\n                }\n            },\n            {\n                \"index\": 1,\n                \"fields\": {\n                    \"splitAmount\": 0,\n                    \"splitType\": \"Remainder\",\n                    \"Custom_Account:Add\": \"True\",\n                    \"Custom_Account:Change\": \"True\"\n                }\n            }\n        ],\n        \"fields\": {\n            \"Custom_Employee/ID\": 1234,\n            \"Custom_Company/Dept\": \"Testing\"\n        }\n    }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "1ea5e9a0-819b-495c-b3b7-cfdf0bd9652c",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 50,",
                      "                    \"splitType\": \"Currency\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 0,",
                      "                    \"splitType\": \"Remainder\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Employee/ID\": \"1234\",",
                      "            \"Custom_Company/Dept\": \"Testing\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 5,",
                      "        \"maxChecking\": 5,",
                      "        \"maxSavings\": 5,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Add\",",
                      "                \"label\": \"Account Add\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Change\",",
                      "                \"label\": \"Account Change\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"Employee ID Number (EIN)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Company/Dept\",",
                      "            \"label\": \"Agency ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5139b692-1c0f-4045-8622-5c5a9bdadf73",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "54a99c48-f73b-47bf-866c-0b53e9aa00c3",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositSplit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 50,",
                      "                    \"splitType\": \"Currency\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": 0,",
                      "                    \"splitType\": \"Remainder\",",
                      "                    \"Custom_Account:Add\": \"True\",",
                      "                    \"Custom_Account:Change\": \"True\"",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Employee/ID\": \"1234\",",
                      "            \"Custom_Company/Dept\": \"Testing\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 5,",
                      "        \"maxChecking\": 5,",
                      "        \"maxSavings\": 5,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Add\",",
                      "                \"label\": \"Account Add\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Account:Change\",",
                      "                \"label\": \"Account Change\",",
                      "                \"type\": \"Checkbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Employee/ID\",",
                      "            \"label\": \"Employee ID Number (EIN)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Company/Dept\",",
                      "            \"label\": \"Agency ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2c08c1ea-64d4-4e6b-9c7e-8df8dc2342db",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "fb77cc81-9be8-4277-ab1f-f92575984167",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b0a46d2b-df1e-4201-a4b2-031aea0a3132",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "cc048d0c-f220-4653-82b2-4404906fa3d9",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "56fe07f1-2905-4f55-98cd-49c418b53f7b",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Using TargetId",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            }",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": \"This field is required\",",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1df1eede-387d-4078-89dc-a807b53306cb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPayment}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            }",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": \"This field is required\",",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "871834d8-8609-4f7e-8dcc-7f675c6cd95b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f2a4d608-6357-46bb-ad5a-d4a0d5c7b840",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f06fc6c4-b4d8-4216-b126-fbb03c471de8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPayment}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n      \"Switch_ContactServiceAddress\": {\r\n      \t\"line1\": \"244 N 1st Ave\",\r\n        \"city\": \"Minneapolis\",\r\n        \"state\": \"{{state}}\",\r\n        \"zip\": \"{{zip}}\"\r\n      },\r\n      \"Switch_BillingAccountNumber\": \"1234\",\r\n      \"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c60b524a-6549-46a7-8280-dcb97f21249c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3aaddbe5-2c3f-48f4-abee-0b269457fbe0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Uncancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9542de47-53c1-446b-a73d-76c3dafe9605",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Uncancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePayment\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3683f60c-df48-4a64-a6c9-0e45cc21475e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "84a4ef50-dcb8-4730-99f9-3375c94f5095",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9405e0ba-ce6a-47d2-8dee-fb6a434f1b3f",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "f188b18a-d005-4040-9115-5be1259bb23c",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Using LocationId",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if(isUs) {",
                      "        values.fields = {",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_Withdrawal Date\": null,",
                      "            \"Custom_Effective Date\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_SSN 4\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        } ",
                      "    } else {",
                      "        values.fields = {",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                \"category\": \"The field is required and must match one of the provided categories.\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields.Custom_Amount = \"This field is required\";",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7e2e0a4f-05ae-40a1-aa16-17b61fee7f05",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{locationId}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct locationId\", function () {",
                      "    pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get(\"locationId\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if(isUs) {",
                      "        values.fields = {",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_Withdrawal Date\": null,",
                      "            \"Custom_Effective Date\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_SSN 4\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        } ",
                      "    } else {",
                      "        values.fields = {",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                \"category\": \"The field is required and must match one of the provided categories.\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields.Custom_Amount = \"This field is required\";",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f09ff8c4-2fee-45a7-8ac3-d4d27e780315",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "53ecbf6f-4c44-4bc9-bcf9-737d5c86410a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{locationId}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n        \"category\": 1,\r\n        \"Custom_Amount\": \"100\",\r\n        \"Custom_Withdrawal Date\": \"12-12-18\",\r\n        \"Custom_Effective Date\": \"12-12-18\",\r\n        \"Custom_Frequency\": \"Test\",\r\n        \"Custom_SSN 4\": \"1234\",\r\n        \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "510dab95-ce15-44a4-abc7-98e958e78a63",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch In Submitted State",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal('Unable to HTTP-DELETE the switch currently with the status Submitted');",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal('Unable to HTTP-DELETE the switch currently with the status Submitted');",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "60c93739-65c0-4326-8546-f58c10b963f4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "b03fd410-8d96-4006-acc4-c5e2fec917ce",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"locationId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(10);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameLocation\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ad1612e9-6745-4a04-94e8-2fdc7c86d8c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "622e424d-b24d-4d9b-87ec-ab44bd28cf6e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "d126a4f6-35fc-4c03-8488-10e4d71541e0",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Deleted Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct code\", function () {",
                      "    pm.expect(jsonData.error.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "546eb295-e030-4511-9e47-dd132166087b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9800cbde-ed5a-4f8f-bb53-ab4e166bd704",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "c690a635-922e-425c-bb5e-3e1791243a22",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Using Neither",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(8);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.false;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": []",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_Withdrawal Date\": null,",
                      "            \"Custom_Effective Date\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_SSN 4\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
                      "        : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields = {",
                      "            \"Custom_Amount\": \"This field is required\",",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"category\": \"The field is required and must match one of the provided categories.\",",
                      "            \"name\": \"This field is required\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            }",
                      "        }",
                      "    } else {",
                      "        state.validation.fields = {",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"category\": \"The field is required and must match one of the provided categories.\",",
                      "            \"name\": \"This field is required\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            }",
                      "        }",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a43e4bf8-d10a-4bcd-a9a5-d850d7da01c5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(8);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.false;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": []",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_Withdrawal Date\": null,",
                      "            \"Custom_Effective Date\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_SSN 4\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"name\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"mailingAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"category\": 0,",
                      "            \"Custom_Amount\": null,",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
                      "        : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        state.validation.fields = {",
                      "            \"Custom_Amount\": \"This field is required\",",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"category\": \"The field is required and must match one of the provided categories.\",",
                      "            \"name\": \"This field is required\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            }",
                      "        }",
                      "    } else {",
                      "        state.validation.fields = {",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"category\": \"The field is required and must match one of the provided categories.\",",
                      "            \"name\": \"This field is required\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            }",
                      "        }",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7b537d58-d2c7-4c45-b9e1-138403a47ba0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0    ",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
                      "        : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d41321d1-6991-43d2-b957-531f0189e4fb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ], \r\n    \"fields\": {\r\n        \"name\": \"Test\",\r\n        \"phoneNumber\": \"1234567890\",\r\n        \"website\": \"www.test.com\",\r\n        \"mailingAddress\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"category\": 1,\r\n        \"Custom_Amount\": \"100\",\r\n        \"Custom_Withdrawal Date\": \"12-12-18\",\r\n        \"Custom_Effective Date\": \"12-12-18\",\r\n        \"Custom_Frequency\": \"Test\",\r\n        \"Custom_SSN 4\": 1234,\r\n        \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0    ",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
                      "        : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b9d1d035-c636-4c9c-afcd-1a631d0bef7f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isUs = pm.environment.get(\"country\") === \"US\";",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    if (pm.environment.get(\"country\") === \"US\") {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "    } else {",
                      "        pm.expect(jsonData.data.item.targetId).to.equal(1);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0    ",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    if (isUs) {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "            \"Custom_Effective Date\": \"12-12-18\",",
                      "            \"Custom_Frequency\": \"Test\",",
                      "            \"Custom_SSN 4\": \"1234\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    } else {",
                      "        values.fields = {",
                      "            \"name\": \"Test\",",
                      "            \"phoneNumber\": \"1234567890\",",
                      "            \"website\": \"www.test.com\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"category\": 1,",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\"",
                      "        : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"category\",",
                      "            \"label\": \"Type\",",
                      "            \"type\": \"select\",",
                      "            \"required\": true,",
                      "            \"selections\": [",
                      "                {",
                      "                    \"key\": \"25\",",
                      "                    \"label\": \"Child Support\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"16\",",
                      "                    \"label\": \"Donation\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"18\",",
                      "                    \"label\": \"Insurance\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"17\",",
                      "                    \"label\": \"Investment\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"20\",",
                      "                    \"label\": \"Loan/Mortgage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"19\",",
                      "                    \"label\": \"Medical/Dental\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"22\",",
                      "                    \"label\": \"Membership\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"26\",",
                      "                    \"label\": \"Monthly Bill\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"24\",",
                      "                    \"label\": \"Rent\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"27\",",
                      "                    \"label\": \"Restitution\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"23\",",
                      "                    \"label\": \"Subscription\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"21\",",
                      "                    \"label\": \"Tax\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"15\",",
                      "                    \"label\": \"Utility\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"name\",",
                      "            \"label\": \"Name\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"mailingAddress\",",
                      "            \"label\": \"Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"website\",",
                      "            \"label\": \"Website\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"phoneNumber\",",
                      "            \"label\": \"Phone Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        }",
                      "    ]",
                      "    ",
                      "    if (isUs) {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Withdrawal Date\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Effective Date\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN 4\",",
                      "            \"label\": \"SSN 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    } else {",
                      "        fields.push({",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Company Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        });",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "    ",
                      "    valuesFieldKeys.sort();",
                      "    uxFieldsKeys.sort();",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ada26e3f-2187-46d3-ba74-032078aed160",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "185bad80-4509-4e55-a4b1-15156ecab911",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "46866114-db52-4440-bb53-a0fb8b93fc4b",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "7b5adf1b-5b8e-49b6-9380-dd4b73293bc9",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment Print Only",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7680edc-9cb2-4f90-b750-f1ea16e024c1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "            \"Custom_Amount\": \"This field is required\",",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"line1\": \"This field is required\",",
                      "            \"city\": \"This field is required\",",
                      "            \"state\": \"This field is required\",",
                      "            \"zip\": \"This field is required\"",
                      "        },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d1b917ee-8915-4923-a67c-d5e83d495285",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPaymentPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "            \"Custom_Amount\": \"This field is required\",",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"line1\": \"This field is required\",",
                      "            \"city\": \"This field is required\",",
                      "            \"state\": \"This field is required\",",
                      "            \"zip\": \"This field is required\"",
                      "        },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "834ffb25-f3d9-49c7-b467-627aa696d826",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c35447e7-77e5-4f5c-a4c8-e1f4a83d2487",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Print\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "20e442d0-0749-4ccf-9128-11d49b661101",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPaymentPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n\t\t\"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n\t\t\"Switch_ContactServiceAddress\": {\r\n\t\t\t\"line1\": \"244 N 1st Ave\",\r\n\t\t\t\"city\": \"Minneapolis\",\r\n\t\t\t\"state\": \"{{state}}\",\r\n\t\t\t\"zip\": \"{{zip}}\"\r\n\t\t},\r\n\t\t\"Switch_BillingAccountNumber\": \"1234\",\r\n\t\t\"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Print Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Printed\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1e411655-f3e6-4bf6-b2dd-a18fd3fdfbf4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Print\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch PDF",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the correct headers\", function () {",
                      "    pm.response.to.have.header(\"Content-Length\");",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "    pm.response.to.have.header(\"Server\");",
                      "    pm.response.to.have.header(\"Request-Context\");",
                      "    pm.response.to.have.header(\"Content-Disposition\");",
                      "    pm.response.to.have.header(\"X-Powered-By\");",
                      "    pm.response.to.have.header(\"Date\");",
                      "});",
                      "",
                      "pm.test(\"Response is a PDF\", function () {",
                      "    pm.response.to.be.header(\"Content-Type\", \"application/pdf\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"attachment\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"filename\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\".pdf\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "56811221-2150-4bd0-894e-15c62996d978",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/pdf"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7680edc-9cb2-4f90-b750-f1ea16e024c1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": null,",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "            \"Custom_Amount\": \"This field is required\",",
                      "            \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "            \"line1\": \"This field is required\",",
                      "            \"city\": \"This field is required\",",
                      "            \"state\": \"This field is required\",",
                      "            \"zip\": \"This field is required\"",
                      "        },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "07eb4953-4c5f-4ab2-b48d-cc34fa4f7550",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPaymentPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c35447e7-77e5-4f5c-a4c8-e1f4a83d2487",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Print\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "22a38ccd-1dd7-4b97-8ab2-eaa720641e60",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "type": "text",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 2,\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{targetIdPaymentPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n\t\t\"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n\t\t\"Switch_ContactServiceAddress\": {\r\n\t\t\t\"line1\": \"244 N 1st Ave\",\r\n\t\t\t\"city\": \"Minneapolis\",\r\n\t\t\t\"state\": \"{{state}}\",\r\n\t\t\t\"zip\": \"{{zip}}\"\r\n\t\t},\r\n\t\t\"Switch_BillingAccountNumber\": \"1234\",\r\n\t\t\"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(Object.keys(account).length).to.equal(1);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdPaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNamePaymentPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Amount\": \"100\",",
                      "            \"Custom_SSN4\": null,",
                      "            \"Custom_Frequency\": null,",
                      "            \"Custom_WithdrawalDate\": null,",
                      "            \"Custom_EffectiveDate\": null,",
                      "            \"Switch_BillingAccountNumber\": \"1234\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            }",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Amount\",",
                      "            \"label\": \"Amount\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_SSN4\",",
                      "            \"label\": \"SSN - Last 4\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Frequency\",",
                      "            \"label\": \"Frequency\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_WithdrawalDate\",",
                      "            \"label\": \"Withdrawal Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_EffectiveDate\",",
                      "            \"label\": \"Effective Date\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_BillingAccountNumber\",",
                      "            \"label\": \"Policy/Account Number\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        },",
                      "        {",
                      "            \"key\": \"Switch_ContactServiceAddress\",",
                      "            \"label\": \"Service Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4ce3bfda-9270-4ab3-ae46-8a92bbafd715",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 2,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "26e67bab-101d-4dea-9adb-1c82cc0bbdc6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "342a9fe9-c77b-44f9-8192-aa40ee656afe",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "bbf94e4d-aa68-4366-8f36-2ce3aaf2ade4",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e2c9fcb5-b2df-4a8d-9af2-8fa54176da7d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcd57b52-e02c-4a4b-abd8-fe74de1fd3e7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Online Only",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb8ba0c7-407e-4e27-9284-b95f35204fc3",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c05c7c4b-cf44-4775-a961-1a34156777c3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositOnline}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "ea667dc9-ab26-421c-bbfa-72a8a2ace219",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0e4aab2a-8c29-40cc-ae96-07aa7c8ec5c5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "1aee5fbd-b70f-4618-a96e-00ddfd51976b",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ceab39f-fc6f-4168-8f08-1f7704e91c6c",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4e71a5ad-cf45-48b6-b859-46b87978b6a2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositOnline}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "39a55468-f200-4d61-884f-7f0c67321355",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Complete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Complete\",",
                      "        \"actions\": [],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3e801e0c-dad1-4d3a-9c08-652ee2bf52c1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 2,\r\n  \"action\": \"Complete\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/2/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "2",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb8ba0c7-407e-4e27-9284-b95f35204fc3",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6e7e9986-8ec8-4d0c-b291-9b7f365dac76",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositOnline}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9592134e-d6e3-4d3c-bff7-3af3e769b08a",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ceab39f-fc6f-4168-8f08-1f7704e91c6c",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7d1d6e70-4420-44f4-8b69-10b962c30fe8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositOnline}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "576c1e17-d6b8-4989-b68a-520fa6a6c4c0",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var ux = jsonData.data.item.ux;",
                      "    pm.expect(ux).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(ux).length).to.equal(1);",
                      "    ",
                      "    var fields = ux.fields;",
                      "    var looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"body\");",
                      "        pm.expect(Object.keys(field).length).to.equal(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositOnline\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {};",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"instructions\",",
                      "            \"label\": \"Instructions\",",
                      "            \"type\": \"html\",",
                      "            \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "12c5354c-d013-4f39-9934-d8c580122ca7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 3,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "50949394-6aba-41b6-81c5-1b208dae42f2",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ee5ad11e-49bc-463c-a761-fdf3d44200b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "6cf328af-6b3f-491a-b56d-f4164b19a0bf",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "e7f57b54-4455-4094-9586-af9605b34657",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b652b3c1-9694-486a-9762-389c6a4b147d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "049ad08e-2ce2-4f5f-acdd-27ea10487ba9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit Print Only",
          "item": [
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd144dbd-9698-49f4-9216-b876b393e95e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ca85f1b5-78ad-449c-b27e-6bd04e6d5ce1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4c00cb58-0836-41d0-9080-0a70d6c1ad52",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fe6e487-c16d-4bfe-833a-db4effd09deb",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"1234\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Print\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "90b7cb8e-244b-44c2-842f-7eb6a83c4c0a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 3,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": 1234,\r\n        \"Custom_or Percentage of Pay (1 - 100)\": 100,\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": 1234,\r\n        \"Custom_Last 4 of SSN\": 1234\r\n    }\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Print Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"1234\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Printed\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "618414a0-e848-498c-9375-10270b90f769",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"action\": \"Print\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch PDF",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the correct headers\", function () {",
                      "    pm.response.to.have.header(\"Content-Length\");",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "    pm.response.to.have.header(\"Server\");",
                      "    pm.response.to.have.header(\"Request-Context\");",
                      "    pm.response.to.have.header(\"Content-Disposition\");",
                      "    pm.response.to.have.header(\"X-Powered-By\");",
                      "    pm.response.to.have.header(\"Date\");",
                      "});",
                      "",
                      "pm.test(\"Response is a PDF\", function () {",
                      "    pm.response.to.be.header(\"Content-Type\", \"application/pdf\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"attachment\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\"filename\");",
                      "    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.include(\".pdf\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "bcaee828-aa0f-43b5-9811-7e34e72d2418",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/pdf"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/3?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "3"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd144dbd-9698-49f4-9216-b876b393e95e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "da408306-df8b-46a8-b207-6eb2825ec716",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDepositPrint}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fe6e487-c16d-4bfe-833a-db4effd09deb",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"1234\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Print\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "06591d85-5631-4d96-a8a4-4e3f4cd2c07e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"index\": 4,\n  \"type\": \"deposit\",\n  \"targetId\": \"{{targetIdDepositPrint}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"index\": 0\n      }\n    ],\n    \"fields\": {\n        \"Custom_Net or Amount (in dollars)\": 1234,\n        \"Custom_or Percentage of Pay (1 - 100)\": 100,\n        \"Custom_Depositor's Full Mailing Address\": {\n            \"line1\": \"244 N 1st Ave\",\n            \"line2\": null,\n            \"line3\": null,\n            \"city\": \"Minneapolis\",\n            \"state\": \"{{state}}\",\n            \"zip\": \"{{zip}}\"\n        },\n        \"Custom_Employee ID\": 1234,\n        \"Custom_Last 4 of SSN\": 1234\n    }\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/4?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "4"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2);",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDepositPrint\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"1234\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accountLabel2 = '*' + customerKey.substring(customerKey.length-3,customerKey.length) + '0';",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": accountLabel2",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isUs = pm.environment.get(\"country\") === \"US\";",
                      "    var stateFieldLabel = isUs ? \"State\" : \"Province\";",
                      "    var stateFieldRegex = isUs ? \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\" : \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\";",
                      "    var stateFieldValidation = isUs ? \"Must be a valid 2 character state code\" : \"Must be a valid 2 character Province or Territory code\";",
                      "    var zipFieldLabel = isUs ? \"Zip Code\" : \"Postal Code\";",
                      "    var zipFieldRegex = isUs ? \"^\\\\d{5}(-\\\\d{4})?$\" : \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\";",
                      "    var zipFieldValidation = isUs ? \"Must be in the format 00000 or 00000-0000\" : \"Must be a valid postal code\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "cdb8ab74-444c-4abe-84fa-c4fa2ed6e6ca",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 3,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/4/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "4",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7c63c4a0-2c65-4878-a588-2786e236c4a7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/4?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "4"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "fcf8fbaa-4945-43d5-9e88-75d1fe9f3169",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "5fc11046-7838-4daa-9cfe-cf6d6f32ee71",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9c8697f0-40b9-459c-a357-fc8a4acb8d80",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3df654aa-c6e6-43ef-b7b6-6e545557f17d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Get Switches",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                  "    pm.expect(jsonData.data).to.have.property(\"items\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the correct currentItemCount\", function () {",
                  "    pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                  "});",
                  "",
                  "pm.test(\"Has empty array of switches\", function() {",
                  "   pm.expect(jsonData.data.items).to.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  "",
                  "pm.test(\"Has a matching id\", function() {",
                  "    pm.expect(jsonData.id).to.have.length(32);",
                  "    pm.expect(jsonData.id).to.match(/(.*)/);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "15e84896-53ed-4cb1-8a4b-996b63ff3b29",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "customers",
                ":customerKey",
                "switches"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ],
              "variable": [
                {
                  "id": "2df237d6-bd02-4447-9c5f-9014e6206052",
                  "key": "customerKey",
                  "value": "{{customerKey}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "7824d589-2f12-4d98-b1c4-c42319f2252e",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Webhooks",
      "item": [
        {
          "name": "Register Minimum Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2db08541-5600-4a67-b202-98e516f8b548",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"id\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"webhookUrl\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"eventTypes\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"sources\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the correct webhookUrl\", function () {",
                  "    pm.expect(jsonData.data.item.webhookUrl).to.match(/https:\\/\\/clickswitchwebhooks\\.clickswitchqa\\.com\\/(.*)/);",
                  "});",
                  "",
                  "pm.test(\"Has the correct eventTypes\", function () {",
                  "    pm.expect(jsonData.data.item.eventTypes).to.deep.equal([\"switch.state\"]);",
                  "});",
                  "",
                  "pm.test(\"Has the correct sources\", function () {",
                  "    pm.expect(jsonData.data.item.sources).to.deep.equal([\"internal\"]);    ",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"webhook\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "61e1a9b7-af0c-4fbc-9975-5eaa4175c700",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api-key",
                "type": "text",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks.clickswitchqa.com/{{$guid}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"internal\"]\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webhooks"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2dec883-6805-49cd-9936-79f23666ca21",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Has the required properties\", function () {",
                  "    pm.expect(jsonData).to.have.property(\"data\");",
                  "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                  "    pm.expect(jsonData).to.have.property(\"context\");",
                  "    pm.expect(jsonData).to.have.property(\"id\");",
                  "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                  "});",
                  "",
                  "pm.test(\"Has the required data properties\", function () {",
                  "    pm.expect(jsonData.data).to.have.property(\"item\");",
                  "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                  "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                  "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                  "});",
                  "",
                  "pm.test(\"Has the required item properties\", function () {",
                  "    pm.expect(jsonData.data.item).to.have.property(\"id\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"webhookUrl\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"eventTypes\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"sources\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"context\");",
                  "    pm.expect(jsonData.data.item).to.have.property(\"secret\");",
                  "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                  "});",
                  "",
                  "pm.test(\"Has the correct webhookUrl\", function () {",
                  "    pm.expect(jsonData.data.item.webhookUrl).to.match(/https:\\/\\/clickswitchwebhooks\\.clickswitchqa\\.com\\/(.*)/);",
                  "});",
                  "",
                  "pm.test(\"Has the correct eventTypes\", function () {",
                  "    pm.expect(jsonData.data.item.eventTypes).to.deep.equal([\"switch.state\"]);",
                  "});",
                  "",
                  "pm.test(\"Has the correct sources\", function () {",
                  "    pm.expect(jsonData.data.item.sources).to.deep.equal([\"user\", \"internal\"]);    ",
                  "});",
                  "",
                  "pm.test(\"Has the correct kind\", function () {",
                  "   pm.expect(jsonData.data.kind).to.equal(\"webhook\"); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct lang\", function () {",
                  "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                  "});",
                  "",
                  "pm.test(\"Has the correct context\", function () {",
                  "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "feb2235f-e5ec-40ef-8056-7f282e18aa9e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "api-key",
                "type": "text",
                "value": "{{apiKey}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks.clickswitchqa.com/{{$guid}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhooks?context={{context}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webhooks"
              ],
              "query": [
                {
                  "key": "context",
                  "value": "{{context}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "12741688-1bbf-4c70-86a8-e5d0dbcd0f39"
    },
    {
      "name": "Validation",
      "item": [
        {
          "name": "Invalid API Key",
          "item": [
            {
              "name": "Types",
              "item": [
                {
                  "name": "Targets",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f71110c2-0944-4844-acc2-4903108de243",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/types/targets?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Statuses",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2dec07c8-70f5-488a-b390-544a2256bb5e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/types/switch/statuses?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "switch",
                        "statuses"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Actions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "74d90fde-2509-4451-a886-18647421cd78",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8b572c38-69a0-4a0e-9732-d91cc62e996a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/types/switch/actions?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "switch",
                        "actions"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "9e641c05-ab16-4cb4-8a16-135a10e71577",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Customers",
              "item": [
                {
                  "name": "Create",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "49c0ca34-39d7-437f-acd2-b2838ad36dcd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"testUnusedCustomerKey\",\n    \"email\": \"testUnusedCustomerKey@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"testUnusedCustomerKey\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"01234567\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "a032832a-c7a1-4914-85c2-1b66e3948405",
                          "key": "customerKey",
                          "value": "testUnusedCustomerKey",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By customerKey",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4d4c9079-b17d-494a-9b8f-147736ffe6fc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "2bf217f0-2c89-4a90-9cca-9925b79e69f1",
                          "key": "customerKey",
                          "value": "testUnusedCustomerKey",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "6e5ab411-14a5-4622-b46b-a413e1a0b173",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Targets",
              "item": [
                {
                  "name": "By Name",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a5932e53-5190-4168-bb01-bb106e150e30",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDeposit}}&customer={{customerKey}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "deposit"
                        },
                        {
                          "key": "name",
                          "value": "{{targetNameDeposit}}"
                        },
                        {
                          "key": "customer",
                          "value": "{{customerKey}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1a8cda6a-b8d8-469c-89e4-e290e20d152c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets",
                        ":targetId"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "68f6dba5-40b3-47a2-b07c-36adffb1d3ec",
                          "key": "targetId",
                          "value": "{{targetIdDeposit}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By Location",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "45afda9d-9ad7-46ec-959f-292d8a9c3304",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/locations?customer={{customerKey}}&name={{targetNameLocationSearch}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "locations"
                      ],
                      "query": [
                        {
                          "key": "customer",
                          "value": "{{customerKey}}"
                        },
                        {
                          "key": "name",
                          "value": "{{targetNameLocationSearch}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "e1ae8abc-4a8d-4302-8000-4de0ee1d5cb1",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Switches",
              "item": [
                {
                  "name": "Get Switches",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3d5b8205-09be-491c-9971-8705a883a2cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "77619279-d80e-48b2-8ad2-8dbec6d05045",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "476f6f81-fa41-4314-908f-9d03fbb56fb4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "3e2ed500-ec3d-4824-804a-a10e51bc5ae2",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Switch By Index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a4b7e8fa-2f47-40b6-bcae-f5dcbc848270",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "1d6c92b8-9cad-4666-b204-117ca0a3bf15",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d437ca58-8055-4de5-8cb4-98e3ec63a520",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "d2a148f9-712b-425e-a5d3-039faaa13aaa",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Submit Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "04756154-c7d3-4729-98a5-e1045cfe16a9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "871d3d8a-ac0f-4f5e-937c-2bd8e81be8ae",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Cancel Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "33cefd8d-fefb-4dba-9ebf-aa2656b8320b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "36a7d837-246b-4a52-95fc-0e0bdf7cc3ed",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function () {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d584a781-cf21-43ff-92ad-e0147040bdb3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "test"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "89be2075-3a93-422d-aa90-5aefca8079b0",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "a2494257-40c3-4309-af24-7b3ea945e146",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "17dd1493-d08f-4e8f-a988-5d9606426f56",
          "_postman_isSubFolder": true
        },
        {
          "name": "No API Key",
          "item": [
            {
              "name": "Types",
              "item": [
                {
                  "name": "Targets",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ffd96fec-771b-4943-9231-98c0e0b5647c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/types/targets?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Statuses",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b309ac87-5965-4e31-8785-6d3b37333072",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/types/switch/statuses?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "switch",
                        "statuses"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Actions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "74d90fde-2509-4451-a886-18647421cd78",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "41eb8dc5-3a38-4bb0-b179-60239a1fee2f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/types/switch/actions?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "types",
                        "switch",
                        "actions"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "572802c6-6aee-4b3d-ba69-54073809f9ec",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Customers",
              "item": [
                {
                  "name": "Create",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "17ad2b38-823b-45fc-99d9-21d3102ab7eb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"testUnusedCustomerKey\",\n    \"email\": \"testUnusedCustomerKey@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"testUnusedCustomerKey\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"01234567\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "5c512f39-91d6-47d0-9ab2-e84216dc04e2",
                          "key": "customerKey",
                          "value": "testUnusedCustomerKey",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By customerKey",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a07dfcfa-0979-46dc-9ec1-f347adf753de",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "94b9bae1-baae-4eda-90e2-ad0c796b1116",
                          "key": "customerKey",
                          "value": "testUnusedCustomerKey",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "04718c47-8462-4cf4-a506-66377c600c5c",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Targets",
              "item": [
                {
                  "name": "By Name",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "54b9339f-1af4-4a18-8186-fe3740a2bb70",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDeposit}}&customer={{customerKey}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "deposit"
                        },
                        {
                          "key": "name",
                          "value": "{{targetNameDeposit}}"
                        },
                        {
                          "key": "customer",
                          "value": "{{customerKey}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3577dcf3-43c2-480e-bc46-76ee167288a2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets",
                        ":targetId"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "2672e997-aae3-4814-9c08-7a0ed6bca3da",
                          "key": "targetId",
                          "value": "{{targetIdDeposit}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "By Location",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8e9ab815-df1c-4e6a-b073-5423c1c60943",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/locations?customer={{customerKey}}&name={{targetNameLocationSearch}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "locations"
                      ],
                      "query": [
                        {
                          "key": "customer",
                          "value": "{{customerKey}}"
                        },
                        {
                          "key": "name",
                          "value": "{{targetNameLocationSearch}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "e979f6d2-f8f8-4fae-b43f-ae3830415f46",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Switches",
              "item": [
                {
                  "name": "Get Switches",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5b08d935-991c-4420-a421-e502292a5bba",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "484a3f6f-b421-48fa-9150-230844d9e23f",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "63a5149a-646d-491f-a1a6-ecaadcd99c9d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "50f1fafb-1e4d-4592-a4e1-0062fb334aec",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Switch By Index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6fc868fc-ac3c-46d9-9922-b4fcd092b556",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "806c3e17-a03f-4fec-9847-9a028db42b41",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3999ecbb-5a74-423d-b369-caca22ba71fa",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "b10f038a-3842-4c7a-a6b0-4e8cd92140c3",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Submit Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "aa6bc473-7d5f-4f9a-9df4-bc4a3483e12a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "cac46bf5-423d-47ee-b521-5dd65489df25",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Cancel Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "944ca477-4947-4bf6-bf0b-9165973c503a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "503b19f3-ac64-44a3-a9c2-566bdbcc1686",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete Switch",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ];",
                          "    ",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b31e3cf5-45ae-4262-8290-9330c1c212cf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "7b4b4c5f-ed91-4a6e-9769-d50854983858",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "cfaa20bd-14b1-48d6-8863-cdc898873720",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "9240cabc-f23a-4dd1-bb95-41083be83d1a",
          "_postman_isSubFolder": true
        },
        {
          "name": "Missing Or Empty Fields",
          "item": [
            {
              "name": "Customers",
              "item": [
                {
                  "name": "Invalid accountHolder[0]",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].LastName\",",
                          "            \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].FirstName\",",
                          "            \"message\": \"The first name is required and must not exceed 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].MiddleInitial\",",
                          "            \"message\": \"The middle initial must not exceed one character.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "18fe4477-bfb9-4ff1-a22e-250b0b143fba",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n        \"middleInitial\": \"Jay\",\r\n        \"lastName\": \"Testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "002649b7-e102-4029-a30d-2e590930cf7b",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid accountHolder[1]",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].LastName\",",
                          "            \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].FirstName\",",
                          "            \"message\": \"The first name is required and must not exceed 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].MiddleInitial\",",
                          "            \"message\": \"The middle initial must not exceed one character.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dc0cad60-092a-4705-ac96-e0377c5ccb4a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n        \"middleInitial\": \"Es\",\r\n        \"lastName\": \"Testeraaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "2b181b7a-f2a0-49a7-a70f-cf0d221420d8",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid accountHolders",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].LastName\",",
                          "            \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].FirstName\",",
                          "            \"message\": \"The first name is required and must not exceed 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[0].MiddleInitial\",",
                          "            \"message\": \"The middle initial must not exceed one character.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].LastName\",",
                          "            \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].FirstName\",",
                          "            \"message\": \"The first name is required and must not exceed 50 characters.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"AccountHolders[1].MiddleInitial\",",
                          "            \"message\": \"The middle initial must not exceed one character.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2796d2e2-5c95-425e-aa7c-62a9462694e6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n        \"middleInitial\": \"Jay\",\r\n        \"lastName\": \"Testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n        \"middleInitial\": \"Es\",\r\n        \"lastName\": \"Testeraaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "e10e6d11-ce4b-4f64-8a51-4ca3fed74586",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid accounts[0] number",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Accounts[0].Number\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"The account must provide a valid account number.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4e2a00f3-374b-4b6c-82f5-c4738ca12fc1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "e1cb5f83-b7ff-4e5a-a725-1c91ad89166a",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid accounts[1] number",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Accounts[1].Number\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"The account must provide a valid account number.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c2cc95d1-f461-46f7-85a9-d294299d1824",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}022222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "1fe8dcf0-1515-45ef-958b-e16cdc6bca47",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid type",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Accounts\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"There is an account type which is not an account type for this institution.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7517b008-7243-431b-b35e-006f903691d4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}s\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "a8da6aa1-0c9a-493d-b8fe-f1146db26bcc",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid routingNumber",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Accounts\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"There is a routing number which is not a routing number of this institution.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "dac26882-6756-4490-85cc-54f081f62485",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}0\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "ed608fa6-1514-4ab6-8de5-9d025beb333d",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid name",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Accounts\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"There is an account name which is not an account name for this institution.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6d1550c7-855c-4a1a-ac26-cb4e05fcbc0f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}s\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"US\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "38cf39e6-12ea-43da-98c7-e9aa6a22b4fa",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing line1",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Line1\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"'Line1' must not be empty.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "11f8f4f8-70dd-43fc-8e47-438a619ee9f5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"zip\": \"55401\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "b66f8a84-8e74-460e-9a7a-00b8fb9204b0",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty line 1",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Line1\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"'Line1' must not be empty.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3aa57e0d-ea05-4a0d-a0fb-4df6f3256de5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"zip\": \"55401\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "86aea475-2d64-4e8b-ab9a-d76153d4c461",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing city",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].City\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"'City' must not be empty.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b8d3d1cb-1b0c-4065-aa8b-16eea17a6d68",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"zip\": \"55401\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "bd535d6f-f713-4c87-b53f-a5d7bb114fbc",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty zip",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Zip\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Must be in the format 00000 or 00000-0000\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3900d35e-6587-40ab-800b-55bae1672712",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"zip\": \"\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "1e81b17e-a9cd-4294-9881-c41f1823513e",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing state",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].State\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Must be a valid 2 character state code\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0bdda7f7-6a14-43c0-bd0d-1344a955a4cb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"zip\": \"55401\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "0a66b20c-f242-4c4f-babd-9723e4e5f7fe",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty state",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].State\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Must be a valid 2 character state code\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5309c2f2-ef45-46c3-80dd-102b5be91c7d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"zip\": \"55401\",\n          \"state\": \"\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "534fdf4e-fc1f-4791-a29b-e8d8f458806d",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing zip",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Zip\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Must be in the format 00000 or 00000-0000\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b8de02ec-0f36-4ba1-91e8-d030eb5ae24a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"Minneapolis\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "dca3b34d-2c0e-441e-bc3f-d55544092027",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty city",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].City\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"'City' must not be empty.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "32ae8000-aa3d-49b4-86b0-6e20af8b4c71",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n      {\n        \"number\": \"{{customerKey}}\",\n        \"type\": \"{{accountTypeChecking}}\",\n        \"name\": \"{{accountName}}\",\n        \"routingNumber\": \"{{routingNumber}}\",\n        \"metadata\": {{accountsMetadata}}\n      },\n      {\n        \"number\": \"{{customerKey}}0\",\n        \"type\": \"{{accountTypeSavings}}\",\n        \"name\": \"{{accountName2}}\",\n        \"routingNumber\": \"{{routingNumber2}}\",\n        \"metadata\": {{accountsMetadata}}\n      }\n    ],\n    \"addresses\": [\n        {\n          \"line1\": \"244 1st Ave. N\",\n          \"line2\": \"#100\",\n          \"line3\": \"ATTN Test\",\n          \"city\": \"\",\n          \"zip\": \"55401\",\n          \"state\": \"MN\",\n          \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "0ece34fe-00b6-4552-87ae-fbc5a504f472",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing country",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Country\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"The country provided must be a valid country code between 2 and 3 characters.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "7ed0e8e4-c7e4-419a-a1bf-833a80a4585a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "c98fd67a-0f1d-4e80-8612-4eb9673cd70b",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty country",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct reason\", function () {",
                          "    pm.expect(jsonData.error.errors[0].reason).to.equal(\"Addresses[0].Country\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"The country provided must be a valid country code between 2 and 3 characters.\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b8886534-81bd-4a0f-a71c-168dc5817f0d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"customerKey\": \"{{customerKey}}\",\r\n    \"email\": \"{{customerKey}}@clickswitch.com\",\r\n    \"phoneNumber\": \"6125555555\",\r\n    \"accountHolders\" : [\r\n      {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleInitial\": \"J\",\r\n        \"lastName\": \"Test\"\r\n        },\r\n        {\r\n        \"firstName\": \"A{{firstName}}\",\r\n        \"middleInitial\": \"S\",\r\n        \"lastName\": \"Tester\"\r\n        }\r\n    ],\r\n    \"accounts\": [\r\n      {\r\n        \"number\": \"{{customerKey}}\",\r\n        \"type\": \"{{accountTypeChecking}}\",\r\n        \"name\": \"{{accountName}}\",\r\n        \"routingNumber\": \"{{routingNumber}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      },\r\n      {\r\n        \"number\": \"{{customerKey}}0\",\r\n        \"type\": \"{{accountTypeSavings}}\",\r\n        \"name\": \"{{accountName2}}\",\r\n        \"routingNumber\": \"{{routingNumber2}}\",\r\n        \"metadata\": {{accountsMetadata}}\r\n      }\r\n    ],\r\n    \"addresses\": [\r\n        {\r\n          \"line1\": \"244 1st Ave. N\",\r\n          \"line2\": \"#100\",\r\n          \"line3\": \"ATTN Test\",\r\n          \"city\": \"Minneapolis\",\r\n          \"zip\": \"55401\",\r\n          \"state\": \"MN\",\r\n          \"country\": \"\"\r\n        }\r\n    ],\r\n    \"metadata\": {{metadata}}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "1c0a1c44-dc4a-4d29-99f5-406803503d43",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "e5dd84cc-cc2c-4ac9-963b-99261499b092",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Targets",
              "item": [
                {
                  "name": "Missing name",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Name\",",
                          "            \"message\": \"'Name' must not be empty.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bd709d3f-063a-451e-9755-47a55e1e2358",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets?type=deposit&customer={{customerKey}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "deposit"
                        },
                        {
                          "key": "customer",
                          "value": "{{customerKey}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Customer\",",
                          "            \"message\": \"'Customer' must not be empty.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2e5fe4e0-4f22-419e-bbcb-7524dd0339d3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets?type=deposit&name={{targetNameDeposit}}&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "deposit"
                        },
                        {
                          "key": "name",
                          "value": "{{targetNameDeposit}}"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing name and customer",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Name\",",
                          "            \"message\": \"'Name' must not be empty.\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"Customer\",",
                          "            \"message\": \"'Customer' must not be empty.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d11238e3-4e0e-4b06-bb71-382b035f46b5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets?type=deposit&context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "deposit"
                        },
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid target id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"targetId\",",
                          "            \"message\": \"The value 'test' is not valid.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cb9e00ec-6606-4256-aedb-c7129447fb25",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/targets/:targetId?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "targets",
                        ":targetId"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "9ed1fab1-08a2-48ea-8f64-ce8ec1dc0374",
                          "key": "targetId",
                          "value": "test",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "c7070fa4-0ece-4a1f-a8b8-bcccd8217334",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Switches",
              "item": [
                {
                  "name": "Invalid targetId",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"TargetId\",",
                          "            \"message\": \"Invalid target id\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ff2b69aa-49a0-4575-8478-f4cdceb66a4e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "04545f7e-e0b3-4687-9764-ec01f49b50bc",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing type",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Type\",",
                          "            \"message\": \"Invalid type provided.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a390affc-8c38-420f-b4de-b73e6a4581f9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "897abfed-a47a-449f-a8c5-1e5c15743a61",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty type",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Type\",",
                          "            \"message\": \"Invalid type provided.\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "29ec93a2-d8c0-4cb6-a0bf-9f4516ee68ce",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "016a04ae-9774-4a6c-82b4-2bbff629c59a",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid accountholderIndex",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"AccountHolderIndex\",",
                          "            \"message\": \"Invalid account holder index\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a4f2fd9a-5f15-4fcd-95a2-ea54103f5d93",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 15\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "33e38c3a-ebdd-4990-8dc0-0029dd928377",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Has the correct message\", function () {",
                          "   pm.expect(jsonData.error.message).to.equal(`Switch with index 50 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 50 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "20c297f9-42b9-45db-9a89-8cda3563a0a8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/50?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "50"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "a6bf8f8c-53b1-42cc-95ec-634e8f4d460c",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Has the correct message\", function () {",
                          "   pm.expect(jsonData.error.message).to.equal(\"Not Found\");",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Not Found\");",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3b19ea3c-608e-4337-b0ba-6e93a4bb4ba7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": \"500\",\r\n      \"Custom_or Percentage of Pay (1 - 100)\": \"50\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Depositor's Full Mailing Address\": \"244 N 1st Ave\"\r\n    }\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/100?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "100"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "5006b6ef-84a7-4d61-b5d8-08b301a32142",
                          "key": "customerKey",
                          "value": "",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Submit Switch With Invalid index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Has the correct message\", function () {",
                          "   pm.expect(jsonData.error.message).to.equal(`Switch with index 9 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 9 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "77571098-a351-4d0f-8b80-d93eaa8d63f0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/9/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "9",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "2923b501-0770-4c60-816d-80f9f74157ad",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Cancel Switch With Invalid index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Has the correct message\", function () {",
                          "   pm.expect(jsonData.error.message).to.equal(`Switch with index 1000 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 1000 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cc5f3053-473b-4f7a-8a36-820e549f37d3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/1000/action?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "1000",
                        "action"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "065cf824-6ed0-46b3-8897-45d8fe461b6b",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete Switch With Invalid index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"message\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(3);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(1);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Has the correct message\", function () {",
                          "   pm.expect(jsonData.error.message).to.equal(`Switch with index 30 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Errors has the correct message\", function () {",
                          "    pm.expect(jsonData.error.errors[0].message).to.equal(`Switch with index 30 for customer ${pm.environment.get(\"customerKey\")} does not exist.`);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e487744f-3379-4937-a93b-3996a1a16ca6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{apiKey}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/customers/:customerKey/switches/30?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "customers",
                        ":customerKey",
                        "switches",
                        "30"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ],
                      "variable": [
                        {
                          "id": "d04468f3-6590-4ee2-bb82-853c3172ec57",
                          "key": "customerKey",
                          "value": "{{customerKey}}",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "59afa4b3-5971-46a3-903f-e6fc3099f5fd",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Webhooks",
              "item": [
                {
                  "name": "Invalid webhookUrl",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "aabe23b4-fe3c-4e24-a2b1-5f070d76c596",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"WebhookUrl\",",
                          "            \"message\": \"Invalid url format\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b756be45-0b1c-4abf-89c4-d997d956b3d2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"notarealwebsite\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty webhookUrl",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7262a1f3-7fa3-48ad-a037-b60af204ce3c",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"WebhookUrl\",",
                          "            \"message\": \"Invalid url format\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cedd5224-2c94-4c04-8c78-0f68e66152cd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing webhookUrl",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b6b0b363-2d35-430a-a03b-6e735af823a0",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"WebhookUrl\",",
                          "            \"message\": \"Invalid url format\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cfb3fd7b-95af-4a74-bc89-60d02577991c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid eventTypes",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2868568b-520b-44c6-9d00-c6f58cf271a9",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"EventTypes\",",
                          "            \"message\": \"Invalid event types. Event types are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "c71e3690-e02e-46f7-ab00-2314d8555638",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid eventTypes Mixed",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d9c44afe-532f-4654-92bd-5c705ef97c2d",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"EventTypes\",",
                          "            \"message\": \"Invalid event types. Event types are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e15946fd-5212-43d0-a77d-69e27f7768d5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\",\r\n\t\t\"switch\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty eventTypes",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ae54efc7-e66a-4883-863d-87840bbcacdb",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"EventTypes\",",
                          "            \"message\": \"Invalid event types. Event types are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "58d7d4b7-d0b0-4006-8605-8047b90b9df5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing eventTypes",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4af80c7b-b8cc-41d2-9014-c5751db41d55",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"EventTypes\",",
                          "            \"message\": \"Invalid event types. Event types are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "e0494e9a-6bd7-4e59-aaaf-6961e7779aad",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid sources",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "95aa1e0a-781d-4deb-b418-6e5dfa1ae4c6",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Sources\",",
                          "            \"message\": \"Invalid sources types. Sources are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a5a5f3e4-85c1-4d9d-b345-d60bae233903",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"outsideworld\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid sources Mixed",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6d3eea02-8344-4c2c-9bf3-81e91f5d1952",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Sources\",",
                          "            \"message\": \"Invalid sources types. Sources are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "64209bcd-8bf5-44ff-b3ee-39118063f167",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"external\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Empty sources",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "afaefb90-c982-472a-9158-cbc9259fb03c",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Sources\",",
                          "            \"message\": \"Invalid sources types. Sources are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "cccc271b-7f39-4026-a41c-53ba782a3666",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Missing sources",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "eb2f7751-613b-48c8-a30b-f7e41465c1b9",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"Sources\",",
                          "            \"message\": \"Invalid sources types. Sources are required\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b56320dd-6f02-4709-96f4-7daa2d8ad1c6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid context",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "40eae59d-b51e-41e6-8c73-06a0649b3b90",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"context\",",
                          "            \"message\": \"\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"context\",",
                          "            \"message\": \"\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f3ec90fd-c1f4-4f1d-a49a-53cd9fff9bc7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": [1, 2],\r\n\t\"secret\": \"8I4Wxe9UkCgX8Qc6kguNBxzb4I0VqGol\"\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid secret",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4321df94-ef09-45e7-8bce-29ddb4ddbc5c",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Has the required properties\", function () {",
                          "    pm.expect(jsonData).to.have.property(\"error\");",
                          "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                          "    pm.expect(jsonData).to.have.property(\"context\");",
                          "    pm.expect(jsonData).to.have.property(\"id\");",
                          "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                          "});",
                          "",
                          "pm.test(\"Has the required error properties\", function () {",
                          "    var error = jsonData.error;",
                          "    pm.expect(error).to.have.property(\"code\");",
                          "    pm.expect(error).to.have.property(\"errors\");",
                          "    pm.expect(Object.keys(error).length).to.equal(2);",
                          "});",
                          "",
                          "pm.test(\"error has the required errors properties\", function () {",
                          "    var looped = false;",
                          "    jsonData.error.errors.forEach(error => {",
                          "        looped = true;",
                          "        pm.expect(error).to.have.property(\"reason\");",
                          "        pm.expect(error).to.have.property(\"message\");",
                          "        pm.expect(Object.keys(error).length).to.equal(2);",
                          "    });",
                          "    ",
                          "    pm.expect(looped).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"error has the correct errors\", function () {",
                          "    var errors = [",
                          "        {",
                          "            \"reason\": \"secret\",",
                          "            \"message\": \"\"",
                          "        },",
                          "        {",
                          "            \"reason\": \"secret\",",
                          "            \"message\": \"\"",
                          "        }",
                          "    ];",
                          "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                          "});",
                          "",
                          "pm.test(\"Has the correct context\", function () {",
                          "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                          "});",
                          "",
                          "pm.test(\"Has a matching id\", function () {",
                          "    pm.expect(jsonData.id).to.have.length(32);",
                          "    pm.expect(jsonData.id).to.match(/(.*)/);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "24624763-11fb-419b-ac81-7a3ce7946c5a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "type": "text",
                        "value": "{{apiKey}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"webhookUrl\": \"https://clickswitchwebhooks{{$guid}}.com/{{$timestamp}}\",\r\n\t\"eventTypes\": [\r\n\t\t\"switch.state\"\r\n\t],\r\n\t\"sources\": [\"user\", \"internal\"],\r\n\t\"context\": \"91d89906-462c-4a81-88ce-439ef1393fad\",\r\n\t\"secret\": {\"secret\": \"test\"}\r\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/webhooks?context={{context}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "webhooks"
                      ],
                      "query": [
                        {
                          "key": "context",
                          "value": "{{context}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_id": "6bed056c-b005-4f5b-bbc4-42e12ad7800a",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "ce173f77-ae91-4a2d-836b-d1122d7977d8",
          "_postman_isSubFolder": true
        },
        {
          "name": "customerKey",
          "item": [
            {
              "name": "Nonexistent customerKey",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal('Customer Not Found');",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal('Customer Not Found');",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "29c394fa-12ef-4d73-9bb8-63e8c879a50a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "e424da58-bc07-4d54-8049-e54cbddc96aa",
                      "key": "customerKey",
                      "value": "testNonExistentCustomerKey",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Customer customerKey Too Long",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                      "var timestamp = Date.now().toString();\r",
                      "var randomString = makeRandomString();\r",
                      "pm.environment.set(\"customerKey\", \"AaBb-CcDdEeFfGgHhIiJjKk.LlMmNnOoPpQq_RrSsTtUuVvWwXxYyZz~123456890\");\r",
                      "pm.environment.set(\"firstName\", randomString);\r",
                      "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    accountsMetadata: \"accountsMetadata\",\r",
                      "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                      "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                      "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                      "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                      "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                      "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                      "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                      "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                      "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                      "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                      "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                      "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                      "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                      "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                      "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                      "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                      "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                      "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                      "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                      "    }\r",
                      "));\r",
                      "pm.environment.set(\"metadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    metadata: \"metadata\",\r",
                      "    \tmetadata2: \"metadata2\",\r",
                      "    \tmetadata3: \"metadata3\",\r",
                      "    \tmetadata4: \"metadata4\",\r",
                      "    \tmetadata5: \"metadata5\",\r",
                      "    \tmetadata6: \"metadata6\",\r",
                      "    \tmetadata7: \"metadata7\",\r",
                      "    \tmetadata8: \"metadata8\",\r",
                      "    \tmetadata9: \"metadata9\",\r",
                      "    \tmetadata10: \"metadata10\",\r",
                      "    \tmetadata11: \"metadata11\",\r",
                      "    \tmetadata12: \"metadata12\",\r",
                      "    \tmetadata13: \"metadata13\",\r",
                      "    \tmetadata14: \"metadata14\",\r",
                      "    \tmetadata15: \"metadata15\",\r",
                      "    \tmetadata16: \"metadata16\",\r",
                      "    \tmetadata17: \"metadata17\",\r",
                      "    \tmetadata18: \"metadata18\",\r",
                      "    \tmetadata19: \"metadata19\",\r",
                      "    \tmetadata20: \"metadata20\"\r",
                      "    }\r",
                      "));\r",
                      "\r",
                      "// Creates a random string of length 10.\r",
                      "function makeRandomString() {\r",
                      "  var text = \"\";\r",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                      "  \r",
                      "  for (var i = 0; i < 10; i++) {\r",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                      "  }\r",
                      "  \r",
                      "  return text;\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"'customer-key' is not in the correct format.\"",
                      "        }",
                      "    ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1e053d78-fd64-43b8-9614-b23e3e874038",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{$timestamp}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{$timestamp}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "365adaf6-4224-4a7c-8c6b-001cbea8ec1d",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Customer (Dependency)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                      "var timestamp = Date.now().toString();\r",
                      "var randomString = makeRandomString();\r",
                      "pm.environment.set(\"customerKey\", unresCharString());\r",
                      "pm.environment.set(\"firstName\", randomString);\r",
                      "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    accountsMetadata: \"accountsMetadata\",\r",
                      "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                      "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                      "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                      "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                      "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                      "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                      "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                      "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                      "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                      "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                      "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                      "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                      "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                      "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                      "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                      "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                      "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                      "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                      "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                      "    }\r",
                      "));\r",
                      "pm.environment.set(\"metadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    metadata: \"metadata\",\r",
                      "    \tmetadata2: \"metadata2\",\r",
                      "    \tmetadata3: \"metadata3\",\r",
                      "    \tmetadata4: \"metadata4\",\r",
                      "    \tmetadata5: \"metadata5\",\r",
                      "    \tmetadata6: \"metadata6\",\r",
                      "    \tmetadata7: \"metadata7\",\r",
                      "    \tmetadata8: \"metadata8\",\r",
                      "    \tmetadata9: \"metadata9\",\r",
                      "    \tmetadata10: \"metadata10\",\r",
                      "    \tmetadata11: \"metadata11\",\r",
                      "    \tmetadata12: \"metadata12\",\r",
                      "    \tmetadata13: \"metadata13\",\r",
                      "    \tmetadata14: \"metadata14\",\r",
                      "    \tmetadata15: \"metadata15\",\r",
                      "    \tmetadata16: \"metadata16\",\r",
                      "    \tmetadata17: \"metadata17\",\r",
                      "    \tmetadata18: \"metadata18\",\r",
                      "    \tmetadata19: \"metadata19\",\r",
                      "    \tmetadata20: \"metadata20\"\r",
                      "    }\r",
                      "));\r",
                      "\r",
                      "// Creates a random string of length 10.\r",
                      "function makeRandomString() {\r",
                      "  var text = \"\";\r",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                      "  \r",
                      "  for (var i = 0; i < 10; i++) {\r",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                      "  }\r",
                      "  \r",
                      "  return text;\r",
                      "}\r",
                      "\r",
                      "function unresCharString() {\r",
                      "    var array = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz12356890-._~\".split(\"\");\r",
                      "    \r",
                      "    for (var i = array.length - 1; i > 0; i--) {\r",
                      "        var j = Math.floor(Math.random() * (i + 1));\r",
                      "        var temp = array[i];\r",
                      "        array[i] = array[j];\r",
                      "        array[j] = temp;\r",
                      "    }\r",
                      "    \r",
                      "    return array.join(\"\");\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has all properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has all data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has all item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has all accountHolders properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all accounts properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all addresses properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                      "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct phoneNumber\", function () {",
                      "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolders\", function () {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   var expectedAccountHolders = {",
                      "        firstName: pm.environment.get(\"firstName\"),",
                      "        middleInitial: \"J\",",
                      "        lastName: \"Test\"",
                      "    };",
                      "    ",
                      "    pm.expect(accountHolders).to.have.length(1);",
                      "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                      "});",
                      "",
                      "pm.test(\"Has the correct addresses\", function () {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   var expectedAddresses = {",
                      "        line1: \"244 1st Ave. N\",",
                      "        line2: \"#100\",",
                      "        line3: \"ATTN Test\",",
                      "        city: \"Minneapolis\",",
                      "        zip: \"55401\",",
                      "        state: \"MN\",",
                      "        country: \"US\"",
                      "    };",
                      "    ",
                      "    pm.expect(addresses).to.have.length(1);",
                      "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    metadata = jsonData.data.item.metadata;",
                      "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                      "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3067667e-1fa2-41b4-9ab1-a7b19f68898b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{$timestamp}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{$timestamp}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "6054659a-b284-4c30-b14b-5a92103e5d68",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      "pm.environment.set(\"customerKeyUpper\", pm.environment.get(\"customerKey\").toUpperCase());"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has all properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has all data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has all item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has all accountHolders properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all accounts properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all addresses properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                      "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct phoneNumber\", function () {",
                      "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolders\", function () {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   var expectedAccountHolders = [",
                      "       {",
                      "            firstName: pm.environment.get(\"firstName\"),",
                      "            middleInitial: \"J\",",
                      "            lastName: \"Test\"",
                      "        }",
                      "    ];",
                      "    ",
                      "    pm.expect(accountHolders).to.have.length(1);",
                      "    pm.expect(accountHolders).to.deep.equal(expectedAccountHolders);",
                      "});",
                      "",
                      "pm.test(\"Has the correct addresses\", function () {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   var expectedAddresses = {",
                      "        line1: \"244 1st Ave. N\",",
                      "        line2: \"#100\",",
                      "        line3: \"ATTN Test\",",
                      "        city: \"Minneapolis\",",
                      "        zip: \"55401\",",
                      "        state: \"MN\",",
                      "        country: \"US\"",
                      "    };",
                      "    ",
                      "    pm.expect(addresses).to.have.length(1);",
                      "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    metadata = jsonData.data.item.metadata;",
                      "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                      "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5938abd2-ad25-49a0-bb6b-affae6e2b702",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "c7e942a8-a018-4039-87c6-0c8324050d9f",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer Uppercase",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      "pm.environment.set(\"customerKeyUpper\", pm.environment.get(\"customerKey\").toUpperCase());"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7a706835-75f5-4fa8-b510-6ab497fa548f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "b2bd1655-5640-45e5-8700-d07597a5d7f7",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer Lowercase",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      "pm.environment.set(\"customerKeyLower\", pm.environment.get(\"customerKey\").toLowerCase());"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "727444f9-f04c-493e-b613-50c06d4e030f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "3f719f3f-a528-482c-b388-cee4e6e47614",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0da39113-3f62-4703-ba71-6d3fbaba934b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9299e020-fb21-44bb-b499-98a754d68a1c",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8b87d232-6fc9-42ac-bb6c-466d1be6cd37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "71a56d5e-f97f-470e-ab32-9e8370a4aece",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "38a3749e-9d6a-4060-99aa-e597ae7c9976",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc779555-562b-4225-8699-5f2d2e69ff62",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function() {",
                      "    var items = [",
                      "        {",
                      "            index: 1,",
                      "            type: \"Deposit\",",
                      "            name: pm.environment.get(\"targetNameDeposit\"),",
                      "            status: \"Incomplete\",",
                      "            actions: [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ]",
                      "        }",
                      "    ];",
                      "    pm.expect(jsonData.data.items).to.deep.equal(items);",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function() {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b6a2857a-187d-43ef-863e-2cbadd4d2afa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "62c4814d-58fa-444b-92d6-0a937422299f",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6dd971ca-159e-4039-a05f-b8eab69f03a4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "f5dc5249-d518-4195-a4fb-1b5d9d1fa3c9",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "52cfe520-0931-4c8e-acbd-4b4d297a0bf4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "754af718-ef97-4a3f-a7b9-2e6d29601909",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "bf453a37-faed-4c32-8485-65fdd2834137",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9f260757-9259-49ef-ac6a-e643ff3b3cda",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyUpper\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ce01dd98-3805-40fa-95f5-e51deac178f0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "7c9695d1-bf93-40dd-9cd8-1d204e62a9c9",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyLower\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2abc5df4-c723-4d49-bc9e-88a48b496b4d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "ade52fbe-2299-4d5e-8079-03e554ed56e0",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d45acc27-67a5-4f68-8007-6f5e2e102a81",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "7dbe68fb-4eae-4842-b6f5-66b0457dd8f6",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "555e3d37-2e79-429b-bdec-6ddac58829c4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "f2bb2288-deca-457e-bdf9-80c11672ccef",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "97fc19d8-41a7-460b-8572-17af8ff55b03",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "ff6e9a10-804a-4eb4-904d-cd6e5c692d02",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyUpper\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4fbab42a-f481-4b11-9e30-081f7c882ecb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "a015d6a7-435c-466a-9b7d-611a869f9846",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyLower\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "87551ed4-0894-4597-bf0b-2b6c678fbe68",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "d76c206d-7b36-4d85-bf82-c55df9722b49",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6bf70d87-2445-4330-a503-76664b21dbbb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "7bc464c2-7f4a-46f7-b173-24823fdcd8bc",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Customer Uppercase (Dependency)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                      "var timestamp = Date.now().toString();\r",
                      "var randomString = makeRandomString();\r",
                      "pm.environment.set(\"firstName\", randomString);\r",
                      "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    accountsMetadata: \"accountsMetadata\",\r",
                      "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                      "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                      "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                      "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                      "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                      "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                      "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                      "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                      "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                      "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                      "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                      "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                      "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                      "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                      "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                      "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                      "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                      "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                      "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                      "    }\r",
                      "));\r",
                      "pm.environment.set(\"metadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    metadata: \"metadata\",\r",
                      "    \tmetadata2: \"metadata2\",\r",
                      "    \tmetadata3: \"metadata3\",\r",
                      "    \tmetadata4: \"metadata4\",\r",
                      "    \tmetadata5: \"metadata5\",\r",
                      "    \tmetadata6: \"metadata6\",\r",
                      "    \tmetadata7: \"metadata7\",\r",
                      "    \tmetadata8: \"metadata8\",\r",
                      "    \tmetadata9: \"metadata9\",\r",
                      "    \tmetadata10: \"metadata10\",\r",
                      "    \tmetadata11: \"metadata11\",\r",
                      "    \tmetadata12: \"metadata12\",\r",
                      "    \tmetadata13: \"metadata13\",\r",
                      "    \tmetadata14: \"metadata14\",\r",
                      "    \tmetadata15: \"metadata15\",\r",
                      "    \tmetadata16: \"metadata16\",\r",
                      "    \tmetadata17: \"metadata17\",\r",
                      "    \tmetadata18: \"metadata18\",\r",
                      "    \tmetadata19: \"metadata19\",\r",
                      "    \tmetadata20: \"metadata20\"\r",
                      "    }\r",
                      "));\r",
                      "\r",
                      "// Creates a random string of length 10.\r",
                      "function makeRandomString() {\r",
                      "  var text = \"\";\r",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                      "  \r",
                      "  for (var i = 0; i < 10; i++) {\r",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                      "  }\r",
                      "  \r",
                      "  return text;\r",
                      "}\r",
                      "\r",
                      "function unresCharString() {\r",
                      "    var array = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz12356890-._~\".split(\"\");\r",
                      "    \r",
                      "    for (var i = array.length - 1; i > 0; i--) {\r",
                      "        var j = Math.floor(Math.random() * (i + 1));\r",
                      "        var temp = array[i];\r",
                      "        array[i] = array[j];\r",
                      "        array[j] = temp;\r",
                      "    }\r",
                      "    \r",
                      "    return array.join(\"\");\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has all properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has all data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has all item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has all accountHolders properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all accounts properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all addresses properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                      "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct phoneNumber\", function () {",
                      "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolders\", function () {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   var expectedAccountHolders = {",
                      "        firstName: pm.environment.get(\"firstName\"),",
                      "        middleInitial: \"J\",",
                      "        lastName: \"Test\"",
                      "    };",
                      "    ",
                      "    pm.expect(accountHolders).to.have.length(1);",
                      "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                      "});",
                      "",
                      "pm.test(\"Has the correct addresses\", function () {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   var expectedAddresses = {",
                      "        line1: \"244 1st Ave. N\",",
                      "        line2: \"#100\",",
                      "        line3: \"ATTN Test\",",
                      "        city: \"Minneapolis\",",
                      "        zip: \"55401\",",
                      "        state: \"MN\",",
                      "        country: \"US\"",
                      "    };",
                      "    ",
                      "    pm.expect(addresses).to.have.length(1);",
                      "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    metadata = jsonData.data.item.metadata;",
                      "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                      "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0da674e7-43db-4833-819d-b04204ccc0b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customerKeyUpper}}\",\n    \"email\": \"{{$timestamp}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{$timestamp}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "c5709806-d48c-48af-ab77-783993723434",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch Uppercase (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b77ceea6-a0dd-44be-82eb-b604d7864aeb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "ca927fe0-dcb7-4f31-bb96-f5e3c9cd0c74",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function() {",
                      "    var items = [",
                      "        {",
                      "            index: 1,",
                      "            type: \"Deposit\",",
                      "            name: pm.environment.get(\"targetNameDeposit\"),",
                      "            status: \"Canceled\",",
                      "            actions: [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ]",
                      "        }",
                      "    ];",
                      "    pm.expect(jsonData.data.items).to.deep.equal(items);",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function() {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "77874c3e-7fa5-4291-95c6-96d99f24d2af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "6aa38cab-4d5e-4aee-b700-7f9e5d53c860",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"currentItemCount\");",
                      "    pm.expect(jsonData.data).to.have.property(\"items\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the correct currentItemCount\", function () {",
                      "    pm.expect(jsonData.data.currentItemCount).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct items\", function() {",
                      "    var items = [",
                      "        {",
                      "            index: 1,",
                      "            type: \"Deposit\",",
                      "            name: pm.environment.get(\"targetNameDeposit\"),",
                      "            status: \"Incomplete\",",
                      "            actions: [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ]",
                      "        }",
                      "    ];",
                      "    pm.expect(jsonData.data.items).to.deep.equal(items);",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function() {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "69ecfb1b-75e8-47a9-8287-b744362b3980",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "7009f1b9-7231-4748-8b35-83e7cb44ccb2",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switches Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ce314374-bff3-4ada-a070-66e4917704d8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "6bce4338-2216-4f6b-9b8a-8e005a02a896",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "db252d52-720b-4a19-b518-1e5790227dec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "b70708fa-ab61-4b7f-8ea1-78b3e6f162a7",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5da0da3b-a8e0-4796-bfab-5b5e461e9641",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "0e4b53a4-2eaa-4c4b-91f0-7eb8b4ae15bf",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Switch By Index Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyLower\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f32bf8c0-fce4-4037-a628-f7a69a9cf560",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "975f1cd2-5fc5-443b-8401-1eef4e18b777",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct message\", function () {",
                      "   pm.expect(jsonData.error.message).to.equal(\"Unable to HTTP-PUT the switch currently with the status Canceled\");",
                      "});",
                      "",
                      "pm.test(\"Errors has the correct message\", function () {",
                      "    pm.expect(jsonData.error.errors[0].message).to.equal(\"Unable to HTTP-PUT the switch currently with the status Canceled\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ee49a250-d37b-4b6d-b06a-52c76f7f69b1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "a2a3979a-1ff7-48f5-928d-0dbcaca29fdf",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "500e2370-3f29-4dc5-89b6-abc67d7683fb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "713ce5aa-0258-443a-9cc5-2c5d16094a34",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c73e9d20-0569-4298-a76f-c90a2724306b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "fc24dbd5-058c-4d5c-b918-9d8725ebcad0",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch Lowercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKeyLower\")} does not exist.`",
                      "        }",
                      "    ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "490b6b2b-89d1-4c59-98ee-b4ae7b054515",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "5f4c42b4-2644-434f-81ce-b4d31fa178cf",
                      "key": "customerKey",
                      "value": "{{customerKeyLower}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"244 N 1st Ave\",",
                      "                \"line2\": \"#100\",",
                      "                \"line3\": \"ATTN Test\",",
                      "                \"city\": \"Minneapolis\",",
                      "                \"state\": pm.environment.get(\"state\"),",
                      "                \"zip\": pm.environment.get(\"zip\")",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch#state\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "84feaa5c-e8ad-45ff-8bcb-ebc4a6e888e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "e26f25d9-8abd-4c59-9cf1-116e04452e11",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch Uppercase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "090019cd-0405-4fb6-b7f3-53e6d6ced137",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "718ff85f-5916-47d7-b3ab-b8d2c32959a1",
                      "key": "customerKey",
                      "value": "{{customerKeyUpper}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4c4ae695-5a83-40b6-8cd8-2eb49c070719",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "61338134-4fe6-4209-9613-f8e619e20b99",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "e6a1d65c-c522-4cee-8841-6d8120ef3058",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9574f33-0b35-423c-b2d4-681bdcd20b69",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2b66a461-3568-4319-b4e8-7818c5d09220",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Cross-Tenant Attack",
          "item": [
            {
              "name": "Create Customer (Dependency)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "// Set customerKey env var to timestamp to create a unique customer each run.\r",
                      "var timestamp = Date.now().toString();\r",
                      "var randomString = makeRandomString();\r",
                      "pm.environment.set(\"customerKey\", timestamp);\r",
                      "pm.environment.set(\"firstName\", randomString);\r",
                      "pm.environment.set(\"accountsMetadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    accountsMetadata: \"accountsMetadata\",\r",
                      "    \taccountsMetadata2: \"accountsMetadata2\",\r",
                      "    \taccountsMetadata3: \"accountsMetadata3\",\r",
                      "    \taccountsMetadata4: \"accountsMetadata4\",\r",
                      "    \taccountsMetadata5: \"accountsMetadata5\",\r",
                      "    \taccountsMetadata6: \"accountsMetadata6\",\r",
                      "    \taccountsMetadata7: \"accountsMetadata7\",\r",
                      "    \taccountsMetadata8: \"accountsMetadata8\",\r",
                      "    \taccountsMetadata9: \"accountsMetadata9\",\r",
                      "    \taccountsMetadata10: \"accountsMetadata10\",\r",
                      "    \taccountsMetadata11: \"accountsMetadata11\",\r",
                      "    \taccountsMetadata12: \"accountsMetadata12\",\r",
                      "    \taccountsMetadata13: \"accountsMetadata13\",\r",
                      "    \taccountsMetadata14: \"accountsMetadata14\",\r",
                      "    \taccountsMetadata15: \"accountsMetadata15\",\r",
                      "    \taccountsMetadata16: \"accountsMetadata16\",\r",
                      "    \taccountsMetadata17: \"accountsMetadata17\",\r",
                      "    \taccountsMetadata18: \"accountsMetadata18\",\r",
                      "    \taccountsMetadata19: \"accountsMetadata19\",\r",
                      "    \taccountsMetadata20: \"accountsMetadata20\"\r",
                      "    }\r",
                      "));\r",
                      "pm.environment.set(\"metadata\", JSON.stringify(\r",
                      "    {\r",
                      "\t    metadata: \"metadata\",\r",
                      "    \tmetadata2: \"metadata2\",\r",
                      "    \tmetadata3: \"metadata3\",\r",
                      "    \tmetadata4: \"metadata4\",\r",
                      "    \tmetadata5: \"metadata5\",\r",
                      "    \tmetadata6: \"metadata6\",\r",
                      "    \tmetadata7: \"metadata7\",\r",
                      "    \tmetadata8: \"metadata8\",\r",
                      "    \tmetadata9: \"metadata9\",\r",
                      "    \tmetadata10: \"metadata10\",\r",
                      "    \tmetadata11: \"metadata11\",\r",
                      "    \tmetadata12: \"metadata12\",\r",
                      "    \tmetadata13: \"metadata13\",\r",
                      "    \tmetadata14: \"metadata14\",\r",
                      "    \tmetadata15: \"metadata15\",\r",
                      "    \tmetadata16: \"metadata16\",\r",
                      "    \tmetadata17: \"metadata17\",\r",
                      "    \tmetadata18: \"metadata18\",\r",
                      "    \tmetadata19: \"metadata19\",\r",
                      "    \tmetadata20: \"metadata20\"\r",
                      "    }\r",
                      "));\r",
                      "\r",
                      "// Creates a random string of length 10.\r",
                      "function makeRandomString() {\r",
                      "  var text = \"\";\r",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
                      "  \r",
                      "  for (var i = 0; i < 10; i++) {\r",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
                      "  }\r",
                      "  \r",
                      "  return text;\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has all properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has all data properties\", function () {",
                      "    pm.expect(jsonData.data).to.have.property(\"item\");",
                      "    pm.expect(jsonData.data).to.have.property(\"kind\");",
                      "    pm.expect(jsonData.data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(jsonData.data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has all item properties\", function () {",
                      "    pm.expect(jsonData.data.item).to.have.property(\"email\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"phoneNumber\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accountHolders\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"accounts\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"addresses\");",
                      "    pm.expect(jsonData.data.item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(jsonData.data.item).length).to.equal(6);",
                      "});",
                      "",
                      "pm.test(\"Has all accountHolders properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accountHolders.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"firstName\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"middleInitial\");",
                      "        pm.expect(jsonData.data.item.accountHolders[i]).to.have.property(\"lastName\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accountHolders[i]).length).to.equal(3);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all accounts properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.accounts.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"number\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"type\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"name\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"routingNumber\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"index\");",
                      "        pm.expect(jsonData.data.item.accounts[i]).to.have.property(\"metadata\");",
                      "        pm.expect(Object.keys(jsonData.data.item.accounts[i]).length).to.equal(6);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has all addresses properties\", function () {",
                      "    var looped = false;",
                      "    for (var i = 0; i < jsonData.data.item.addresses.length; i++) {",
                      "        looped = true;",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line1\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line2\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"line3\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"city\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"state\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"zip\");",
                      "        pm.expect(jsonData.data.item.addresses[i]).to.have.property(\"country\");",
                      "        pm.expect(Object.keys(jsonData.data.item.addresses[i]).length).to.equal(7);",
                      "    }",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct email\", function () {",
                      "   pm.expect(jsonData.data.item.email).to.equal(pm.environment.get(\"customerKey\") + \"@clickswitch.com\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct phoneNumber\", function () {",
                      "   pm.expect(jsonData.data.item.phoneNumber).to.equal(\"6125555555\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolders\", function () {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   var expectedAccountHolders = {",
                      "        firstName: pm.environment.get(\"firstName\"),",
                      "        middleInitial: \"J\",",
                      "        lastName: \"Test\"",
                      "    };",
                      "    ",
                      "    pm.expect(accountHolders).to.have.length(1);",
                      "    pm.expect(accountHolders).to.deep.include(expectedAccountHolders);",
                      "});",
                      "",
                      "pm.test(\"Has the correct accounts\", function () {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   var expectedAccounts = {",
                      "        number: pm.environment.get(\"customerKey\"),",
                      "        type: pm.environment.get(\"accountTypeChecking\"),",
                      "        name: pm.environment.get(\"accountName\"),",
                      "        routingNumber: pm.environment.get(\"routingNumber\"),",
                      "        index: 0,",
                      "        metadata: JSON.parse(pm.environment.get(\"accountsMetadata\"))",
                      "    };",
                      "    ",
                      "    pm.expect(accounts).to.have.length(1);",
                      "    pm.expect(accounts).to.deep.include(expectedAccounts);",
                      "});",
                      "",
                      "pm.test(\"Has the correct addresses\", function () {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   var expectedAddresses = {",
                      "        line1: \"244 1st Ave. N\",",
                      "        line2: \"#100\",",
                      "        line3: \"ATTN Test\",",
                      "        city: \"Minneapolis\",",
                      "        zip: \"55401\",",
                      "        state: \"MN\",",
                      "        country: \"US\"",
                      "    };",
                      "    ",
                      "    pm.expect(addresses).to.have.length(1);",
                      "    pm.expect(addresses).to.deep.include(expectedAddresses);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    metadata = jsonData.data.item.metadata;",
                      "    pm.expect(Object.keys(metadata).length).to.equal(20);",
                      "    pm.expect(metadata).to.deep.include(JSON.parse(pm.environment.get(\"metadata\")));",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "   pm.expect(jsonData.data.kind).to.equal(\"Customer\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "94616a17-55b1-4aad-95e7-392b63387115",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customerKey}}\",\n    \"email\": \"{{customerKey}}@clickswitch.com\",\n    \"phoneNumber\": \"6125555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{firstName}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n\t        \"number\": \"{{customerKey}}\",\n\t        \"type\": \"{{accountTypeChecking}}\",\n\t        \"name\": \"{{accountName}}\",\n\t        \"routingNumber\": \"{{routingNumber}}\",\n\t        \"metadata\": {{accountsMetadata}}\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"244 1st Ave. N\",\n            \"line2\": \"#100\",\n            \"line3\": \"ATTN Test\",\n            \"city\": \"Minneapolis\",\n            \"state\": \"MN\",\n            \"zip\": \"55401\",\n            \"country\": \"US\"\n        }\n    ],\n    \"metadata\": {{metadata}}\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "c46e7688-0b83-45c7-8124-ccf745b75e43",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ee534298-0c1b-4da2-92a8-86477a5c32d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "3f2c60ee-1d73-419d-ae71-0502cc220c96",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Customer Authorization URL",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56fdbea3-e852-49e2-959c-e2f961c9b94a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1c407c6f-e611-4a62-b236-81b39fd55667",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/auth?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "auth"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "66b9dc3a-0ca8-4dee-9b61-baf6f105d5a4",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch (Dependency)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"data\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required data properties\", function () {",
                      "    var data = jsonData.data;",
                      "    pm.expect(data).to.have.property(\"item\");",
                      "    pm.expect(data).to.have.property(\"kind\");",
                      "    pm.expect(data).to.have.property(\"lang\");",
                      "    pm.expect(Object.keys(data).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"data has the required item properties\", function () {",
                      "    var item = jsonData.data.item;",
                      "    pm.expect(item).to.have.property(\"index\");",
                      "    pm.expect(item).to.have.property(\"type\");",
                      "    pm.expect(item).to.have.property(\"targetId\");",
                      "    pm.expect(item).to.have.property(\"name\");",
                      "    pm.expect(item).to.have.property(\"accountHolderIndex\");",
                      "    pm.expect(item).to.have.property(\"values\");",
                      "    pm.expect(item).to.have.property(\"ux\");",
                      "    pm.expect(item).to.have.property(\"state\");",
                      "    pm.expect(item).to.have.property(\"metadata\");",
                      "    pm.expect(Object.keys(item).length).to.equal(9);",
                      "});",
                      "",
                      "pm.test(\"item has the required values properties\", function () {",
                      "    var values = jsonData.data.item.values;",
                      "    pm.expect(values).to.have.property(\"accounts\");",
                      "    pm.expect(values).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(values).length).to.equal(2); ",
                      "    ",
                      "    var accounts = values.accounts;",
                      "    var looped = false;",
                      "    accounts.forEach(account => {",
                      "        looped = true;",
                      "        pm.expect(account).to.have.property(\"index\");",
                      "        pm.expect(account).to.have.property(\"fields\");",
                      "        pm.expect(Object.keys(account).length).to.equal(2);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required ux properties\", function () {",
                      "    var accounts = jsonData.data.item.ux.accounts;",
                      "    pm.expect(accounts).to.have.property(\"limit\");",
                      "    pm.expect(accounts).to.have.property(\"maxChecking\");",
                      "    pm.expect(accounts).to.have.property(\"maxSavings\");",
                      "    pm.expect(accounts).to.have.property(\"choices\");",
                      "    pm.expect(accounts).to.have.property(\"fields\");",
                      "    pm.expect(Object.keys(accounts).length).to.equal(5);",
                      "    ",
                      "    var choices = accounts.choices;",
                      "    var looped = false;",
                      "    choices.forEach(choice => {",
                      "        looped = true;",
                      "        pm.expect(choice).to.have.property(\"index\");",
                      "        pm.expect(choice).to.have.property(\"label\");",
                      "        pm.expect(Object.keys(choice).length).to.equal(2); ",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "    ",
                      "    var fields = jsonData.data.item.ux.fields;",
                      "    looped = false;",
                      "    fields.forEach(field => {",
                      "        looped = true;",
                      "        pm.expect(field).to.have.property(\"key\");",
                      "        pm.expect(field).to.have.property(\"label\");",
                      "        pm.expect(field).to.have.property(\"type\");",
                      "        pm.expect(field).to.have.property(\"required\");",
                      "        pm.expect(Object.keys(field).length).to.be.at.least(4);",
                      "    });",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"item has the required state properties\", function () {",
                      "    var state = jsonData.data.item.state;",
                      "    pm.expect(state).to.have.property(\"status\");",
                      "    pm.expect(state).to.have.property(\"validation\");",
                      "    pm.expect(state).to.have.property(\"actions\");",
                      "    pm.expect(Object.keys(state).length).to.equal(3);",
                      "    ",
                      "    var validation = state.validation;",
                      "    pm.expect(validation).to.have.property(\"accounts\");",
                      "    pm.expect(validation).to.have.property(\"fields\");",
                      "    pm.expect(validation).to.have.property(\"overall\");",
                      "    pm.expect(Object.keys(validation).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"Has the correct index\", function () {",
                      "    pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test(\"Has the correct type\", function () {",
                      "    pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test(\"Has the correct targetId\", function () {",
                      "    pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"targetIdDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct name\", function () {",
                      "    pm.expect(jsonData.data.item.name).to.equal(pm.environment.get(\"targetNameDeposit\"));",
                      "});",
                      "",
                      "pm.test(\"Has the correct accountHolderIndex\", function () {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test(\"item has the correct values\", function () {",
                      "    var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.equal(values);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct accounts\", function () {",
                      "    var customerKey = pm.environment.get(\"customerKey\");",
                      "    var accountLabel = '*' + customerKey.substring(customerKey.length-4,customerKey.length);",
                      "    var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": accountLabel",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.equal(accounts);",
                      "});",
                      "",
                      "pm.test(\"ux has the correct fields\", function () {",
                      "    var isCanada = pm.environment.get(\"country\") === \"CA\";",
                      "    var stateFieldLabel = isCanada ? \"Province\" : \"State\";",
                      "    var stateFieldRegex = isCanada ? \"^(N[BLSTU]|[AM]B|[BQ]C|ON|PE|SK|YT)$\"",
                      "        : \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";",
                      "    var stateFieldValidation = isCanada ? \"Must be a valid 2 character Province or Territory code\" : \"Must be a valid 2 character state code\";",
                      "    var zipFieldLabel = isCanada ? \"Postal Code\" : \"Zip Code\";",
                      "    var zipFieldRegex = isCanada ? \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\" : \"^\\\\d{5}(-\\\\d{4})?$\";",
                      "    var zipFieldValidation = isCanada ? \"Must be a valid postal code\" : \"Must be in the format 00000 or 00000-0000\";",
                      "    ",
                      "    var fields = [",
                      "        {",
                      "            \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "            \"label\": \"Net or Amount (in dollars)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "            \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "            \"label\": \"Depositor's Full Mailing Address\",",
                      "            \"type\": \"composite\",",
                      "            \"required\": true,",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"line1\",",
                      "                    \"label\": \"Line1\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"line2\",",
                      "                    \"label\": \"Line2\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"line3\",",
                      "                    \"label\": \"Line3\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"city\",",
                      "                    \"label\": \"City\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                },",
                      "                {",
                      "                    \"key\": \"state\",",
                      "                    \"label\": stateFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": stateFieldRegex,",
                      "                    \"validationMessage\": stateFieldValidation",
                      "                },",
                      "                {",
                      "                    \"key\": \"zip\",",
                      "                    \"label\": zipFieldLabel,",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": zipFieldRegex,",
                      "                    \"validationMessage\": zipFieldValidation",
                      "                }",
                      "            ]",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Employee ID\",",
                      "            \"label\": \"Employee ID\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": false",
                      "        },",
                      "        {",
                      "            \"key\": \"Custom_Last 4 of SSN\",",
                      "            \"label\": \"Last 4 of SSN\",",
                      "            \"type\": \"textbox\",",
                      "            \"required\": true",
                      "        }",
                      "    ]",
                      "",
                      "    pm.expect(jsonData.data.item.ux.fields).to.deep.equal(fields);",
                      "});",
                      "",
                      "pm.test(\"Has matching values and ux fields\", function () {",
                      "    var valuesFields = jsonData.data.item.values.fields;",
                      "    valuesFieldKeys = [];",
                      "    for (var key in valuesFields) {",
                      "        valuesFieldKeys.push(key);",
                      "    }",
                      "    ",
                      "    var uxFields = jsonData.data.item.ux.fields;",
                      "    uxFieldsKeys = [];",
                      "    uxFields.forEach(field => {",
                      "        uxFieldsKeys.push(field.key);",
                      "    });",
                      "  ",
                      "    pm.expect(valuesFieldKeys).to.deep.equal(uxFieldsKeys);",
                      "});",
                      "",
                      "pm.test(\"Has the correct state\", function () {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.equal(state);",
                      "});",
                      "",
                      "pm.test(\"Has the correct metadata\", function () {",
                      "    pm.expect(jsonData.data.item.metadata).to.deep.equal({});",
                      "});",
                      "",
                      "pm.test(\"Has the correct kind\", function () {",
                      "    pm.expect(jsonData.data.kind).to.equal(\"switch\"); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct lang\", function () {",
                      "    pm.expect(jsonData.data.lang).to.equal(pm.environment.get(\"lang\")); ",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6dbb8e0b-c9cd-4768-9459-17378e6a7694",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "3afe330a-5a36-4c79-abdd-81283af00181",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": \"Customer Not Found\"",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6f8e0c40-7d26-4185-8eef-af90c40561d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "a4747f3b-cf25-4640-8250-c2a4a2d1d86f",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f1dff792-cdb7-45de-b416-ca08048de278",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "e34fd372-a29a-4475-94d6-e87ed3915466",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "73ee0f04-6239-4828-b3ab-a5ff2a375944",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "73744da7-a855-451d-826a-fad717c8ffe7",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(2);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"reason\");",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(2);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "        {",
                      "            \"reason\": \"ApiExternalId\",",
                      "            \"message\": \"Invalid customer key\"",
                      "        },",
                      "        {",
                      "            \"reason\": \"Values.Accounts[0]\",",
                      "            \"message\": \"Account index 0 does not exist for this customer.\"",
                      "        }",
                      "    ];",
                      "",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "45cf7bb1-e02d-4561-98b3-07606cb23516",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{targetIdDeposit}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"244 N 1st Ave\",\r\n            \"line2\": \"#100\",\r\n            \"line3\": \"ATTN Test\",\r\n            \"city\": \"Minneapolis\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "69da2cf5-d95b-45b0-b51f-dc73a2f6f745",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5ae9a78a-dc4f-4ae3-8f79-b3d1d4bd82ce",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "12d8f357-db69-4ac6-88a7-d40938936c95",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "86f7a553-16b6-4006-b1c0-8c8866cf37fb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1/action?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1",
                    "action"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "c2c84409-db04-4ce4-aa28-001414232a1f",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Has the required properties\", function () {",
                      "    pm.expect(jsonData).to.have.property(\"error\");",
                      "    pm.expect(jsonData).to.have.property(\"apiVersion\");",
                      "    pm.expect(jsonData).to.have.property(\"context\");",
                      "    pm.expect(jsonData).to.have.property(\"id\");",
                      "    pm.expect(Object.keys(jsonData).length).to.equal(4);",
                      "});",
                      "",
                      "pm.test(\"Has the required error properties\", function () {",
                      "    var error = jsonData.error;",
                      "    pm.expect(error).to.have.property(\"code\");",
                      "    pm.expect(error).to.have.property(\"message\");",
                      "    pm.expect(error).to.have.property(\"errors\");",
                      "    pm.expect(Object.keys(error).length).to.equal(3);",
                      "});",
                      "",
                      "pm.test(\"error has the required errors properties\", function () {",
                      "    var looped = false;",
                      "    jsonData.error.errors.forEach(error => {",
                      "        looped = true;",
                      "        pm.expect(error).to.have.property(\"message\");",
                      "        pm.expect(Object.keys(error).length).to.equal(1);",
                      "    });",
                      "    ",
                      "    pm.expect(looped).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"error has the correct errors\", function () {",
                      "    var errors = [",
                      "            {",
                      "                \"message\": `Switch with index 1 for customer ${pm.environment.get(\"customerKey\")} does not exist.`",
                      "            }",
                      "        ];",
                      "    ",
                      "    pm.expect(jsonData.error.errors).to.deep.equal(errors);",
                      "});",
                      "",
                      "pm.test(\"Has the correct context\", function () {",
                      "    pm.expect(jsonData.context).to.equal(pm.environment.get(\"context\"));",
                      "});",
                      "",
                      "pm.test(\"Has a matching id\", function () {",
                      "    pm.expect(jsonData.id).to.have.length(32);",
                      "    pm.expect(jsonData.id).to.match(/(.*)/);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "298897cd-1289-45b8-a2e5-c046f32a531d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{apiKey2}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{baseUrl}}/customers/:customerKey/switches/1?context={{context}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "customers",
                    ":customerKey",
                    "switches",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "{{context}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "dd278f74-10dc-41a0-97ff-c798cfa96068",
                      "key": "customerKey",
                      "value": "{{customerKey}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "500a118e-21f4-457a-953e-ab78e6bfa888",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e4d7c80d-4600-4d81-9104-55e183970fe2",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "871e0722-0f9f-476e-baf4-187a6fabe9b5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "24b79cb3-65c9-4541-bfbe-afa3ff8e6b8d"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}