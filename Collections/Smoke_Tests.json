{
  "info": {
    "_postman_id": "1dcea77f-1205-444a-8316-1e06856a07e4",
    "name": "Smoke Tests",
    "description": "A collection of tests that hit all the QA endpoints with some tests that ensure the API is up and working. These tests don't test complicated business logic but rather ensure that the correct response types and lengths are being returned.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "3ffc5fb9-1f91-417f-b5ba-73263c35d599",
      "name": "Types",
      "description": "",
      "item": [
        {
          "_postman_id": "c920930d-49bf-4aa4-8be4-faf7f1bb5ba9",
          "name": "Targets",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4cfeaf-9bbf-487b-8c62-5a5bf68afc00",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 2 items', function() {",
                  "    pm.expect(jsonData.data.currentItemCount).to.eql(2);",
                  "    pm.expect(jsonData.data.items).to.have.length(2);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var deposit = {",
                  "        \"id\": \"deposit\",",
                  "        \"label\": \"Direct Deposit\",",
                  "        \"plural\": \"Direct Deposits\",",
                  "        \"recipient\": \"Depositor\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future direct deposits to your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deposit);",
                  "",
                  "    //TODO: Add this test back in once we enable account closures again.",
                  "    // var closure =  {",
                  "    //     \"id\": \"closure\",",
                  "    //     \"label\": \"Account Closure\",",
                  "    //     \"plural\": \"Account Closures\",",
                  "    //     \"recipient\": \"Financial Instituion\",",
                  "    //     \"help\": \"Instructions to a company to close an account that you no longer need.\"",
                  "    // };",
                  "    // pm.expect(jsonData.data.items).to.deep.include(closure);",
                  "    ",
                  "    var payment =  {",
                  "        \"id\": \"payment\",",
                  "        \"label\": \"Automatic Payment\",",
                  "        \"plural\": \"Automatic Payments\",",
                  "        \"recipient\": \"Payee\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future automatic payments from your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(payment);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{targets_postfix}}",
            "description": "Tests out the GET /types/targets method"
          },
          "response": []
        },
        {
          "_postman_id": "1a2f76d3-b8e7-4bcb-9141-d43e26dd8c9e",
          "name": "Statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8e44a28-5fe4-4ea6-930c-4c04cc4ec17b",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 9 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(9);",
                  "   pm.expect(jsonData.data.items).to.have.length(9);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#statuses'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var ready = {",
                  "        \"id\": \"ready\",",
                  "        \"label\": \"Ready\",",
                  "        \"help\": \"The switch is ready to submit for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(ready);",
                  "",
                  "    var incomplete = {",
                  "        \"id\": \"incomplete\",",
                  "        \"label\": \"Incomplete\",",
                  "        \"help\": \"The switch is missing information required for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(incomplete);",
                  "",
                  "    var canceled =  {",
                  "        \"id\": \"canceled\",",
                  "        \"label\": \"Canceled\",",
                  "        \"help\": \"The switch has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(canceled);",
                  "    ",
                  "    var submitted =  {",
                  "        \"id\": \"submitted\",",
                  "        \"label\": \"Submitted\",",
                  "        \"help\": \"The switch has been submitted for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submitted);",
                  "    ",
                  "    var printed =  {",
                  "        \"id\": \"printed\",",
                  "        \"label\": \"Printed\",",
                  "        \"help\": \"The switch has been printed for signature and/or in-person delivery.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printed);",
                  "    ",
                  "    var inprocess =  {",
                  "        \"id\": \"processing\",",
                  "        \"label\": \"In Process\",",
                  "        \"help\": \"The switch is currently being processed by our fulfillment team.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(inprocess);",
                  "    ",
                  "    var sent =  {",
                  "        \"id\": \"sent\",",
                  "        \"label\": \"Sent\",",
                  "        \"help\": \"The switch has been sent to the company or govt. agency for action.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(sent);",
                  "    ",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"The company or govt. agency has acknowledged that the change has been completed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var unableToProcess =  {",
                  "        \"id\": \"unabletoprocess\",",
                  "        \"label\": \"Unable To Process\",",
                  "        \"help\": \"The switch is unable to be processed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(unableToProcess);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{statuses_postfix}}",
            "description": "Testing the GET /types/switch/statuses route"
          },
          "response": []
        },
        {
          "_postman_id": "f9d48576-d42a-4b77-9d89-c02346deb0a1",
          "name": "Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1222fd5-574a-49f2-8e41-28ba860c57a2",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has the correct 8 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(8);",
                  "   pm.expect(jsonData.data.items).to.have.length(8);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#actions'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var save = {",
                  "        \"id\": \"save\",",
                  "        \"label\": \"Save\",",
                  "        \"help\": \"Saves a switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(save);",
                  "    ",
                  "    var submit = {",
                  "        \"id\": \"submit\",",
                  "        \"label\": \"Submit\",",
                  "        \"help\": \"Submit the switch for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submit);",
                  "",
                  "    var cancel = {",
                  "        \"id\": \"cancel\",",
                  "        \"label\": \"Cancel\",",
                  "        \"help\": \"Cancel the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(cancel);",
                  "",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"You've taken the steps to make this change online or in person, so mark it complete.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var print =  {",
                  "        \"id\": \"print\",",
                  "        \"label\": \"Print\",",
                  "        \"help\": \"Print the switch to sign or deliver in person.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(print);",
                  "    ",
                  "    var uncancel =  {",
                  "        \"id\": \"uncancel\",",
                  "        \"label\": \"Un-Cancel\",",
                  "        \"help\": \"Returns a canceled switch back to a state where it can be edited.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(uncancel);",
                  "    ",
                  "    var deleteAction =  {",
                  "        \"id\": \"delete\",",
                  "        \"label\": \"Delete\",",
                  "        \"help\": \"Deletes a switch that has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleteAction);",
                  "    ",
                  "    var reject = {",
                  "        \"id\": \"reject\",",
                  "        \"label\": \"Reject\",",
                  "        \"help\": \"Reject the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reject);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{actions_postfix}}",
            "description": "Tests for the GET /types/switches/actions route."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "b10b502f-0595-408f-9e4f-3943eb03b975",
      "name": "Customers",
      "description": "",
      "item": [
        {
          "_postman_id": "6a43c845-43bc-4dfd-96fe-a38139a01e45",
          "name": "Single Customer Single Account",
          "description": "",
          "item": [
            {
              "_postman_id": "b2f3dd3a-7d56-463b-a625-d2070a99f79f",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e24fb2ce-6e19-4459-a50c-5650e871ca2e",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f055ce6c-3411-4aaf-9a17-a33aabfd356e",
          "name": "Update Customer",
          "description": "",
          "item": [
            {
              "_postman_id": "d4825af1-9ac6-440a-b960-baf9485d85c6",
              "name": "Update Customer Rename Values",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9a038138-eb6f-4b14-b2e5-179c9eee29f8",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Janee\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"000\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        },\n        {\n        \"firstName\": \"Janee\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "1a094cb6-b153-4146-be88-f931078db96c",
              "name": "Update Customer Remove Account",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49b6b0a9-d1b4-41f9-bc2a-d3769d038f42",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Janee\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        },\n        {\n        \"firstName\": \"Janee\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "383f7111-c323-40d7-a758-c94c8a0048bf",
              "name": "Update Customer Remove Account Holder",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d60407d5-79ab-4a79-b344-89b329854db9",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "e5266828-cab5-4004-a716-e104fd5371f5",
          "name": "Get Customer",
          "description": "",
          "item": [
            {
              "_postman_id": "8f414dc1-24a8-4fdc-84d9-4bfd7d55ef2b",
              "name": "Get Created Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d40ec821-4cda-48e5-b55f-20df63dbf145",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "  {\n    \"email\": \"{{customer_email}}@clickswitch.com\",\n    \"phoneNumber\": \"2183309148\",\n    \"metadata\": {\n      \"employee_id\": \"jsmith\",\n      \"branch\": \"21\"\n    },\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"John\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"Jane\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"212345678900\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n        \"line1\": \"129 Main St.\",\n        \"city\": \"Metropolis\",\n        \"zip\": \"37484\",\n        \"state\": \"DE\",\n        \"country\": \"US\"\n        }\n    ]\n  } \n \n"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d4de1479-35cb-4093-8525-36939311ef8f",
          "name": "Single Customer Two Accounts",
          "description": "",
          "item": [
            {
              "_postman_id": "24374036-0d43-4a1d-8432-968b57e02652",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ebf80c62-47a6-4bc2-8410-28596183eefe",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4a44cfc2-7332-4b17-aceb-9d308b066e46",
          "name": "Joint Customer Single Account",
          "description": "",
          "item": [
            {
              "_postman_id": "65c6edd2-7cac-45ec-8e57-3e1c3afa61b0",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9dc534b5-53d2-4e0d-bc0e-9305bd8f08e7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8b1619f1-3291-4e25-a7ba-56efbc384834",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "es-es",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c5559167-37bb-4104-a47b-b6464c8dd396",
          "name": "Joint Customer Two Accounts",
          "description": "",
          "item": [
            {
              "_postman_id": "8764422c-5c05-4600-9aa8-fcec7668f185",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fd0ed89-ce20-4361-9fbb-944873615ee7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "936f16e0-137b-4270-9887-098cb4576f5a",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "f359ecb9-c546-4149-9d89-fa6687133697",
      "name": "Targets Copy",
      "description": "",
      "item": [
        {
          "_postman_id": "d3fd99c8-7f5d-447c-a60c-b408eedb0f1a",
          "name": "Deposits",
          "description": "",
          "item": [
            {
              "_postman_id": "44197ad8-446c-4661-9561-f8bf87d4d739",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "ab1b8835-9ea3-4107-8e3a-592a77c2fbd7",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c33ce017-b405-44ec-b93a-a14b6ac1a062",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "fb890a1c-5e74-4d23-bfd2-294d6ff02161",
          "name": "Deposits Print Only",
          "description": "",
          "item": [
            {
              "_postman_id": "f937f879-dd3d-41a1-bae8-12e275cb127e",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a026d7c-53d9-417c-a1a9-0cc5e523c9f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_print_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_print_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "98b568fb-d9ea-4f3c-aa3e-6eb1fa9332e2",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc35a7-dcc5-4588-a688-b3508d48835b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_print_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "2e0e9ae4-4e27-4e97-ab3c-72716eedf370",
          "name": "Deposits Online Only",
          "description": "",
          "item": [
            {
              "_postman_id": "df27c92b-ed6a-4c7f-9ab3-edc3fd2e4237",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96f36281-d983-4cd3-b650-56aef5c60e0c",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_online_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_online_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "7f72fad6-1c50-467e-8af2-92e0ede7282c",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5b905ea-437e-4b74-b222-56195e89a5f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_online_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c1e8e5e6-b14d-42ac-89db-a627084795f5",
          "name": "Payments",
          "description": "",
          "item": [
            {
              "_postman_id": "bb9a93d2-413b-4f62-b7bc-9188b34b1d3f",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47bd635b-41c3-4c34-9f84-4510d828b3c0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "85536a7c-f217-4a01-8c8e-1c378d68a19b",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d39ce6d2-62bb-489c-886f-84ac43e4a171",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Date to Withdraw funds\",",
                      "                \"label\": \"Date to Withdraw funds\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"city\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": \"stateProvince\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                        \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": \"zip\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^[0-9]{3,5}(?:-[0-9]{4})?$\",",
                      "                        \"validationMessage\": \"Must be in the format 000-000, 00000 or 00000-0000\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Company Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4b3ad8ee-2a75-4ba5-a8b6-3dad3aa7820d",
          "name": "Payments Print Only",
          "description": "",
          "item": [
            {
              "_postman_id": "65dfb559-9ece-4a1c-a825-0e23b7b781b9",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bda6b21d-4ac8-4bf0-84ca-5a5b57d7905b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_print_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_print_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "a73c2172-b929-452f-996a-e657c4eb341b",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07506d96-e05e-45ee-8898-a97617d7aa36",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Date to Withdraw funds\",",
                      "                \"label\": \"Date to Withdraw funds\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Line1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Line2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Line3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"city\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": \"stateProvince\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                        \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": \"zip\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^[0-9]{3,5}(?:-[0-9]{4})?$\",",
                      "                        \"validationMessage\": \"Must be in the format 000-000, 00000 or 00000-0000\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Company Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_print_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b58508c4-1567-4c52-83cb-2101ff69fd7a",
          "name": "Payments Online Only",
          "description": "",
          "item": [
            {
              "_postman_id": "1fc4a6ef-7c1f-4e7e-9df1-3bca5f3fdf1d",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e64aea4-1175-4ff1-ad86-1a0886f45ec0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payments_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_online_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_online_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "76e00f2d-8143-4312-9b68-d560d3f1435a",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76f0cfa0-2c33-4ebf-a49b-349cd95ff332",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payments_online_target_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d5d70d89-ed1b-4945-9907-3d21e5ae34aa",
          "name": "Locations",
          "description": "",
          "item": [
            {
              "_postman_id": "69525eb6-e783-4c5c-a6af-0e38be41efbb",
              "name": "Locations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "630ea39b-6b72-4ab0-ad19-9e8c68f90aa3",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has at least one item', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "       pm.expect(i).to.have.property('placeId');",
                      "       pm.expect(i).to.have.property('name');",
                      "       pm.expect(i).to.have.property('address');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('location'); ",
                      "});",
                      "",
                      "pm.environment.set(\"location_id\", jsonData.data.items[0].placeId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                  "host": [
                    "{{base_url}}{{locations_postfix}}"
                  ],
                  "query": [
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{location_name}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "c3314b94-bea8-42fb-992b-f8b5807a277d",
      "name": "Switches",
      "description": "",
      "item": [
        {
          "_postman_id": "4da611ff-6ff5-4d02-bd4d-ec34d4c36f6c",
          "name": "Deposits Using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "c151dafd-3e76-4e5e-a9e5-dcede376c6d7",
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2978f6e-492e-4ec0-97b3-a4c1dab6b703",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has empty array of switches', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "70206cd9-186f-4547-86d9-fcce5a8d682b",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31fb04af-69f4-4a2a-bf6e-f66e36c394b8",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "465c8adc-e1bd-42e1-bf55-2d7cb747ef40",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae0b6c2d-901b-44e6-aa27-2c2d596e7ebc",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "e8ee96b6-c5c6-46d7-b28e-b7ea4a51c6ad",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eecd7a2-6215-4973-bf2f-bc27a15bc349",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"500\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"50\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\",",
                      "            \"Custom_Employee ID\": \"123\",",
                      "            \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": 500,\r\n      \"Custom_or Percentage of Pay (1 - 100)\": 50,\r\n      \"Custom_Last 4 of SSN\": 1234,\r\n      \"Custom_Employee ID\": 123,\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "eac740ea-5127-4afe-963d-881b35bf86df",
              "name": "Switch Action",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbbe4bf6-bc81-49df-9643-5f50951aa276",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "319e05de-d9c0-4361-9334-db6a83dce28b",
          "name": "Deposits using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "4f8dce67-bbb0-4298-ac65-41faadedc4db",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fe021ffd-af1c-445a-8f4b-47b5f7853d48",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"The last 4 digits of the SSN are required.\"",
                      "            },",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\",",
                      "                \"Notes is a required field.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*3607\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*6070\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Amount (in dollars)\",",
                      "                \"label\": \"Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Work Location\",",
                      "                \"label\": \"Work Location\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true,",
                      "                \"regex\": \"^(?!0000)\\\\d{4}$\"",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": null,",
                      "            \"name\": \"Dairy Queen Grill & Chill\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"307 Canal Park Drive\",",
                      "                \"city\": \"Duluth\",",
                      "                \"state\": \"MN\",",
                      "                \"zip\": \"55802\"",
                      "            },",
                      "            \"notes\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"Custom_Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Work Location\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{location_id}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"index\": 0,\n        \"SplitAmount\": \"100\",\n        \"SplitType\": \"percentage\"\n      }\n    ],\n    \"fields\": {\n    }\n  }\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "511ab744-d30c-4baf-8e6b-e73a95adfcbb",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6c72f59-605f-45bf-9616-7aa80c5c2651",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(0);",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"The last 4 digits of the SSN are required.\"",
                      "            },",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\",",
                      "                \"Notes is a required field.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*3607\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*6070\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Amount (in dollars)\",",
                      "                \"label\": \"Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Work Location\",",
                      "                \"label\": \"Work Location\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true,",
                      "                \"regex\": \"^(?!0000)\\\\d{4}$\"",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"category\": null,",
                      "            \"name\": \"Dairy Queen Grill & Chill\",",
                      "            \"mailingAddress\": {",
                      "                \"line1\": \"307 Canal Park Drive\",",
                      "                \"city\": \"Duluth\",",
                      "                \"state\": \"MN\",",
                      "                \"zip\": \"55802\"",
                      "            },",
                      "            \"notes\": null,",
                      "            \"phoneNumber\": null,",
                      "            \"website\": null,",
                      "            \"Custom_Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Work Location\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/2"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9a86cd63-aafc-4ddd-8a63-404070924387",
          "name": "Deposit using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "fb8664f7-ddb4-4dbe-8d45-dee54e2305a3",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "625441a3-f75e-490c-b279-418941ac452a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "57001286-a5a8-4a6f-a806-3f4d879a5db0",
          "name": "Payments using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "5b9bc6f7-4a94-428c-a44e-9729fca27489",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "86d2b12d-b6dd-468d-b00b-1da072371df5",
          "name": "Payments using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "b804de6d-7886-4397-90d2-84720701f99b",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "1d0b8eb8-f69b-466f-a483-62c04fec5be6",
          "name": "Payments using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "0d063a60-74d1-4868-a98a-8f95803bae0e",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}