{
  "info": {
    "_postman_id": "1dcea77f-1205-444a-8316-1e06856a07e4",
    "name": "Smoke Tests",
    "description": "A collection of tests that hit all the QA endpoints with some tests that ensure the API is up and working. These tests don't test complicated business logic but rather ensure that the correct response types and lengths are being returned.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "625d0173-fa7d-43dd-a584-8e4e1db380a3",
      "name": "Types",
      "description": "",
      "item": [
        {
          "_postman_id": "bb76a0d1-babc-4d19-9197-1c6f23ccece7",
          "name": "Targets",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4cfeaf-9bbf-487b-8c62-5a5bf68afc00",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 2 items', function() {",
                  "    pm.expect(jsonData.data.currentItemCount).to.eql(2);",
                  "    pm.expect(jsonData.data.items).to.have.length(2);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var deposit = {",
                  "        \"id\": \"deposit\",",
                  "        \"label\": \"Direct Deposit\",",
                  "        \"plural\": \"Direct Deposits\",",
                  "        \"recipient\": \"Depositor\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future direct deposits to your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deposit);",
                  "",
                  "    //TODO: Add this test back in once we enable account closures again.",
                  "    // var closure =  {",
                  "    //     \"id\": \"closure\",",
                  "    //     \"label\": \"Account Closure\",",
                  "    //     \"plural\": \"Account Closures\",",
                  "    //     \"recipient\": \"Financial Instituion\",",
                  "    //     \"help\": \"Instructions to a company to close an account that you no longer need.\"",
                  "    // };",
                  "    // pm.expect(jsonData.data.items).to.deep.include(closure);",
                  "    ",
                  "    var payment =  {",
                  "        \"id\": \"payment\",",
                  "        \"label\": \"Automatic Payment\",",
                  "        \"plural\": \"Automatic Payments\",",
                  "        \"recipient\": \"Payee\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future automatic payments from your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(payment);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{targets_postfix}}",
            "description": "Tests out the GET /types/targets method"
          },
          "response": []
        },
        {
          "_postman_id": "ea6e5b8c-c936-42c1-a38c-68285af8b94b",
          "name": "Statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8e44a28-5fe4-4ea6-930c-4c04cc4ec17b",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 9 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(9);",
                  "   pm.expect(jsonData.data.items).to.have.length(9);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#statuses'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var ready = {",
                  "        \"id\": \"ready\",",
                  "        \"label\": \"Ready\",",
                  "        \"help\": \"The switch is ready to submit for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(ready);",
                  "",
                  "    var incomplete = {",
                  "        \"id\": \"incomplete\",",
                  "        \"label\": \"Incomplete\",",
                  "        \"help\": \"The switch is missing information required for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(incomplete);",
                  "",
                  "    var canceled =  {",
                  "        \"id\": \"canceled\",",
                  "        \"label\": \"Canceled\",",
                  "        \"help\": \"The switch has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(canceled);",
                  "    ",
                  "    var submitted =  {",
                  "        \"id\": \"submitted\",",
                  "        \"label\": \"Submitted\",",
                  "        \"help\": \"The switch has been submitted for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submitted);",
                  "    ",
                  "    var printed =  {",
                  "        \"id\": \"printed\",",
                  "        \"label\": \"Printed\",",
                  "        \"help\": \"The switch has been printed for signature and/or in-person delivery.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printed);",
                  "    ",
                  "    var inprocess =  {",
                  "        \"id\": \"processing\",",
                  "        \"label\": \"In Process\",",
                  "        \"help\": \"The switch is currently being processed by our fulfillment team.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(inprocess);",
                  "    ",
                  "    var sent =  {",
                  "        \"id\": \"sent\",",
                  "        \"label\": \"Sent\",",
                  "        \"help\": \"The switch has been sent to the company or govt. agency for action.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(sent);",
                  "    ",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"The company or govt. agency has acknowledged that the change has been completed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var unableToProcess =  {",
                  "        \"id\": \"unabletoprocess\",",
                  "        \"label\": \"Unable To Process\",",
                  "        \"help\": \"The switch is unable to be processed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(unableToProcess);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{statuses_postfix}}",
            "description": "Testing the GET /types/switch/statuses route"
          },
          "response": []
        },
        {
          "_postman_id": "5204345b-a644-4026-ac12-ca88c67ac237",
          "name": "Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1222fd5-574a-49f2-8e41-28ba860c57a2",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has the correct 8 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(8);",
                  "   pm.expect(jsonData.data.items).to.have.length(8);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#actions'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var save = {",
                  "        \"id\": \"save\",",
                  "        \"label\": \"Save\",",
                  "        \"help\": \"Saves a switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(save);",
                  "    ",
                  "    var submit = {",
                  "        \"id\": \"submit\",",
                  "        \"label\": \"Submit\",",
                  "        \"help\": \"Submit the switch for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submit);",
                  "",
                  "    var cancel = {",
                  "        \"id\": \"cancel\",",
                  "        \"label\": \"Cancel\",",
                  "        \"help\": \"Cancel the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(cancel);",
                  "",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"You've taken the steps to make this change online or in person, so mark it complete.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var print =  {",
                  "        \"id\": \"print\",",
                  "        \"label\": \"Print\",",
                  "        \"help\": \"Print the switch to sign or deliver in person.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(print);",
                  "    ",
                  "    var uncancel =  {",
                  "        \"id\": \"uncancel\",",
                  "        \"label\": \"Un-Cancel\",",
                  "        \"help\": \"Returns a canceled switch back to a state where it can be edited.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(uncancel);",
                  "    ",
                  "    var deleteAction =  {",
                  "        \"id\": \"delete\",",
                  "        \"label\": \"Delete\",",
                  "        \"help\": \"Deletes a switch that has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleteAction);",
                  "    ",
                  "    var reject = {",
                  "        \"id\": \"reject\",",
                  "        \"label\": \"Reject\",",
                  "        \"help\": \"Reject the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reject);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{actions_postfix}}",
            "description": "Tests for the GET /types/switches/actions route."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "1dcf975c-88b0-47eb-85db-2b16ac0fb5fe",
      "name": "Customers",
      "description": "",
      "item": [
        {
          "_postman_id": "44e7ab8f-f96a-4e3b-9e25-8b8fb4b4c804",
          "name": "Single Customer Single Account",
          "description": "",
          "item": [
            {
              "_postman_id": "4247dec7-dc8d-4d2a-b472-e392db08fe8c",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "55709a1c-6bb1-4ee6-8f21-a7bd3dfad053",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   // TODO: This should be length one. Bug has been reported",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802     \",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3eb8601e-33ca-4ac1-8e41-818f571e3350",
          "name": "Update Customer",
          "description": "",
          "item": [
            {
              "_postman_id": "8e648284-230a-408b-a27b-56ec4a13dddc",
              "name": "Update Customer Rename Values",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7b21b4ba-2d2d-4618-b6ae-75c7a1c91209",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Janee\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"000\";",
                      "    account2.type = pm.environment.get(\"savings\");",
                      "    account2.name = pm.environment.get(\"savings\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833     \",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        },\n        {\n        \"firstName\": \"Janee\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings}}\",\n        \"name\": \"{{savings}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "cd187d4b-e192-4d19-ac02-7dc994dadc0f",
              "name": "Update Customer Remove Account",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "129376dd-0225-4685-93ac-ed476acd6b3d",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Janee\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833     \",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        },\n        {\n        \"firstName\": \"Janee\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "2c247541-3340-4ff2-a2c8-d76f1dae1912",
              "name": "Update Customer Remove Account Holder",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "158f6f66-e356-4769-982d-4a5a9e24d2d6",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833     \",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Johnn\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Doee\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "0c138cc9-17db-4df1-b23d-f863efce247c",
          "name": "Get Customer",
          "description": "",
          "item": [
            {
              "_postman_id": "8752aab8-5a55-46ea-b1e8-410d5f40a7cf",
              "name": "Get Created Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "78f56a8b-0a79-4406-b0ac-f9131815b367",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Johnn\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Doee\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833     \",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "  {\n    \"email\": \"{{customer_email}}@clickswitch.com\",\n    \"phoneNumber\": \"2183309148\",\n    \"metadata\": {\n      \"employee_id\": \"jsmith\",\n      \"branch\": \"21\"\n    },\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"John\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"Jane\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"212345678900\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n        \"line1\": \"129 Main St.\",\n        \"city\": \"Metropolis\",\n        \"zip\": \"37484\",\n        \"state\": \"DE\",\n        \"country\": \"US\"\n        }\n    ]\n  } \n \n"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "aa56b49e-f01a-4455-861d-99ad13051374",
          "name": "Single Customer Two Accounts",
          "description": "",
          "item": [
            {
              "_postman_id": "250b70c9-5e61-47e6-8a54-e3e0bda9e974",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "74edfd6e-6d07-405d-bef7-25dec2b9573b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   // TODO: This should be length one. Bug has been reported",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings\");",
                      "    account2.name = pm.environment.get(\"savings\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802     \",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings}}\",\n        \"name\": \"{{savings}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9a99dfb9-ae15-411a-9c0e-7b5563cd4e49",
          "name": "Joint Customer Single Account",
          "description": "",
          "item": [
            {
              "_postman_id": "07921b4e-ad10-409a-a613-cfda99aa8d70",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9dc534b5-53d2-4e0d-bc0e-9305bd8f08e7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fcf4c02-747b-41eb-9323-e4981f0a02f2",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802     \",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "es-es",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "0a5d9970-8edb-4be0-a14f-381d1a4205f3",
          "name": "Joint Customer Two Accounts",
          "description": "",
          "item": [
            {
              "_postman_id": "419a43f4-4196-4fd6-b1ac-01976683bcd3",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fd0ed89-ce20-4361-9fbb-944873615ee7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "876988b2-f97a-41b4-aa21-20f2ccd04104",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Doe\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking\");",
                      "    account.name = pm.environment.get(\"checking\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings\");",
                      "    account2.name = pm.environment.get(\"savings\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802     \",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "es-es",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings}}\",\n        \"name\": \"{{savings}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "c7504a3c-dca1-421f-a2cf-076c846d3412",
      "name": "Targets",
      "description": "",
      "item": [
        {
          "_postman_id": "be9bb97d-395c-4148-a460-1ebb2252bccb",
          "name": "Deposits",
          "description": "",
          "item": [
            {
              "_postman_id": "50fdcf09-b7cd-4559-abbd-9067dcd70935",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c574df45-d927-42ec-aa46-29f5b201f088",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_target\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name=1p1&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p1",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "edf41db6-ff74-4460-98f9-36863a8c7ef0",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9807898-5c8d-4219-a21d-f28b84e65a1e",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "02c13b7a-aca7-4e7e-bf5b-2afe9b966bc5",
          "name": "Deposits Print Only",
          "description": "",
          "item": [
            {
              "_postman_id": "56eabe78-0b4a-4664-bd1a-fb54989a89c1",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7b28d6d-d353-4922-8a72-0fe0f50193c4",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_print_target\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name=1p2&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p2",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "90d1dbdb-9419-481d-9dc2-e4fcd62671a8",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "065d474c-70c9-4840-970f-6a92ed455a61",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_print_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "7f347c95-11e1-4d3b-b761-f80c238b01a4",
          "name": "Deposits Online Only",
          "description": "",
          "item": [
            {
              "_postman_id": "f9e7a3e0-c7f0-4946-950e-cbe5a5ab703d",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "817947c8-a7ef-4fd4-bdd3-12124a358e9e",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_online_target\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name=1p3&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p3",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "fdf87439-6e2b-4f07-892e-8a21e84a0f2f",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7905d81-f254-473c-8360-cb28580cd160",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"required\": false,",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_online_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "50ac8490-3d62-4df2-ad0a-687342e18499",
          "name": "Payments",
          "description": "",
          "item": [
            {
              "_postman_id": "fefcef07-17df-400a-8bdb-2fb77c6da78e",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a603aa7-c62e-4f5e-bb15-4a8159dab2f9",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_target\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.environment.get(\"variable_key\");"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name=1p4&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p4",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "0585a16c-7a8a-4fd2-bf52-fe3f2846a875",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "722b0a5e-5237-4810-a0f4-a6e4766a29b7",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Date to Withdraw funds\",",
                      "                \"label\": \"Date to Withdraw funds\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Street Address 1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Street Address 2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Street Address 3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": \"State\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                        \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": \"Zip\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^[0-9]{3,5}(?:-[0-9]{4})?$\",",
                      "                        \"validationMessage\": \"Must be in the format 000-000, 00000 or 00000-0000\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Company Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "72c58821-fe0a-4120-b541-707ff667934c",
          "name": "Payments Print Only",
          "description": "",
          "item": [
            {
              "_postman_id": "13e1f955-7e92-4412-bcae-684386222cdf",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3556ed62-0a4b-4270-9945-407bb94d7462",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_print_target\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.environment.get(\"variable_key\");"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name=1p5&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p5",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "c45ae8f0-d025-4855-af8b-a98a888485cf",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "185158d5-5fb1-42cf-92f7-1a08c74acb1c",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Date to Withdraw funds\",",
                      "                \"label\": \"Date to Withdraw funds\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_ContactServiceAddress\",",
                      "                \"label\": \"Service Address\",",
                      "                \"type\": \"composite\",",
                      "                \"required\": true,",
                      "                \"fields\": [",
                      "                    {",
                      "                        \"key\": \"line1\",",
                      "                        \"label\": \"Street Address 1\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line2\",",
                      "                        \"label\": \"Street Address 2\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"line3\",",
                      "                        \"label\": \"Street Address 3\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": false",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"city\",",
                      "                        \"label\": \"City\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"state\",",
                      "                        \"label\": \"State\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                        \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"zip\",",
                      "                        \"label\": \"Zip\",",
                      "                        \"type\": \"textbox\",",
                      "                        \"required\": true,",
                      "                        \"regex\": \"^[0-9]{3,5}(?:-[0-9]{4})?$\",",
                      "                        \"validationMessage\": \"Must be in the format 000-000, 00000 or 00000-0000\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"Switch_BillingAccountNumber\",",
                      "                \"label\": \"Company Account Number\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_print_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d181ab3d-8818-4308-b0ab-f2841e8f3d5c",
          "name": "Payments Online Only",
          "description": "",
          "item": [
            {
              "_postman_id": "b4bb2dd3-d577-40a7-8563-045cfcc7d2a3",
              "name": "Targets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e91f5a77-d5e8-46f4-b99a-0ab0e53e1ee4",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payments_online_target\", jsonData.data.items[0].targetId);",
                      "",
                      "pm.environment.get(\"variable_key\");"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name=1p6&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "1p6",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "78f606fa-5594-4535-8010-daf07a1e8fa6",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9501e92f-41ef-4f65-a6b1-dede68b43145",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\",",
                      "        \"required\": false",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"required\": false,",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payments_online_target}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b1a85b7d-5240-4d8c-91ec-57bca0f5b497",
          "name": "Locations",
          "description": "",
          "item": [
            {
              "_postman_id": "e8282989-6f36-430b-a0ec-64481a2eee57",
              "name": "Locations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "630ea39b-6b72-4ab0-ad19-9e8c68f90aa3",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has at least one item', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "       pm.expect(i).to.have.property('placeId');",
                      "       pm.expect(i).to.have.property('name');",
                      "       pm.expect(i).to.have.property('address');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('location'); ",
                      "});",
                      "",
                      "pm.environment.set(\"location_id\", jsonData.data.items[0].placeId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name=Dairy Queen",
                  "host": [
                    "{{base_url}}{{locations_postfix}}"
                  ],
                  "query": [
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "Dairy Queen",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "28b955e1-8f74-47ef-8bf8-a875c33492a4",
      "name": "Switches",
      "description": "",
      "item": [
        {
          "_postman_id": "9dd63b75-4b33-457e-b54d-e9c37688d2b4",
          "name": "Deposits Using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "b13d4ce1-f214-49fd-b443-60f894361009",
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2978f6e-492e-4ec0-97b3-a4c1dab6b703",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has empty array of switches', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "e36cfdbb-fab0-463f-a469-5bad96935344",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d788e662-47c3-4bca-93f3-c9967c69b0e3",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "82d12cd8-d258-4c56-8cf4-d4f94638be00",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684fc1b-0aea-47f0-a871-5fdc6231256d",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "c8594513-535b-4093-b72e-8293c587b7a9",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "726a11b0-bc59-4efe-bb5f-78d9adad1868",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"500\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"50\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\",",
                      "            \"Custom_Employee ID\": \"123\",",
                      "            \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": 500,\r\n      \"Custom_or Percentage of Pay (1 - 100)\": 50,\r\n      \"Custom_Last 4 of SSN\": 1234,\r\n      \"Custom_Employee ID\": 123,\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "0de9b5a3-d30b-42ad-9d4d-76cf9ce8c8f8",
              "name": "Switch Action",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbbe4bf6-bc81-49df-9643-5f50951aa276",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "0e2da2e5-1759-4a1d-be44-7910c4ad80f2",
          "name": "Deposits using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "d3f63e5e-9e90-460e-9e3e-9a22126b3441",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "379749fe-0440-4cff-bbe6-3aeb7efdd088",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{location_id}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"key\": 0,\n        \"SplitAmount\": \"100\",\n        \"SplitType\": \"percentage\"\n      }\n    ],\n    \"fields\": {\n    }\n  }\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c2f7c4db-00e3-413f-aa3b-7fda6deffa1a",
          "name": "Payments using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "4c8467f3-332d-4f0d-a913-5e8843fd9851",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "5cead2b9-7321-47fe-86da-404de2fe761e",
          "name": "Payments using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "d6da40c7-38b5-4da8-bba6-c4763356e31e",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c5a747cc-d887-485e-936b-771768c70e8c",
          "name": "Payments using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "4442e752-17b1-4355-ac3a-2ed382a2ff6b",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c30721fa-40a1-492f-b134-19a3a084c266",
          "name": "Deposit using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "1f346d20-dc0a-4103-adc5-22f55c14f62d",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "d45b4ecf-897b-4c99-b47f-e1c1fc21a34d",
      "name": "Switches Copy",
      "description": "",
      "item": [
        {
          "_postman_id": "5797da3a-8cb1-48e2-817c-6456cf47fced",
          "name": "Deposits Using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "5fbbdfba-3ee8-47db-9c64-3eb8995a4993",
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2978f6e-492e-4ec0-97b3-a4c1dab6b703",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has empty array of switches', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "c76d75f2-2fc8-43aa-99ac-8724dc1eda45",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d788e662-47c3-4bca-93f3-c9967c69b0e3",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "d5d4687a-841a-4490-a0bf-c0cde869ecb4",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684fc1b-0aea-47f0-a871-5fdc6231256d",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "0fda59bc-8706-477c-8c2e-33c3cf784609",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "726a11b0-bc59-4efe-bb5f-78d9adad1868",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"A signature is required.\",",
                      "                \"Esign consent is required.\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 0,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"key\": 0,",
                      "                    \"label\": \"*8501\"",
                      "                },",
                      "                {",
                      "                    \"key\": 1,",
                      "                    \"label\": \"*5010\"",
                      "                }",
                      "            ],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    ux.accounts.choices[0].label = accountName1;",
                      "    ux.accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values ={",
                      "        \"accounts\": [",
                      "            {",
                      "                \"key\": 0,",
                      "                \"fields\": {",
                      "                    \"fields\": {}",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"500\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"50\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\",",
                      "            \"Custom_Employee ID\": \"123\",",
                      "            \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": 500,\r\n      \"Custom_or Percentage of Pay (1 - 100)\": 50,\r\n      \"Custom_Last 4 of SSN\": 1234,\r\n      \"Custom_Employee ID\": 123,\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "1859c544-ba9b-41d6-90f2-53847cb0d77f",
              "name": "Switch Action",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbbe4bf6-bc81-49df-9643-5f50951aa276",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "15c7596c-08c5-476e-ae06-852a4cdb0c8c",
          "name": "Deposits using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "508ae94e-85e3-4888-b856-cc0ac14a8fff",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "379749fe-0440-4cff-bbe6-3aeb7efdd088",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{location_id}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"key\": 0,\n        \"SplitAmount\": \"100\",\n        \"SplitType\": \"percentage\"\n      }\n    ],\n    \"fields\": {\n    }\n  }\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "24da7136-5a2e-4d04-a3ae-4b7f3e6713cc",
          "name": "Payments using TargetId",
          "description": "",
          "item": [
            {
              "_postman_id": "89e59e5f-ce93-4abf-8a00-a24b327a16a9",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "12a09a41-6d77-4af8-9053-ed142b6067aa",
          "name": "Payments using LocationId",
          "description": "",
          "item": [
            {
              "_postman_id": "a856464e-1927-494b-93d7-cd56f42cd962",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "8ff33918-835b-48da-ba63-36c6b9e15bc0",
          "name": "Payments using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "53248a01-2fcf-44a2-a6b9-b61dd1f64520",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "fc6ac3a2-ea64-4532-87b2-930d25cd0a2b",
          "name": "Deposit using neither",
          "description": "",
          "item": [
            {
              "_postman_id": "2993c2e9-e9fa-4881-abc7-ff6211e46021",
              "name": "Create Switch",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"key\": 0,\r\n        \"SplitAmount\": \"100\",\r\n        \"SplitType\": \"percentage\"\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}