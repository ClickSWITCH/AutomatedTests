{
  "info": {
    "_postman_id": "ee9effda-3b97-4867-9291-7b4f0b64dcb1",
    "name": "Full Regression Test Suite",
    "description": "A collection of tests that hit all the V3 API endpoints to ensure the API is functioning properly. The requests are split into 4 folders: Types, Customers, Targets, and Switches. The tests must be run in the order displayed here to function properly. Currently there are **93** requests and **509** tests in this collection.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "4d4f9441-b552-4370-85cc-7b8b3edbc841",
      "name": "Types",
      "description": "Folder containing the tests for the GET `/types/targets`, `/types/switch/statuses`, and `/types/switch/actions` routes.",
      "item": [
        {
          "_postman_id": "5365bb1c-dc2d-45d4-8f29-e931dadf9bad",
          "name": "Targets",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 2 items', function() {",
                  "    pm.expect(jsonData.data.currentItemCount).to.eql(2);",
                  "    pm.expect(jsonData.data.items).to.have.length(2);",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var deposit = {",
                  "        \"id\": \"deposit\",",
                  "        \"label\": \"Direct Deposit\",",
                  "        \"plural\": \"Direct Deposits\",",
                  "        \"recipient\": \"Depositor\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future direct deposits to your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deposit);",
                  "",
                  "    //TODO: Add this test back in once we enable account closures again.",
                  "    // var closure =  {",
                  "    //     \"id\": \"closure\",",
                  "    //     \"label\": \"Account Closure\",",
                  "    //     \"plural\": \"Account Closures\",",
                  "    //     \"recipient\": \"Financial Instituion\",",
                  "    //     \"help\": \"Instructions to a company to close an account that you no longer need.\"",
                  "    // };",
                  "    // pm.expect(jsonData.data.items).to.deep.include(closure);",
                  "    ",
                  "    var payment =  {",
                  "        \"id\": \"payment\",",
                  "        \"label\": \"Automatic Payment\",",
                  "        \"plural\": \"Automatic Payments\",",
                  "        \"recipient\": \"Payee\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future automatic payments from your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(payment);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{targets_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/targets` endpoint is returning the correct values."
          },
          "response": []
        },
        {
          "_postman_id": "74e05ddd-aeb3-4699-8593-00440f39196b",
          "name": "Statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 9 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(10);",
                  "   pm.expect(jsonData.data.items).to.have.length(10);",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "})",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#statuses'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var ready = {",
                  "        \"id\": \"ready\",",
                  "        \"label\": \"Ready\",",
                  "        \"help\": \"The switch is ready to submit for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(ready);",
                  "",
                  "    var incomplete = {",
                  "        \"id\": \"incomplete\",",
                  "        \"label\": \"Incomplete\",",
                  "        \"help\": \"The switch is missing information required for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(incomplete);",
                  "",
                  "    var canceled =  {",
                  "        \"id\": \"canceled\",",
                  "        \"label\": \"Canceled\",",
                  "        \"help\": \"The switch has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(canceled);",
                  "    ",
                  "    var submitted =  {",
                  "        \"id\": \"submitted\",",
                  "        \"label\": \"Submitted\",",
                  "        \"help\": \"The switch has been submitted for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submitted);",
                  "    ",
                  "    var printed =  {",
                  "        \"id\": \"printed\",",
                  "        \"label\": \"Printed\",",
                  "        \"help\": \"The switch has been printed for signature and/or in-person delivery.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printed);",
                  "    ",
                  "    var inprocess =  {",
                  "        \"id\": \"processing\",",
                  "        \"label\": \"In Process\",",
                  "        \"help\": \"The switch is currently being processed by our fulfillment team.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(inprocess);",
                  "    ",
                  "    var sent =  {",
                  "        \"id\": \"sent\",",
                  "        \"label\": \"Sent\",",
                  "        \"help\": \"The switch has been sent to the company or govt. agency for action.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(sent);",
                  "    ",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"The company or govt. agency has acknowledged that the change has been completed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var unableToProcess =  {",
                  "        \"id\": \"unabletoprocess\",",
                  "        \"label\": \"Unable To Process\",",
                  "        \"help\": \"The switch is unable to be processed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(unableToProcess);",
                  "    ",
                  "    var deleted =  {",
                  "        \"id\": \"deleted\",",
                  "        \"label\": \"Deleted\",",
                  "        \"help\": \"The switch is deleted\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleted);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
          },
          "response": []
        },
        {
          "_postman_id": "17790f9b-fd9a-4b64-8777-349f39a7452e",
          "name": "Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74d90fde-2509-4451-a886-18647421cd78",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "})",
                  "",
                  "pm.test('Has the correct 8 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(12);",
                  "   pm.expect(jsonData.data.items).to.have.length(12);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#actions'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var save = {",
                  "        \"id\": \"http-put\",",
                  "        \"label\": \"Save\",",
                  "        \"help\": \"Saves a switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(save);",
                  "    ",
                  "    var submit = {",
                  "        \"id\": \"submit\",",
                  "        \"label\": \"Submit\",",
                  "        \"help\": \"Submit the switch for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submit);",
                  "",
                  "    var cancel = {",
                  "        \"id\": \"cancel\",",
                  "        \"label\": \"Cancel\",",
                  "        \"help\": \"Cancel the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(cancel);",
                  "",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"You've taken the steps to make this change online or in person, so mark it complete.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var printformailing =  {",
                  "        \"id\": \"printformailing\",",
                  "        \"label\": \"Print For Mailing\",",
                  "        \"help\": \"Print this switch for mailing\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printformailing);",
                  "    ",
                  "    var print =  {",
                  "        \"id\": \"print\",",
                  "        \"label\": \"Print\",",
                  "        \"help\": \"Print the switch to sign or deliver in person.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(print);",
                  "    ",
                  "    var uncancel =  {",
                  "        \"id\": \"uncancel\",",
                  "        \"label\": \"Un-Cancel\",",
                  "        \"help\": \"Returns a canceled switch back to a state where it can be edited.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(uncancel);",
                  "    ",
                  "    var deleteAction =  {",
                  "        \"id\": \"http-delete\",",
                  "        \"label\": \"Delete\",",
                  "        \"help\": \"Deletes a switch that has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleteAction);",
                  "    ",
                  "    var startprocessing =  {",
                  "        \"id\": \"startprocessing\",",
                  "        \"label\": \"Start Processing\",",
                  "        \"help\": \"Start the processing of the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(startprocessing);",
                  "    ",
                  "    var reassign =  {",
                  "        \"id\": \"reassign\",",
                  "        \"label\": \"Reassign\",",
                  "        \"help\": \"Reassign the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reassign);",
                  "    ",
                  "    var mailreturned =  {",
                  "        \"id\": \"mailreturned\",",
                  "        \"label\": \"Mail Returned\",",
                  "        \"help\": \"Mail the returned switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(mailreturned);",
                  "    ",
                  "    var reject = {",
                  "        \"id\": \"reject\",",
                  "        \"label\": \"Reject\",",
                  "        \"help\": \"Reject the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reject);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}{{actions_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/actions` endpoint is returning the correct values."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "dd8028bf-3f82-4931-ba52-06946a25647f",
      "name": "Customers",
      "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
      "item": [
        {
          "_postman_id": "7d8159e6-0f81-4a2b-86d8-ec14c5ebd79f",
          "name": "Single Customer Single Account",
          "description": "Folder containing the test that creates a customer with a single account holder and a single account.",
          "item": [
            {
              "_postman_id": "9eba4e79-200d-4767-ac3f-21bb3c3c5fab",
              "name": "Create Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\");",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\");",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bab9f974-75c8-4842-b62a-e2a76d1cdfdc",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1d82a45a-23f0-4aa2-b48b-1361f377084e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "ec0a0720-ff46-411b-8257-63e0fe291075",
          "name": "Update Customer",
          "description": "Folder containing the tests that update the created customer by adding and removing account holders, accounts, and renaming customer fields.",
          "item": [
            {
              "_postman_id": "ea5b3828-087f-4f53-9390-28180f390af9",
              "name": "Update Customer Rename Values",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"000\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that renames some customer values, adds an account holder and an account to the customer."
              },
              "response": []
            },
            {
              "_postman_id": "c6c865d1-bff3-44af-8c6b-2feeaa996e40",
              "name": "Update Customer Remove Account",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "992025da-dba6-4a58-bb10-38a80e9a8724",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "   ",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that removes and account from the customer."
              },
              "response": []
            },
            {
              "_postman_id": "d273b75f-b7be-4460-931d-31ae12e44312",
              "name": "Update Customer Remove Account Holder",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2b1ed99f-d52e-45ca-8e52-96456a95c43f",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that removes an account holder from the customer."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3fd065c2-0ad1-4d2b-8970-8a0ea7d9ce59",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fbbefbfa-fbcf-4c1e-b738-6ef601e65352",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "370db5a0-5034-4be1-a8ae-e26045b4fdb0",
          "name": "Get Customer",
          "description": "Folder containing the test that GETs the customer to ensure the updates worked.",
          "item": [
            {
              "_postman_id": "990618ca-e52f-4e63-a3bc-5c919fec5e2c",
              "name": "Get Created Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1c252ce-7bd2-4213-8a9e-a59a58aff7f1",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e94fea3-2e95-40bd-8425-0bd21a7455ab",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "85ab5721-b166-48f1-9e36-9adf63bbe243",
          "name": "Single Customer Two Accounts",
          "description": "Folder containing the test that creates a customer containing one account holder and two accounts.",
          "item": [
            {
              "_postman_id": "fe35d92a-db8e-4db5-a6ad-41e53615784c",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "744d30ab-5c71-47e4-a9de-62f86d6ba104",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer containing one account holder and two accounts."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "888ec7f8-66d0-4050-89c9-51e7c9783fc7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c437c46a-b4da-46bc-a6fe-a7d1580cd1c5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "55f5439d-9967-4263-957e-557052e98618",
          "name": "Joint Customer Single Account",
          "description": "Folder containing the test that creates a customer with two account holders and a single account.",
          "item": [
            {
              "_postman_id": "530154e1-0cc5-4910-ae4b-a2c6800fe6c5",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9dc534b5-53d2-4e0d-bc0e-9305bd8f08e7",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "972411c0-ac98-44b5-b5d9-e6a5a15c609f",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\");",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\");",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer containing two account holders and a single account."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3e26dd8f-3644-4153-a852-4605951c691c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16157d8a-bb24-4521-9dd5-c84afcabb29b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4b7daf95-75fc-4743-9f35-1be19f30c9df",
          "name": "Joint Customer Two Accounts",
          "description": "Folder containing the test that creates a customer with two account holders and two accounts.",
          "item": [
            {
              "_postman_id": "5e35c877-c469-4f8c-953f-e37b220960f5",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fd0ed89-ce20-4361-9fbb-944873615ee7",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6d5da495-3091-4a5f-81f5-9191f441d2ef",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\");",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\");",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "    ",
                      "    address.zip = pm.environment.get('zip');",
                      "    address.state = pm.environment.get('state');",
                      "    address.country = pm.environment.get('country');",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer with two account holders and two accounts."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fa3918c7-e052-48de-a24f-e3e3ad7a9913",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c0b9dcf-198f-4136-816c-da0466b173c2",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "c9624546-933a-4544-88c1-1ace0f345c73",
      "name": "Targets",
      "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
      "item": [
        {
          "_postman_id": "979583b3-0ea8-484a-acd0-dc4e0216c98b",
          "name": "Deposits",
          "description": "Folder containing the tests that find a deposit target.",
          "item": [
            {
              "_postman_id": "673e85af-e1bb-417f-bb75-ce4e7c800200",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "aa54e0a5-4bbf-4a33-9b49-8d73c0832f2e",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux;",
                      "    if (!isCanada) {",
                      "        ux = {",
                      "            \"accounts\": {",
                      "                \"limit\": 1,",
                      "                \"maxChecking\": 1,",
                      "                \"maxSavings\": 1,",
                      "                \"choices\": [],",
                      "                \"fields\": []",
                      "            },",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                    \"label\": \"Net or Amount (in dollars)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                    \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                    \"label\": \"Depositor's Full Mailing Address\",",
                      "                    \"type\": \"composite\",",
                      "                    \"required\": true,",
                      "                    \"fields\": [",
                      "                        {",
                      "                            \"key\": \"line1\",",
                      "                            \"label\": \"Line1\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line2\",",
                      "                            \"label\": \"Line2\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line3\",",
                      "                            \"label\": \"Line3\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"city\",",
                      "                            \"label\": \"City\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"state\",",
                      "                            \"label\": \"State\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                            \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"zip\",",
                      "                            \"label\": \"Zip Code\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^\\\\d{5}(-\\\\d{4})?$\",",
                      "                            \"validationMessage\": \"Must be in the format 00000 or 00000-0000\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Employee ID\",",
                      "                    \"label\": \"Employee ID\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Last 4 of SSN\",",
                      "                    \"label\": \"Last 4 of SSN\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                }",
                      "            ]",
                      "        };",
                      "    } else {",
                      "        ux = {",
                      "            \"accounts\": {",
                      "                \"limit\": 1,",
                      "                \"maxChecking\": 1,",
                      "                \"maxSavings\": 1,",
                      "                \"choices\": [],",
                      "                \"fields\": []",
                      "            },",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                    \"label\": \"Net or Amount (in dollars)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                    \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                    \"label\": \"Depositor's Full Mailing Address\",",
                      "                    \"type\": \"composite\",",
                      "                    \"required\": true,",
                      "                    \"fields\": [",
                      "                        {",
                      "                            \"key\": \"line1\",",
                      "                            \"label\": \"Line1\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line2\",",
                      "                            \"label\": \"Line2\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line3\",",
                      "                            \"label\": \"Line3\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"city\",",
                      "                            \"label\": \"City\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"state\",",
                      "                            \"label\": \"Province\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(N[BLSTU]|[AMN]B|[BQ]C|ON|PE|SK)$\",",
                      "                            \"validationMessage\": \"Must be a valid 2 character Province or Territory code\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"zip\",",
                      "                            \"label\": \"Postal Code\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\",",
                      "                            \"validationMessage\": \"Must be a valid postal code\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Employee ID\",",
                      "                    \"label\": \"Employee ID\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Last 4 of SSN\",",
                      "                    \"label\": \"Last 4 of SSN\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                }",
                      "            ]",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}{{context_param}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "be29f6d7-7352-4e53-8498-08c5461f682b",
          "name": "Deposits Print Only",
          "description": "Folder containing the tests that find a print only deposit target.",
          "item": [
            {
              "_postman_id": "b301c7bb-e6d3-48f6-993e-eb43c591262a",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a026d7c-53d9-417c-a1a9-0cc5e523c9f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_print_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_print_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "20a17648-8ca0-4829-8799-fc720a1257e5",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc35a7-dcc5-4588-a688-b3508d48835b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux;",
                      "    if (!isCanada) {",
                      "        ux = {",
                      "            \"accounts\": {",
                      "                \"limit\": 1,",
                      "                \"maxChecking\": 1,",
                      "                \"maxSavings\": 1,",
                      "                \"choices\": [],",
                      "                \"fields\": []",
                      "            },",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                    \"label\": \"Net or Amount (in dollars)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                    \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                    \"label\": \"Depositor's Full Mailing Address\",",
                      "                    \"type\": \"composite\",",
                      "                    \"required\": true,",
                      "                    \"fields\": [",
                      "                        {",
                      "                            \"key\": \"line1\",",
                      "                            \"label\": \"Line1\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line2\",",
                      "                            \"label\": \"Line2\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line3\",",
                      "                            \"label\": \"Line3\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"city\",",
                      "                            \"label\": \"City\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"state\",",
                      "                            \"label\": \"State\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\",",
                      "                            \"validationMessage\": \"Must be a valid 2 character state code\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"zip\",",
                      "                            \"label\": \"Zip Code\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^\\\\d{5}(-\\\\d{4})?$\",",
                      "                            \"validationMessage\": \"Must be in the format 00000 or 00000-0000\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Employee ID\",",
                      "                    \"label\": \"Employee ID\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Last 4 of SSN\",",
                      "                    \"label\": \"Last 4 of SSN\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                }",
                      "            ]",
                      "        };",
                      "    } else {",
                      "        ux = {",
                      "            \"accounts\": {",
                      "                \"limit\": 1,",
                      "                \"maxChecking\": 1,",
                      "                \"maxSavings\": 1,",
                      "                \"choices\": [],",
                      "                \"fields\": []",
                      "            },",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                    \"label\": \"Net or Amount (in dollars)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                    \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                    \"label\": \"Depositor's Full Mailing Address\",",
                      "                    \"type\": \"composite\",",
                      "                    \"required\": true,",
                      "                    \"fields\": [",
                      "                        {",
                      "                            \"key\": \"line1\",",
                      "                            \"label\": \"Line1\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line2\",",
                      "                            \"label\": \"Line2\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"line3\",",
                      "                            \"label\": \"Line3\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": false",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"city\",",
                      "                            \"label\": \"City\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"state\",",
                      "                            \"label\": \"Province\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(N[BLSTU]|[AMN]B|[BQ]C|ON|PE|SK)$\",",
                      "                            \"validationMessage\": \"Must be a valid 2 character Province or Territory code\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"zip\",",
                      "                            \"label\": \"Postal Code\",",
                      "                            \"type\": \"textbox\",",
                      "                            \"required\": true,",
                      "                            \"regex\": \"^(?!.*[DFIOQU])[A-VXY]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d$\",",
                      "                            \"validationMessage\": \"Must be a valid postal code\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Employee ID\",",
                      "                    \"label\": \"Employee ID\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Last 4 of SSN\",",
                      "                    \"label\": \"Last 4 of SSN\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true",
                      "                }",
                      "            ]",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c0ffdb5-8dc3-457a-b310-abeb59957e26",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "495c4015-ece3-4c26-b205-2c9ff1a3dcd9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "79725a4a-ad73-4fc1-b734-90faf616fae0",
          "name": "Deposits Online Only",
          "description": "Folder containing the tests that find a online only deposit target.",
          "item": [
            {
              "_postman_id": "ba5ef64a-4d43-4576-b7d8-a0053b1ce888",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96f36281-d983-4cd3-b650-56aef5c60e0c",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_online_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_online_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "8a5ee99c-277e-4313-8412-a7ae1bb3b467",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5b905ea-437e-4b74-b222-56195e89a5f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "259129d1-ff5f-4ffb-b5a2-31a9ab9e5b5b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "03ea0fbb-28d7-4151-94d5-96bd84a56b84",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "03d3be12-2370-42da-9f52-11b86924cd8a",
          "name": "Split Deposits",
          "description": "Folder containing the tests that finds a split deposit target.",
          "item": [
            {
              "_postman_id": "1e79a2a5-5ac6-498e-b9ab-6a48ff29907e",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10795ed6-ce38-4565-8bdb-19fc007914ed",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"split_deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{split_deposit_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{split_deposit_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "9eacd717-22a1-4162-802a-7ec1dcb538ee",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e61e303a-619f-4bcf-aa1a-8b5f128fc5bc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux;",
                      "    ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 5,",
                      "            \"maxChecking\": 5,",
                      "            \"maxSavings\": 5,",
                      "            \"choices\": [],",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": false,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"currency\",",
                      "                            \"label\": \"$ Amount\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Account:Add\",",
                      "                    \"label\": \"Account Add\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Account:Change\",",
                      "                    \"label\": \"Account Change\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Employee/ID\",",
                      "                \"label\": \"Employee ID Number (EIN)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Company/Dept\",",
                      "                \"label\": \"Agency ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{split_deposit_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d93cfc3-8c8b-42c1-8d01-71b448777378",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5a33755b-181b-4d3c-94fe-37e66da9cc7e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "92a6af8f-9014-4f89-be0f-cba9eb37358b",
          "name": "Payments",
          "description": "Folder containing the tests that find a payment target.",
          "item": [
            {
              "_postman_id": "4553881b-bca8-419d-8bdb-ba1aa832e234",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47bd635b-41c3-4c34-9f84-4510d828b3c0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "27c8b83a-9eca-43c9-9b3d-d9f8a1825a39",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c32d0f62-0067-43d3-b4e7-3becab451b1a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.greaterThan(2);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payment_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9500365-9511-4bf2-95b4-ea818babc929",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e67aca5-900e-43bc-8111-59c6c7ae6ade",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "44c26b74-3d6e-4f70-b793-e4f2e50da18d",
          "name": "Payments Print Only",
          "description": "Folder containing the tests that find a print only payment target.",
          "item": [
            {
              "_postman_id": "49c1d446-1cdc-4473-84ba-1ec19e614960",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bda6b21d-4ac8-4bf0-84ca-5a5b57d7905b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_print_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_print_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "f38c79b3-e083-423f-a98b-47f744ed160c",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77525ab5-0ef7-4dae-b49e-71380f5a4f2a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.greaterThan(2);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payment_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8695ee9-2ce3-4b07-9c0f-18f591e4c942",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b40855f1-9802-40df-b929-318cfc0de191",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b23b4081-bdfe-4c92-889e-09cbccf41f1c",
          "name": "Payments Online Only",
          "description": "Folder containing the tests that find an online only payment target.",
          "item": [
            {
              "_postman_id": "f69f8068-740a-4341-bfa1-7c20f3ad5001",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e64aea4-1175-4ff1-ad86-1a0886f45ec0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payments_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_online_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_online_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "436138b8-53dc-4b3a-8673-720573912d2d",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76f0cfa0-2c33-4ebf-a49b-349cd95ff332",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payments_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e0f4761e-690b-4320-8652-aba30853e02e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2f4ff74-89c0-4623-bd15-833450903b61",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "1bf00ec7-6939-4365-83fc-8f2fc8b0fe4c",
          "name": "Locations",
          "description": "Folder containing the tests that find a target by location.",
          "item": [
            {
              "_postman_id": "fc730cd6-7b6a-4929-a951-8388e1bf9e2a",
              "name": "Target By Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has at least one item', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "       pm.expect(i).to.have.property('locationId');",
                      "       pm.expect(i).to.have.property('name');",
                      "       pm.expect(i).to.have.property('address');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('location'); ",
                      "});",
                      "",
                      "pm.environment.set(\"location_id\", jsonData.data.items[0].locationId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                  "host": [
                    "{{base_url}}{{locations_postfix}}"
                  ],
                  "query": [
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{location_name}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "987a0848-308e-432b-aa51-aab711ac353b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "da4426ab-5a69-42b0-bd0d-3eee37b8cf51",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "acedc0ca-2646-45ce-9566-03a7b8ed3e64",
      "name": "Switches",
      "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
      "item": [
        {
          "_postman_id": "b43722df-6a22-4bc0-b038-2dca26dfcbfa",
          "name": "Deposit Using TargetId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a deposit target.",
          "item": [
            {
              "_postman_id": "d6bffd0a-4a3f-434f-903c-954b28e4b2a3",
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has empty array of switches', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "a5bf0dcb-ff9d-409f-b59e-06f2d60c6dcd",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "    var accounts;",
                      "    accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*8265\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*2650\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "6916073f-4801-4de2-a656-f144cbb8ab4d",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "    var accounts;",
                      "    accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*8265\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*2650\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "4c6a0379-fa2c-4185-9d65-2980df0bef73",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "        var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "    var accounts;",
                      "    accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*8265\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*2650\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"100\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"123 Main Street\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"New York\",",
                      "                \"state\": \"NY\",",
                      "                \"zip\": \"44444\"",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"44444\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "470666ee-6a66-4183-9202-c791884fde4e",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "d2581871-0239-4bc9-9fd6-4f21bf7dc6da",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {}",
                      "    };",
                      "    ",
                      "   jsonData.data.item.state.validation = {};",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "642ac8e8-0f41-4e3b-81e4-4164f3608f7f",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "a81a5346-90ce-4357-bbc1-6ba65a2ef1f4",
          "name": "Deposit using LocationId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a location target.",
          "item": [
            {
              "_postman_id": "e706cb40-7eca-486a-9c15-74dc0f6120dd",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43dc4729-45de-4aa5-9e5f-cb57ff9ce355",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SSN4\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SIN3\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*2611\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6110\"",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "       values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                        \"splitAmount\": 100,",
                      "                        \"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Employee/ID\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                        \"splitAmount\": 100,",
                      "                        \"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_SIN3\": null,",
                      "                \"Custom_Employee/ID\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{location_id}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"index\": 0,\n        \"fields\": {\n        \t\"splitAmount\": 100,\n        \t\"splitType\": \"currency\"\n        }\n      }\n    ]\n  }\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "aa51f036-2673-49eb-9de5-3cda1d1c76a0",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cae73f51-d132-4101-a403-19b29b781ac9",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SIN3\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*2611\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6110\"",
                      "            }",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                    \t\"splitAmount\": 100,",
                      "                    \t\"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_SSN4\": \"1234\",",
                      "                \"Custom_Employee/ID\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                    \t\"splitAmount\": 100,",
                      "                    \t\"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_Employee/ID\": \"1234\",",
                      "                \"Custom_SIN3\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0,\r\n        \"fields\": {\r\n        \t\"splitAmount\": 100,\r\n        \t\"splitType\": \"currency\"\r\n        }\r\n      }\r\n    ],\r\n    \"fields\": {\r\n        \"category\": 1,\r\n        \"Custom_SSN4\": \"1234\",\r\n        \"Custom_Employee/ID\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "0561d580-e5dd-49b8-8680-52c07b10525a",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e5d8981-0a19-45f0-b122-184fed7d4be6",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "0748be88-5718-4ea8-8ef6-4e9340b2afc1",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a65b218-a347-42d8-97de-f8073082f13f",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {}",
                      "    };",
                      "    ",
                      "   jsonData.data.item.state.validation = {};",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "eb1ce8a1-45a1-4c7d-9e2b-839fd65a40b8",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6c6065f0-2453-4506-9b91-9e8e9b5fcbe5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c77d980d-7e50-4432-a298-9e5de60fd1c8",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c754fa40-ccf2-41d8-a21b-d9354b7862ec",
          "name": "Deposit using neither",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete an unknown deposit target switch.",
          "item": [
            {
              "_postman_id": "a911787d-d969-4c28-b03c-07c537209737",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e9353eb-a31c-4b79-96b3-f0da8b150a5a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SSN4\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SIN3\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var accounts;",
                      "    if (!isCanada) {",
                      "        accounts = {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"label\": \"*8265\"",
                      "                },",
                      "                {",
                      "                    \"index\": 1,",
                      "                    \"label\": \"*2650\"",
                      "                }",
                      "            ],",
                      "            \"fields\": [                        ",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": false,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"currency\",",
                      "                            \"label\": \"$ Amount\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"percentage\",",
                      "                            \"label\": \"Percentage\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                }",
                      "            ]",
                      "        };",
                      "    } else {",
                      "        accounts = {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"label\": \"*8265\"",
                      "                },",
                      "                {",
                      "                    \"index\": 1,",
                      "                    \"label\": \"*2650\"",
                      "                }",
                      "            ],",
                      "            \"fields\": [                        ",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": false,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"currency\",",
                      "                            \"label\": \"$ Amount\"",
                      "                        },",
                      "                        {",
                      "                            \"key\": \"percentage\",",
                      "                            \"label\": \"Percentage\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": false,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                }",
                      "            ]",
                      "        };",
                      "    }",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Employee/ID\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_Employee/ID\": null,",
                      "                \"Custom_SIN3\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "8f672813-46c5-4149-a72f-d9fada7bbb8e",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01b44652-b319-4df7-a037-b9b50b145c5b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.name).to.have.string(\"Test\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_SIN3\": \"This field is required\",",
                      "                    \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"splitType\",",
                      "                \"label\": \"Type\",",
                      "                \"type\": \"select\",",
                      "                \"required\": false,",
                      "                \"selections\": [",
                      "                    {",
                      "                        \"key\": \"remainder\",",
                      "                        \"label\": \"Remainder\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"currency\",",
                      "                        \"label\": \"$ Amount\"",
                      "                    },",
                      "                    {",
                      "                        \"key\": \"percentage\",",
                      "                        \"label\": \"Percentage\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            {",
                      "                \"key\": \"splitAmount\",",
                      "                \"label\": \"Percent or Fixed Amount\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false,",
                      "                \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "            }    ",
                      "        ]",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                    \t\"splitAmount\": 100,",
                      "                    \t\"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": \"1234567890\",",
                      "                \"website\": \"www.test.com\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"44444\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_SSN4\": \"1234\",",
                      "                \"Custom_Employee/ID\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                    \t\"splitAmount\": 100,",
                      "                    \t\"splitType\": \"Currency\"",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": \"1234567890\",",
                      "                \"website\": \"www.test.com\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"44444\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_Employee/ID\": \"1234\",",
                      "                \"Custom_SIN3\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    values.fields.mailingAddress.state = pm.environment.get('state');",
                      "    values.fields.mailingAddress.zip = pm.environment.get('zip');",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0,\r\n        \"fields\": {\r\n        \t\"splitAmount\": 100,\r\n        \t\"splitType\": \"currency\"\r\n        }\r\n      }\r\n    ], \r\n    \"fields\": {\r\n        \"name\": \"Test\",\r\n        \"phoneNumber\": \"1234567890\",\r\n        \"website\": \"www.test.com\",\r\n        \"mailingAddress\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"category\": 1,\r\n        \"Custom_SSN4\": \"1234\",\r\n        \"Custom_Employee/ID\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "61c41bc2-be34-4a6e-baf8-d99eccc5c39f",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29197893-057f-4f6d-882a-6049e8512b65",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "0d185ad5-4509-4d62-a98e-496d2306828e",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a6686e9-2e2a-4340-b63a-101309908ceb",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {}",
                      "    };",
                      "    ",
                      "   jsonData.data.item.state.validation = {};",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "2852fcdb-e782-4cae-97e3-44d2b2b0bb71",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31f777c7-bfa4-418d-a09c-f64991954fa7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cd11666c-da12-444f-88b0-b516790882fb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "51a3ebc8-1be7-42a5-869f-6334fc1dadd6",
          "name": "Payment using TargetId Copy",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a payment target.",
          "item": [
            {
              "_postman_id": "c4f21218-5969-4f3c-9fe4-17b5782fff16",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "124087d6-e09d-423f-8de8-8bf6d7527b20",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3734194b-9f59-44f8-a3ae-791431a0e491",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "657bc9df-97c7-4163-812b-db6f849feba8",
          "name": "Split Deposits",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a split deposit target switch.",
          "item": [
            {
              "_postman_id": "c2f1a35c-95c1-43d3-b962-c2d784e0c4c6",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a118597-7d96-4700-ab9a-2083b6cff886",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Amount\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": null,",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "197973af-3548-4fa6-bbbd-a2c3c980c34d",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6943736-a9aa-41d9-95e4-002f231c6b3a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": \"1234\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": \"12-12-18\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n      \"Switch_ContactServiceAddress\": {\r\n      \t\"line1\": \"123 Main Street\",\r\n      \t\"city\": \"New York\",\r\n      \t\"state\": \"NY\",\r\n      \t\"zip\": \"55555\"\r\n      },\r\n      \"Switch_BillingAccountNumber\": \"1234\",\r\n      \"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "63afa6cb-0758-4274-9e76-e35090481d02",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "909409a0-a54f-4001-8d41-5ed11300bcca",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ad33e107-5e8f-4873-8125-55059c39ea59",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bfca0bb7-0237-4c70-bded-e9476dae30ea",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "65f5ed03-59be-4e83-9bc6-41870dfb3a4e",
          "name": "Payment using TargetId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a payment target.",
          "item": [
            {
              "_postman_id": "a5e3f761-64a1-459b-8cc7-f28be684bd09",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a118597-7d96-4700-ab9a-2083b6cff886",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Amount\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": null,",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "8a802ac2-5e31-43d4-980c-b8f4405ee3f0",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6943736-a9aa-41d9-95e4-002f231c6b3a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": \"1234\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": \"12-12-18\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n      \"Switch_ContactServiceAddress\": {\r\n      \t\"line1\": \"123 Main Street\",\r\n      \t\"city\": \"New York\",\r\n      \t\"state\": \"NY\",\r\n      \t\"zip\": \"55555\"\r\n      },\r\n      \"Switch_BillingAccountNumber\": \"1234\",\r\n      \"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "9668a6ae-8090-41e5-93a6-d254282d864c",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "08ce3e4b-5527-41e5-8efc-277913132482",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "f7b2527f-be68-4c98-9e21-91861bff5ef6",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "124087d6-e09d-423f-8de8-8bf6d7527b20",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3734194b-9f59-44f8-a3ae-791431a0e491",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "a9be138b-7cc2-477c-a8d0-64f1bd520560",
          "name": "Payment using LocationId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a location payment target.",
          "item": [
            {
              "_postman_id": "41526f6d-74dc-4382-89d9-ffe65802776c",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b7dd23a-229d-4617-b3ef-5c7d72fdf72e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Amount\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                },",
                      "                \"overall\": [",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "       values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_Amount\": null,",
                      "                \"Custom_Withdrawal Date\": null,",
                      "                \"Custom_Effective Date\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_SSN 4\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_Amount\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "a91aeaba-fb0b-4bbb-82cc-4b53d3ebde6d",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6993eb6f-5f8c-4bdd-9f78-58b378accf5c",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "                \"Custom_Effective Date\": \"12-12-18\",",
                      "                \"Custom_Frequency\": \"Test\",",
                      "                \"Custom_SSN 4\": \"1234\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n        \"category\": 1,\r\n        \"Custom_Amount\": \"100\",\r\n        \"Custom_Withdrawal Date\": \"12-12-18\",\r\n        \"Custom_Effective Date\": \"12-12-18\",\r\n        \"Custom_Frequency\": \"Test\",\r\n        \"Custom_SSN 4\": \"1234\",\r\n        \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "83ae1b9f-952f-4b39-bbb3-d11a512b6646",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "d2d76f9e-62fc-48e8-9275-dafc4abde371",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "7437f47e-8a46-484e-a066-94bf87926fc6",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec940722-368d-4b6d-ab74-e1464b2ff82d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "009b4804-0c3e-4193-84a7-cb4944b32c16",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c1cc71c1-a507-440b-bf0f-25aa0a1a24f6",
          "name": "Payment using neither",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using an unknown payment target.",
          "item": [
            {
              "_postman_id": "91795c34-0d15-4a00-a1ab-2482615fc478",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8712b75-f6a3-4d47-969e-d7eebabb3625",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Amount\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"The field is required and must match one of the provided categories.\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_Amount\": null,",
                      "                \"Custom_Withdrawal Date\": null,",
                      "                \"Custom_Effective Date\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_SSN 4\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_Amount\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "a2cc4101-b445-4ad4-8da9-75cc48a9627b",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3fa99aa-57ed-47bf-9a2d-fbc2b7857aa1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.name).to.have.string(\"Test\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                     \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                     \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": \"1234567890\",",
                      "                \"website\": \"www.test.com\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"44444\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "                \"Custom_Effective Date\": \"12-12-18\",",
                      "                \"Custom_Frequency\": \"Test\",",
                      "                \"Custom_SSN 4\": \"1234\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": \"1234567890\",",
                      "                \"website\": \"www.test.com\",",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"44444\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    values.fields.mailingAddress.state = pm.environment.get('state');",
                      "    values.fields.mailingAddress.zip = pm.environment.get('zip');",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ], \r\n    \"fields\": {\r\n        \"name\": \"Test\",\r\n        \"phoneNumber\": \"1234567890\",\r\n        \"website\": \"www.test.com\",\r\n        \"mailingAddress\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"{{state}}\",\r\n            \"zip\": \"{{zip}}\"\r\n        },\r\n        \"category\": 1,\r\n        \"Custom_Amount\": \"100\",\r\n        \"Custom_Withdrawal Date\": \"12-12-18\",\r\n        \"Custom_Effective Date\": \"12-12-18\",\r\n        \"Custom_Frequency\": \"Test\",\r\n        \"Custom_SSN 4\": 1234,\r\n        \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "1acf4ae3-71eb-463c-8b09-f030a14356ea",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "afcc0907-d82e-498b-b2b6-27d65956172c",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "65f4dca0-31fc-4452-b87b-bd2119148165",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "df745722-a50c-4f91-8955-5ebf8bedc944",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2193e97-5b25-4643-a9b7-6ee517f1a26b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "af1655a2-9e12-435e-85ec-abd18034173b",
          "name": "Payment Print Only",
          "description": "Folder containing the tests that create, update and delete a switch using a print only payment target.",
          "item": [
            {
              "_postman_id": "94ca2743-4d3f-4e44-8b8f-ce9a19b9a1cf",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7680edc-9cb2-4f90-b750-f1ea16e024c1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('payment_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Amount\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"line1\": \"This field is required\",",
                      "                    \"city\": \"This field is required\",",
                      "                    \"state\": \"This field is required\",",
                      "                    \"zip\": \"This field is required\",",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": null,",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": null,",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "30db7f2d-c72c-4cf8-9741-b0d45d95b287",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c35447e7-77e5-4f5c-a4c8-e1f4a83d2487",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('payment_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Print\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "   ",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Custom_SSN4\": null,",
                      "                \"Custom_Frequency\": null,",
                      "                \"Custom_WithdrawalDate\": null,",
                      "                \"Custom_EffectiveDate\": null,",
                      "                \"Switch_BillingAccountNumber\": \"1234\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                }",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Date to Withdraw funds\": \"12-12-18\",",
                      "                \"Switch_ContactServiceAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"New York\",",
                      "                    \"state\": \"NY\",",
                      "                    \"zip\": \"55555\"",
                      "                },",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n\t\t\"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n\t\t\"Switch_ContactServiceAddress\": {\r\n\t\t\t\"line1\": \"123 Main Street\",\r\n\t\t\t\"city\": \"New York\",\r\n\t\t\t\"state\": \"NY\",\r\n\t\t\t\"zip\": \"55555\"\r\n\t\t},\r\n\t\t\"Switch_BillingAccountNumber\": \"1234\",\r\n\t\t\"Custom_Amount\": 100\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "667e0a62-c47e-462e-ab4c-54007b986f79",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "ff121dcd-a6b0-42a3-9eb5-0a385f9e0652",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e2c9fcb5-b2df-4a8d-9af2-8fa54176da7d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcd57b52-e02c-4a4b-abd8-fe74de1fd3e7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "ecf81d83-cc6e-444a-8ddd-58feca84a85d",
          "name": "Deposit Online Only",
          "description": "Folder containing the tests that create, update and delete a switch using a print only deposit target.",
          "item": [
            {
              "_postman_id": "b46c81d7-c02f-45a5-a424-9c8471ef75b4",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7868b44e-5ea4-4d92-aefd-16d228e67edb",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_online_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_online_target_id}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "5787493f-d465-4830-96df-c6c0a0d81c71",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "954bab1b-02c0-4a9f-a4f4-9e7b61287a2f",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_online_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Complete\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_online_target_id}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "fc20b9da-72aa-4458-900c-fe25384e0a58",
              "name": "Complete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Complete\",",
                      "        \"actions\": [],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Complete\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b652b3c1-9694-486a-9762-389c6a4b147d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "049ad08e-2ce2-4f5f-acdd-27ea10487ba9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "cc07cdbc-7a46-4402-b121-86b69b6abacd",
          "name": "Deposit Print Only",
          "description": "Folder containing the tests that create, update, submit, cancel, and deletea switch for a print only deposit target.",
          "item": [
            {
              "_postman_id": "45ca105b-20b7-4377-b1e5-9874a47d1d00",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd144dbd-9698-49f4-9216-b876b393e95e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "    var accounts;",
                      "    accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*9619\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6190\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                        \"splitAmount\": null,",
                      "                        \"splitType\": null",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Net or Amount (in dollars)\": null,",
                      "                \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "                \"Custom_Depositor's Full Mailing Address\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 4 of SSN\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0,",
                      "                    \"fields\": {",
                      "                        \"splitAmount\": null,",
                      "                        \"splitType\": null",
                      "                    }",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"Custom_Net or Amount (in dollars)\": null,",
                      "                \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "                \"Custom_Depositor's Full Mailing Address\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 4 of SSN\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "144cd2ec-a2d2-484d-87bf-9fcf8280f19a",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fe6e487-c16d-4bfe-833a-db4effd09deb",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "       state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Print\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        }; ",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        }; ",
                      "    }",
                      "",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*9619\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6190\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"fields\": {",
                      "                    \"splitAmount\": null,",
                      "                    \"splitType\": null",
                      "                }",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"1234\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"100\",",
                      "            \"Custom_Depositor's Full Mailing Address\": {",
                      "                \"line1\": \"123 Main Street\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"New York\",",
                      "                \"state\": \"NY\",",
                      "                \"zip\": \"44444\"",
                      "            },",
                      "            \"Custom_Employee ID\": \"1234\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": 1234,\r\n        \"Custom_or Percentage of Pay (1 - 100)\": 100,\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": 44444\r\n        },\r\n        \"Custom_Employee ID\": 1234,\r\n        \"Custom_Last 4 of SSN\": 1234\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/2"
              },
              "response": []
            },
            {
              "_postman_id": "a332d481-12a5-4a2a-bc2a-3c60e87244de",
              "name": "Print Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Printed\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Print\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/2/action"
              },
              "response": []
            },
            {
              "_postman_id": "50dbd148-2079-4d6c-8fda-5306876998d1",
              "name": "Get Switch PDF",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "Api Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/pdf"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}/{{switches_postfix}}/2"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9c8697f0-40b9-459c-a357-fc8a4acb8d80",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3df654aa-c6e6-43ef-b7b6-6e545557f17d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "3ebc058a-94eb-43cc-958f-72f5b011d03c",
      "name": "Validation",
      "description": "",
      "item": [
        {
          "_postman_id": "74f8abed-bed1-41ee-8743-6e4142e44ed5",
          "name": "Authentication",
          "description": "",
          "item": [
            {
              "_postman_id": "9c73f4a1-1aab-4a84-b762-43a5e7e97e9f",
              "name": "Missing api key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,        ",
                      "            \"message\": \"The header did not contain the key api-key.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"The header did not contain the key api-key.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
                "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
              },
              "response": []
            },
            {
              "_postman_id": "f1a204b6-1e86-43c5-be97-3b58fab94c2d",
              "name": "Invalid api key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 401,",
                      "            \"message\": \"The api-key header provided was not valid.\",",
                      "            \"errors\": [",
                      "                {",
                      "                    \"message\": \"The api-key header provided was not valid.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "Api Key",
                    "key": "api-key",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
                "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "5821985e-9d87-451d-a5c0-d8f1bcc50f09",
          "name": "Customers",
          "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
          "item": [
            {
              "_postman_id": "93e7d35d-2416-42ba-bc47-2ca2259597b8",
              "name": "Missing country field",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Addresses[0].Country\",",
                      "                    \"message\": \"'Country' must not be empty.\"",
                      "                },",
                      "                {",
                      "                    \"reason\": \"Addresses[0].Country\",",
                      "                    \"message\": \"The length of 'Country' must be at least 2 characters. You entered 0 characters.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "c073925c-4968-4e20-81f8-ba091a90cacc",
              "name": "Missing state field",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response;",
                      "   ",
                      "   if (!isCanada) {",
                      "        response = {",
                      "            \"error\": {",
                      "                \"code\": 400,",
                      "                \"errors\": [",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].State\",",
                      "                        \"message\": \"'State' must not be empty.\"",
                      "                    },",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].State\",",
                      "                        \"message\": \"Must be a valid 2 character state code\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            \"apiVersion\": \"3.0.0\",",
                      "            \"context\": \"testing_context\",",
                      "            \"id\": \"\"",
                      "        };",
                      "   }",
                      "    else {",
                      "         response = {",
                      "            \"error\": {",
                      "                \"code\": 400,",
                      "                \"errors\": [",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].State\",",
                      "                        \"message\": \"'State' must not be empty.\"",
                      "                    },",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].State\",",
                      "                        \"message\": \"Must be a valid 2 character Province or Territory code\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            \"apiVersion\": \"3.0.0\",",
                      "            \"context\": \"testing_context\",",
                      "            \"id\": \"\"",
                      "        };",
                      "    }",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "e80e18e9-35cd-42a3-aa5b-aaa0b2d34913",
              "name": "Missing zip field",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response;",
                      "   ",
                      "   if (!isCanada) {",
                      "        response = {",
                      "            \"error\": {",
                      "                \"code\": 400,",
                      "                \"errors\": [",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].Zip\",",
                      "                        \"message\": \"'Zip' must not be empty.\"",
                      "                    },",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].Zip\",",
                      "                        \"message\": \"Must be in the format 00000 or 00000-0000\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            \"apiVersion\": \"3.0.0\",",
                      "            \"context\": \"testing_context\",",
                      "            \"id\": \"\"",
                      "        };",
                      "   }",
                      "    else {",
                      "         response = {",
                      "            \"error\": {",
                      "                \"code\": 400,",
                      "                \"errors\": [",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].Zip\",",
                      "                        \"message\": \"'Zip' must not be empty.\"",
                      "                    },",
                      "                    {",
                      "                        \"reason\": \"Addresses[0].Zip\",",
                      "                        \"message\": \"Must be a valid postal code\"",
                      "                    }",
                      "                ]",
                      "            },",
                      "            \"apiVersion\": \"3.0.0\",",
                      "            \"context\": \"testing_context\",",
                      "            \"id\": \"\"",
                      "        };",
                      "    }",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "8152cfe6-9452-4d7d-b291-72a3d6f0b008",
              "name": "Missing city field",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Addresses[0].City\",",
                      "                    \"message\": \"'City' must not be empty.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "18674b81-97c6-422f-a30e-6431801349b4",
              "name": "Missing line1 field",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Addresses[0].Line1\",",
                      "                    \"message\": \"'Line1' must not be empty.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "d87e31ec-a337-4b00-bd52-7bd05e0e293f",
              "name": "Incorrect routing number",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Accounts\",",
                      "                    \"message\": \"There is a routing number which is not a routing number of this institution.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}0\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "1ae3ed76-c833-48b0-8e79-ce354134776f",
              "name": "Invalid account number",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Accounts[0].Number\",",
                      "                    \"message\": \"The account must provide a valid account number.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "7f90476c-b0df-4058-a263-ca3acb2c0056",
              "name": "Incorrect account type",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Accounts\",",
                      "                    \"message\": \"There is an account type which is not an account type for this institution.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}s\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "46d73240-f22d-49ef-bf07-407c71dca7aa",
              "name": "Incorrect account name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Accounts\",",
                      "                    \"message\": \"There is an account name which is not an account name for this institution.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}0\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            },
            {
              "_postman_id": "653eb1dc-1572-4400-9df1-ad311d428cf7",
              "name": "Invalid account holder name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"AccountHolders[0].LastName\",",
                      "                    \"message\": \"The last name is required and must not exceed to 50 characters.\"",
                      "                },",
                      "                {",
                      "                    \"reason\": \"AccountHolders[0].FirstName\",",
                      "                    \"message\": \"The first name is required and must not exceed 50 characters.\"",
                      "                },",
                      "                {",
                      "                    \"reason\": \"AccountHolders[0].MiddleInitial\",",
                      "                    \"message\": \"The middle initial must not exceed one character.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"context\": \"testing_context\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "api key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n        \"middleInitial\": \"Jd\",\n        \"lastName\": \"Testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"123 Main Street\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "6f6eb582-3341-4d92-b0cb-11b99081ad00",
          "name": "Targets",
          "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
          "item": [
            {
              "_postman_id": "8283be0f-d91a-4886-b410-4a044c354857",
              "name": "Missing name and customer params",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"Name\",",
                      "                    \"message\": \"'Name' must not be empty.\"",
                      "                },",
                      "                {",
                      "                    \"reason\": \"Customer\",",
                      "                    \"message\": \"'Customer' must not be empty.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name=&customer=",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "5c1c9cd6-d650-4a8b-81ba-f3f50ec4be97",
              "name": "Invalid target id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Has the correct error message', function() {",
                      "   var response = {",
                      "        \"error\": {",
                      "            \"code\": 400,",
                      "            \"errors\": [",
                      "                {",
                      "                    \"reason\": \"targetId\",",
                      "                    \"message\": \"The value 'test' is not valid.\"",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"apiVersion\": \"3.0.0\",",
                      "        \"id\": \"\"",
                      "    };",
                      "    ",
                      "    jsonData.id = \"\";",
                      "                ",
                      "    pm.expect(jsonData).to.eql(response);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}test"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f76da534-58be-4ce7-93f8-e406c751e0c1",
          "name": "Switches",
          "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
          "item": [
            {
              "_postman_id": "9f605e2f-7090-4566-8dbb-f04d18ca04a5",
              "name": "Invalid indices and fields",
              "description": "",
              "item": [
                {
                  "_postman_id": "227a8402-c86b-4328-b852-5fafdf44ee31",
                  "name": "Invalid customer key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Customer Not Found\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Customer Not Found\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Api Key",
                        "key": "api-key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{customers_postfix}}test{{switches_postfix}}",
                    "description": "Should return empty list since no switches have been created yet."
                  },
                  "response": []
                },
                {
                  "_postman_id": "867dcb1a-3ced-4804-a230-d420228dd49a",
                  "name": "Create switch - invalid target id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "// TODO: Fix this test",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "  var response = {",
                          "        \"error\": {",
                          "            \"code\": 400,",
                          "            \"errors\": [",
                          "                {",
                          "                    \"reason\": \"TargetId\",",
                          "                    \"message\": \"Invalid target id\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Api-Key",
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "683fc795-c51d-4b62-9712-cf5548f24eda",
                  "name": "Create switch - invalid type",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 400,",
                          "            \"errors\": [",
                          "                {",
                          "                    \"reason\": \"Type\",",
                          "                    \"message\": \"Invalid type provided.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Api-Key",
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"\",\r\n  \"targetId\": \"1234567890\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "8cab583e-d3f3-4f26-836a-4b17ab67ff49",
                  "name": "Create switch - invalid accountHolderIndex",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 400,",
                          "            \"errors\": [",
                          "                {",
                          "                    \"reason\": \"AccountHolderIndex\",",
                          "                    \"message\": \"Invalid account holder index\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "description": "Api-Key",
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 15\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
                  },
                  "response": []
                },
                {
                  "_postman_id": "cb62cb63-5ce0-4437-b159-e3a7403f1906",
                  "name": "Invalid switch index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "description": "Api Key",
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11"
                  },
                  "response": []
                },
                {
                  "_postman_id": "26e1f65d-f6b5-42fc-8d02-f4712244b3b5",
                  "name": "Invalid switch index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": \"500\",\r\n      \"Custom_or Percentage of Pay (1 - 100)\": \"50\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11"
                  },
                  "response": []
                },
                {
                  "_postman_id": "edb48a97-2ff2-4d3e-89f2-1b5963cc21d0",
                  "name": "Submit Switch - invalid switch index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11/action"
                  },
                  "response": []
                },
                {
                  "_postman_id": "274f03a8-39cf-41dc-a29d-45bd638e2e84",
                  "name": "Cancel Switch- invalid switch index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{api_key}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11/action"
                  },
                  "response": []
                },
                {
                  "_postman_id": "d8ec3de5-dec3-4c9c-8f68-97fb92a086be",
                  "name": "Delete Switch - invalid switch index",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 404\", function () {",
                          "    pm.response.to.have.status(404);",
                          "});",
                          "",
                          "pm.test('Has the correct error message', function() {",
                          "   var response = {",
                          "        \"error\": {",
                          "            \"code\": 404,",
                          "            \"message\": \"Switch with index 11 for customer  does not exist.\",",
                          "            \"errors\": [",
                          "                {",
                          "                    \"message\": \"Switch with index 11 for customer  does not exist.\"",
                          "                }",
                          "            ]",
                          "        },",
                          "        \"apiVersion\": \"3.0.0\",",
                          "        \"id\": \"\"",
                          "    };",
                          "    ",
                          "    jsonData.id = \"\";",
                          "    response.error.message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "    response.error.errors[0].message = \"Switch with index 11 for customer \" + pm.environment.get(\"customer_key\") + \" does not exist.\";",
                          "                ",
                          "    pm.expect(jsonData).to.eql(response);",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{api_key}}"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/11",
                    "description": "\t"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "8177f21f-e402-4c72-8135-4151c75190f1",
              "name": "Large Field Values",
              "description": "",
              "item": [
                {
                  "_postman_id": "02c07744-5f12-4631-bbc1-c5452a423d83",
                  "name": "Create Switch - Huge value for field",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Has required elements', function() {",
                          "    pm.expect(jsonData).to.have.property('data');",
                          "    pm.expect(jsonData).to.have.property('apiVersion');",
                          "    pm.expect(jsonData).to.have.property('id');",
                          "    pm.expect(jsonData.data).to.have.property('kind');",
                          "    pm.expect(jsonData.data).to.have.property('lang');",
                          "});",
                          "",
                          "pm.test('Has required 2nd level elements', function() {",
                          "    pm.expect(jsonData.data.item).to.have.property('index');",
                          "    pm.expect(jsonData.data.item).to.have.property('type');",
                          "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                          "    pm.expect(jsonData.data.item).to.have.property('name');",
                          "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                          "    pm.expect(jsonData.data.item).to.have.property('values');",
                          "    pm.expect(jsonData.data.item).to.have.property('ux');",
                          "    pm.expect(jsonData.data.item).to.have.property('state');",
                          "});",
                          "",
                          "pm.test('Has the correct values element', function() {",
                          "   var values = {",
                          "        \"accounts\": [",
                          "            {",
                          "                \"index\": 0,",
                          "                \"fields\": {",
                          "                    \"splitAmount\": null,",
                          "                    \"splitType\": null",
                          "                }",
                          "            }",
                          "        ],",
                          "        \"fields\": {",
                          "            \"Custom_Net or Amount (in dollars)\": null,",
                          "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                          "            \"Custom_Depositor's Full Mailing Address\": {",
                          "                \"line1\": null,",
                          "                \"line2\": null,",
                          "                \"line3\": null,",
                          "                \"city\": null,",
                          "                \"state\": null,",
                          "                \"zip\": null",
                          "            },",
                          "            \"Custom_Employee ID\": \"This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence a\",",
                          "            \"Custom_Last 4 of SSN\": \"This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence a\"",
                          "        }",
                          "    };",
                          "    ",
                          "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                          "});",
                          "",
                          "pm.test('Has matching values and ux.fields names', function() {",
                          "   var values = jsonData.data.item.values.fields;",
                          "   var ux = jsonData.data.item.ux.fields;",
                          "   ",
                          "   var getValueKeys = function(object, array) {",
                          "       for (var k in object) {",
                          "           if (typeof object[k] === 'object' && object[k] !== null) {",
                          "               for (var i in object[k]) array.push(i);",
                          "           } else {",
                          "               array.push(k);",
                          "           }",
                          "       } ",
                          "   };",
                          "   ",
                          "    var getUxKeys = function(object, array) {",
                          "        for (var k in object) {",
                          "           if (object[k].hasOwnProperty('fields')) {",
                          "                for (var i in object[k].fields) {",
                          "                   array.push(object[k].fields[i].key);",
                          "                }",
                          "           } else {",
                          "              array.push(object[k].key);",
                          "           }",
                          "        } ",
                          "    };",
                          "   ",
                          "    var valueKeys = [];",
                          "    var uxKeys = [];",
                          "    ",
                          "    getValueKeys(values, valueKeys);",
                          "    getUxKeys(ux, uxKeys);",
                          "   ",
                          "   valueKeys.sort();",
                          "   uxKeys.sort();",
                          "   ",
                          "   pm.expect(valueKeys).to.eql(uxKeys);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "{{api_key}}",
                        "description": "Api-Key"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Last 4 of SSN\": \"This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. \",\r\n      \"Custom_Employee ID\": \"This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. This is a really long sentence and I am curious about where it will get cut off at. \"\r\n    }\r\n  }\r\n}"
                    },
                    "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "9fa62c23-ae07-419f-91ea-f354f8522855",
      "name": "Authorization",
      "description": "",
      "item": [
        {
          "_postman_id": "e19d7f06-b480-4e4f-836d-2128d9e2853a",
          "name": "No API Key",
          "description": "",
          "item": [
            {
              "_postman_id": "de4acae4-bce9-4af4-a16b-7418e1c77bbb",
              "name": "Types",
              "description": "Folder containing the tests for the GET `/types/targets`, `/types/switch/statuses`, and `/types/switch/actions` routes.",
              "item": [
                {
                  "_postman_id": "084fa738-d796-45f7-91a3-6579e7a3f41e",
                  "name": "Targets",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function() {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 400,",
                          "        \"message\": \"The header did not contain the key api-key.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{targets_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/targets` endpoint is returning the correct values."
                  },
                  "response": []
                },
                {
                  "_postman_id": "04ac8789-fc39-4fc3-afc7-333c2bdc0a6b",
                  "name": "Statuses",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function() {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 400,",
                          "        \"message\": \"The header did not contain the key api-key.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
                  },
                  "response": []
                },
                {
                  "_postman_id": "0ea83e69-e94a-4d71-9357-b853c4c3de51",
                  "name": "Actions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "74d90fde-2509-4451-a886-18647421cd78",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 400\", function() {",
                          "    pm.response.to.have.status(400);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 400,",
                          "        \"message\": \"The header did not contain the key api-key.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The header did not contain the key api-key.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{actions_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/switch/actions` endpoint is returning the correct values."
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "8a6ea143-a80d-479a-876b-98247d131986",
              "name": "Customers",
              "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
              "item": [
                {
                  "_postman_id": "fb456c6c-67b0-4cb3-844e-74df09a6afa4",
                  "name": "Single Customer Single Account",
                  "description": "Folder containing the test that creates a customer with a single account holder and a single account.",
                  "item": [
                    {
                      "_postman_id": "d07c99ec-d0fe-46c3-8b3b-706d01fa6e33",
                      "name": "Create Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                            "exec": [
                              "var timestamp = Date.now();",
                              "",
                              "var randomString = makeRandomString();",
                              "",
                              "// Set the timestamp to environment vars to create an unique",
                              "// customer on each test run.",
                              "pm.environment.set(\"customer_key\", timestamp);",
                              "",
                              "pm.environment.set(\"customer_name\", randomString);",
                              "",
                              "// Creates a random string of length 10.",
                              "function makeRandomString() {",
                              "  var text = \"\";",
                              "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                              "",
                              "  for (var i = 0; i < 10; i++)",
                              "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                              "",
                              "  return text;",
                              "}",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                        "description": "Creates a customer with a single account holder and a single account."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bab9f974-75c8-4842-b62a-e2a76d1cdfdc",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "1d82a45a-23f0-4aa2-b48b-1361f377084e",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "36a953b8-445b-473d-a048-6f944bdbc256",
                  "name": "Update Customer",
                  "description": "Folder containing the tests that update the created customer by adding and removing account holders, accounts, and renaming customer fields.",
                  "item": [
                    {
                      "_postman_id": "dd751015-5b45-4199-bdab-4bedba5cfc62",
                      "name": "Update Customer Rename Values",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": {
                          "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                          "host": [
                            "{{base_url}}{{customers_postfix}}{{customer_key}}"
                          ],
                          "query": [
                            {
                              "key": "context",
                              "value": "",
                              "equals": true,
                              "disabled": true
                            }
                          ]
                        },
                        "description": "Test that renames some customer values, adds an account holder and an account to the customer."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "3fd065c2-0ad1-4d2b-8970-8a0ea7d9ce59",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbbefbfa-fbcf-4c1e-b738-6ef601e65352",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "93031b0b-cc93-4722-9a22-e8019b8b11be",
                  "name": "Get Customer",
                  "description": "Folder containing the test that GETs the customer to ensure the updates worked.",
                  "item": [
                    {
                      "_postman_id": "8c6e7b13-e9b4-4867-a2de-3fe35220d968",
                      "name": "Get Created Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                          "host": [
                            "{{base_url}}{{customers_postfix}}{{customer_key}}"
                          ],
                          "query": [
                            {
                              "key": "context",
                              "value": "",
                              "equals": true,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e1c252ce-7bd2-4213-8a9e-a59a58aff7f1",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "3e94fea3-2e95-40bd-8425-0bd21a7455ab",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "49cb7097-8edc-4329-94f9-b1b107c50646",
              "name": "Targets",
              "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
              "item": [
                {
                  "_postman_id": "cf99792b-1c66-4283-8081-0800ae91f87f",
                  "name": "Deposits",
                  "description": "Folder containing the tests that find a deposit target.",
                  "item": [
                    {
                      "_postman_id": "417c6cf2-52e0-441c-bba5-ee70bbd9be3b",
                      "name": "Target By Name",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                          "host": [
                            "{{base_url}}{{targets_postfix2}}"
                          ],
                          "query": [
                            {
                              "key": "type",
                              "value": "deposit",
                              "equals": true
                            },
                            {
                              "key": "name",
                              "value": "{{deposit_target_name}}",
                              "equals": true
                            },
                            {
                              "key": "customer",
                              "value": "{{customer_key}}",
                              "equals": true
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "757e8405-8ec1-4ce7-a34e-6b043139b8e7",
                      "name": "Target By Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}{{context_param}}"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "49a43768-1e47-4037-ac75-53f08f0ffc1b",
                  "name": "Locations",
                  "description": "Folder containing the tests that find a target by location.",
                  "item": [
                    {
                      "_postman_id": "92808bd0-3aad-4df5-b433-6c69d29b71a6",
                      "name": "Target By Location",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                          "host": [
                            "{{base_url}}{{locations_postfix}}"
                          ],
                          "query": [
                            {
                              "key": "customer",
                              "value": "{{customer_key}}",
                              "equals": true
                            },
                            {
                              "key": "name",
                              "value": "{{location_name}}",
                              "equals": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "987a0848-308e-432b-aa51-aab711ac353b",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "da4426ab-5a69-42b0-bd0d-3eee37b8cf51",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "b70122e7-4c3b-458e-a253-ac0ad408e74b",
              "name": "Switches",
              "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
              "item": [
                {
                  "_postman_id": "6f75a498-aa90-437c-adfa-c871f02f0e5a",
                  "name": "Deposit Using TargetId",
                  "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a deposit target.",
                  "item": [
                    {
                      "_postman_id": "0e6789f6-82e7-434c-9a17-d5ddfb328308",
                      "name": "Get Switches",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}",
                        "description": "Should return empty list since no switches have been created yet."
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "cf1d0a47-3aac-43c1-849d-8578b593d55b",
                      "name": "Create Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "d01ba022-6829-4ac8-a482-2148a3c99d56",
                      "name": "Get Switch By Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "df84ca08-e8b8-4fda-8972-e7ae73b6479a",
                      "name": "Update Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"44444\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "3b9f462b-a89b-42da-94ac-7880800f6007",
                      "name": "Submit Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "e7063d47-4338-474b-a7b2-e6433fe73d1f",
                      "name": "Cancel Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "0a39f741-d86c-4b67-903b-9ead842bf546",
                      "name": "Delete Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"message\": \"The header did not contain the key api-key.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The header did not contain the key api-key.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "body": {},
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                        "description": "\t"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "daec6a08-52e7-4196-8cf0-00cd43dd1bc5",
          "name": "Invalid API Key",
          "description": "",
          "item": [
            {
              "_postman_id": "279a83c2-2ac5-4042-bab8-0cb8c8f7699c",
              "name": "Types",
              "description": "Folder containing the tests for the GET `/types/targets`, `/types/switch/statuses`, and `/types/switch/actions` routes.",
              "item": [
                {
                  "_postman_id": "ccb9c150-e252-4946-bf72-330dd14cc34c",
                  "name": "Targets",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function() {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 401,",
                          "        \"message\": \"The api-key header provided was not valid.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "aaaaa",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{targets_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/targets` endpoint is returning the correct values."
                  },
                  "response": []
                },
                {
                  "_postman_id": "61768587-0f7e-4491-829c-ac17e0faeb3f",
                  "name": "Statuses",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function() {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 401,",
                          "        \"message\": \"The api-key header provided was not valid.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "aaaaa",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
                  },
                  "response": []
                },
                {
                  "_postman_id": "e4ec0ca1-c7df-4aa9-a129-d304f37db4bb",
                  "name": "Actions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "74d90fde-2509-4451-a886-18647421cd78",
                        "exec": [
                          "const jsonData = pm.response.json();",
                          "",
                          "pm.test(\"Status code is 401\", function() {",
                          "    pm.response.to.have.status(401);",
                          "});",
                          "",
                          "pm.test(\"Contains the correct error\", function() {",
                          "    error = {",
                          "        \"code\": 401,",
                          "        \"message\": \"The api-key header provided was not valid.\",",
                          "        \"errors\": [",
                          "            {",
                          "                \"message\": \"The api-key header provided was not valid.\"",
                          "            }",
                          "        ]",
                          "    };",
                          "    ",
                          "   pm.expect(jsonData.error).to.deep.include(error); ",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "api-key",
                        "value": "aaaaa",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}{{actions_postfix}}{{context_param}}",
                    "description": "Asserts that the GET `/types/switch/actions` endpoint is returning the correct values."
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "e7b1cc3d-12e0-4581-aa4a-d2cccb5e5608",
              "name": "Customers",
              "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
              "item": [
                {
                  "_postman_id": "2637d325-c52a-4b85-946d-c664dd45150f",
                  "name": "Single Customer Single Account",
                  "description": "Folder containing the test that creates a customer with a single account holder and a single account.",
                  "item": [
                    {
                      "_postman_id": "be1bd36f-3657-448d-9c59-f26490af8e97",
                      "name": "Create Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                            "exec": [
                              "var timestamp = Date.now();",
                              "",
                              "var randomString = makeRandomString();",
                              "",
                              "// Set the timestamp to environment vars to create an unique",
                              "// customer on each test run.",
                              "pm.environment.set(\"customer_key\", timestamp);",
                              "",
                              "pm.environment.set(\"customer_name\", randomString);",
                              "",
                              "// Creates a random string of length 10.",
                              "function makeRandomString() {",
                              "  var text = \"\";",
                              "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                              "",
                              "  for (var i = 0; i < 10; i++)",
                              "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                              "",
                              "  return text;",
                              "}",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                        "description": "Creates a customer with a single account holder and a single account."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bab9f974-75c8-4842-b62a-e2a76d1cdfdc",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "1d82a45a-23f0-4aa2-b48b-1361f377084e",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "f11f37c8-c695-498b-a146-dd47d02cb266",
                  "name": "Update Customer",
                  "description": "Folder containing the tests that update the created customer by adding and removing account holders, accounts, and renaming customer fields.",
                  "item": [
                    {
                      "_postman_id": "4915b3c6-3b27-4e73-91ad-3f0f2fbf96d2",
                      "name": "Update Customer Rename Values",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": {
                          "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                          "host": [
                            "{{base_url}}{{customers_postfix}}{{customer_key}}"
                          ],
                          "query": [
                            {
                              "key": "context",
                              "value": "",
                              "equals": true,
                              "disabled": true
                            }
                          ]
                        },
                        "description": "Test that renames some customer values, adds an account holder and an account to the customer."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "3fd065c2-0ad1-4d2b-8970-8a0ea7d9ce59",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbbefbfa-fbcf-4c1e-b738-6ef601e65352",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "21842a53-c0fa-4daf-b503-bde09c519f8b",
                  "name": "Get Customer",
                  "description": "Folder containing the test that GETs the customer to ensure the updates worked.",
                  "item": [
                    {
                      "_postman_id": "f3c51387-898c-4c45-858b-cb1818433c06",
                      "name": "Get Created Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                          "host": [
                            "{{base_url}}{{customers_postfix}}{{customer_key}}"
                          ],
                          "query": [
                            {
                              "key": "context",
                              "value": "",
                              "equals": true,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e1c252ce-7bd2-4213-8a9e-a59a58aff7f1",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "3e94fea3-2e95-40bd-8425-0bd21a7455ab",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "62d87919-73db-4ebb-a270-5d33e8f3d109",
              "name": "Targets",
              "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
              "item": [
                {
                  "_postman_id": "ec07f7dc-aab8-48b9-a7bd-3d7f6cdccc2d",
                  "name": "Deposits",
                  "description": "Folder containing the tests that find a deposit target.",
                  "item": [
                    {
                      "_postman_id": "2d81a395-12d2-475e-befb-81fe4a9c3334",
                      "name": "Target By Name",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                          "host": [
                            "{{base_url}}{{targets_postfix2}}"
                          ],
                          "query": [
                            {
                              "key": "type",
                              "value": "deposit",
                              "equals": true
                            },
                            {
                              "key": "name",
                              "value": "{{deposit_target_name}}",
                              "equals": true
                            },
                            {
                              "key": "customer",
                              "value": "{{customer_key}}",
                              "equals": true
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "4ab7eec5-9bfc-4fcb-bb1c-b1a45a2a7cf6",
                      "name": "Target By Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}{{context_param}}"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "b9e88fbd-0f53-4e1f-8dc7-61a64575e657",
                  "name": "Locations",
                  "description": "Folder containing the tests that find a target by location.",
                  "item": [
                    {
                      "_postman_id": "99bcd9ed-da5b-4389-aed7-24e4f9457354",
                      "name": "Target By Location",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": {
                          "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                          "host": [
                            "{{base_url}}{{locations_postfix}}"
                          ],
                          "query": [
                            {
                              "key": "customer",
                              "value": "{{customer_key}}",
                              "equals": true
                            },
                            {
                              "key": "name",
                              "value": "{{location_name}}",
                              "equals": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "987a0848-308e-432b-aa51-aab711ac353b",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "da4426ab-5a69-42b0-bd0d-3eee37b8cf51",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "d7a66037-be7b-406e-bc83-a682fd3b2bdd",
              "name": "Switches",
              "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
              "item": [
                {
                  "_postman_id": "e5c7ba3e-3b9e-4397-9e28-a850af6f3725",
                  "name": "Deposit Using TargetId",
                  "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a deposit target.",
                  "item": [
                    {
                      "_postman_id": "f4b248cb-db9a-434c-bcee-44b4a926218b",
                      "name": "Get Switches",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          },
                          {
                            "key": "",
                            "value": "",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}",
                        "description": "Should return empty list since no switches have been created yet."
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "e4549a27-c065-4c76-9cec-d942dd96b4d1",
                      "name": "Create Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "043cb44e-3406-4811-8438-c15573415551",
                      "name": "Get Switch By Id",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "cc01e775-14f3-48c3-b165-43d5659a0092",
                      "name": "Update Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"type\": \"Deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountHolderIndex\": 0,\r\n  \"values\": {\r\n\t  \"accounts\":[\r\n\t\t{\r\n\t\t\t\"index\": 0\r\n\t\t}\r\n\t],\r\n\t\"fields\": {\r\n        \"Custom_Net or Amount (in dollars)\": \"100\",\r\n        \"Custom_or Percentage of Pay (1 - 100)\": \"100\",\r\n        \"Custom_Depositor's Full Mailing Address\": {\r\n            \"line1\": \"123 Main Street\",\r\n            \"line2\": null,\r\n            \"line3\": null,\r\n            \"city\": \"New York\",\r\n            \"state\": \"NY\",\r\n            \"zip\": \"44444\"\r\n        },\r\n        \"Custom_Employee ID\": \"1234\",\r\n        \"Custom_Last 4 of SSN\": \"1234\"\r\n\t}\r\n  }\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "faab571b-b339-4828-afed-e6c426023a0b",
                      "name": "Submit Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "ced4f861-8277-417b-b9eb-4a8def465869",
                      "name": "Cancel Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "e31e73e1-5fd1-4213-82af-00555a6bde53",
                      "name": "Delete Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 401\", function() {",
                              "    pm.response.to.have.status(401);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 401,",
                              "        \"message\": \"The api-key header provided was not valid.\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"The api-key header provided was not valid.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "aaaaa",
                            "type": "text"
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                        "description": "\t"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "34ba53cf-2231-401e-b5c5-9c7e7471529c",
          "name": "Different Institution API Key",
          "description": "",
          "item": [
            {
              "_postman_id": "061a707e-bd8f-4cc2-83fb-f4bd3686fad8",
              "name": "Customers",
              "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
              "item": [
                {
                  "_postman_id": "5d111d28-cb71-4549-87c9-d0b394147aa7",
                  "name": "Single Customer Single Account",
                  "description": "Folder containing the test that creates a customer with a single account holder and a single account.",
                  "item": [
                    {
                      "_postman_id": "edf21c1a-652a-4a28-a39f-ac0f228302c9",
                      "name": "Create Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                            "exec": [
                              "var timestamp = Date.now();",
                              "",
                              "var randomString = makeRandomString();",
                              "",
                              "// Set the timestamp to environment vars to create an unique",
                              "// customer on each test run.",
                              "pm.environment.set(\"customer_key\", timestamp);",
                              "",
                              "pm.environment.set(\"customer_name\", randomString);",
                              "",
                              "// Creates a random string of length 10.",
                              "function makeRandomString() {",
                              "  var text = \"\";",
                              "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                              "",
                              "  for (var i = 0; i < 10; i++)",
                              "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                              "",
                              "  return text;",
                              "}",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                        "description": "Creates a customer with a single account holder and a single account."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "bab9f974-75c8-4842-b62a-e2a76d1cdfdc",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "1d82a45a-23f0-4aa2-b48b-1361f377084e",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "03b0e3e0-5ba9-47fc-abd1-ec9d9fbf49a0",
                  "name": "Update Customer",
                  "description": "Folder containing the tests that update the created customer by adding and removing account holders, accounts, and renaming customer fields.",
                  "item": [
                    {
                      "_postman_id": "e84529d0-9b45-40d6-9a96-00afd7bd34cd",
                      "name": "Update Customer Rename Values",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"{{zip}}\",\n            \"state\": \"{{state}}\",\n            \"country\": \"{{country}}\"\n        }\n    ]\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                        "description": "Test that renames some customer values, adds an account holder and an account to the customer."
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "3fd065c2-0ad1-4d2b-8970-8a0ea7d9ce59",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "fbbefbfa-fbcf-4c1e-b738-6ef601e65352",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                },
                {
                  "_postman_id": "6f1cc642-cf93-461d-bc4d-aa398ad9c6db",
                  "name": "Get Customer",
                  "description": "Folder containing the test that GETs the customer to ensure the updates worked.",
                  "item": [
                    {
                      "_postman_id": "f5cdc074-73f0-418f-96ca-4a77752fa4a9",
                      "name": "Get Created Customer",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                            "exec": [
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 404\", function() {",
                              "    pm.response.to.have.status(404);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 404,",
                              "        \"message\": \"Customer Not Found\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"Customer Not Found\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e1c252ce-7bd2-4213-8a9e-a59a58aff7f1",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "3e94fea3-2e95-40bd-8425-0bd21a7455ab",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "4dd302de-93ba-4454-a8e9-06bb0681b1dc",
              "name": "Switches",
              "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
              "item": [
                {
                  "_postman_id": "c40c4e24-0cfa-46fb-bc28-7c743971a45a",
                  "name": "Deposit Using TargetId",
                  "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a deposit target.",
                  "item": [
                    {
                      "_postman_id": "47a68291-4083-46a3-897c-5d5062e3b710",
                      "name": "Get Switches",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 404\", function() {",
                              "    pm.response.to.have.status(404);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 404,",
                              "        \"message\": \"Customer Not Found\",",
                              "        \"errors\": [",
                              "            {",
                              "                \"message\": \"Customer Not Found\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}",
                        "description": "Should return empty list since no switches have been created yet."
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "aa1dfe8a-4ebc-4e9d-8bae-55a76bfbb60d",
                      "name": "Create Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 400\", function() {",
                              "    pm.response.to.have.status(400);",
                              "});",
                              "",
                              "pm.test(\"Contains the correct error\", function() {",
                              "    error = {",
                              "        \"code\": 400,",
                              "        \"errors\": [",
                              "            {",
                              "                \"reason\": \"ApiExternalId\",",
                              "                \"message\": \"Invalid customer key\"",
                              "            },",
                              "            {",
                              "                \"reason\": \"Values.Accounts[0]\",",
                              "                \"message\": \"Account index 0 does not exist for this customer.\"",
                              "            }",
                              "        ]",
                              "    };",
                              "    ",
                              "   pm.expect(jsonData.error).to.deep.include(error); ",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "54a80110-9bcf-4e2e-8268-d4fcd0854013",
                      "name": "Submit Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 404\", function() {",
                              "    pm.response.to.have.status(404);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          },
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                        },
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action{{context_param}}"
                      },
                      "response": []
                    },
                    {
                      "_postman_id": "677269e1-3b9e-42f5-b578-ce77984d938f",
                      "name": "Delete Switch",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                            "exec": [
                              "const jsonData = pm.response.json();",
                              "",
                              "pm.test(\"Status code is 404\", function() {",
                              "    pm.response.to.have.status(404);",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "api-key",
                            "value": "{{wrong_api_key}}",
                            "type": "text"
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                        "description": "\t"
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "e6bbb4e7-f0ed-4978-be21-911830e438bb",
          "name": "Role Based API Key",
          "description": "",
          "item": [],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}