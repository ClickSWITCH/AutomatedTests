{
  "info": {
    "_postman_id": "1dcea77f-1205-444a-8316-1e06856a07e4",
    "name": "Full Regression Test Suite",
    "description": "A collection of tests that hit all the V3 API endpoints to ensure the API is functioning properly. The requests are split into 4 folders: Types, Customers, Targets, and Switches. The tests must be run in the order displayed here to function properly. Currently there are **73** requests and **466** tests in this collection.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "3ffc5fb9-1f91-417f-b5ba-73263c35d599",
      "name": "Types",
      "description": "Folder containing the tests for the GET `/types/targets`, `/types/switch/statuses`, and `/types/switch/actions` routes.",
      "item": [
        {
          "_postman_id": "c920930d-49bf-4aa4-8be4-faf7f1bb5ba9",
          "name": "Targets",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e1295ee-9045-4151-acee-6d05bf191f08",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 2 items', function() {",
                  "    pm.expect(jsonData.data.currentItemCount).to.eql(2);",
                  "    pm.expect(jsonData.data.items).to.have.length(2);",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var deposit = {",
                  "        \"id\": \"deposit\",",
                  "        \"label\": \"Direct Deposit\",",
                  "        \"plural\": \"Direct Deposits\",",
                  "        \"recipient\": \"Depositor\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future direct deposits to your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deposit);",
                  "",
                  "    //TODO: Add this test back in once we enable account closures again.",
                  "    // var closure =  {",
                  "    //     \"id\": \"closure\",",
                  "    //     \"label\": \"Account Closure\",",
                  "    //     \"plural\": \"Account Closures\",",
                  "    //     \"recipient\": \"Financial Instituion\",",
                  "    //     \"help\": \"Instructions to a company to close an account that you no longer need.\"",
                  "    // };",
                  "    // pm.expect(jsonData.data.items).to.deep.include(closure);",
                  "    ",
                  "    var payment =  {",
                  "        \"id\": \"payment\",",
                  "        \"label\": \"Automatic Payment\",",
                  "        \"plural\": \"Automatic Payments\",",
                  "        \"recipient\": \"Payee\",",
                  "        \"help\": \"Instructions to a company/govt. agency to change future automatic payments from your account.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(payment);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{targets_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/targets` endpoint is returning the correct values."
          },
          "response": []
        },
        {
          "_postman_id": "1a2f76d3-b8e7-4bcb-9141-d43e26dd8c9e",
          "name": "Statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c63fdee-f7cb-40c1-aefb-7a3c2bb161fc",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has 9 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(10);",
                  "   pm.expect(jsonData.data.items).to.have.length(10);",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "})",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#statuses'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var ready = {",
                  "        \"id\": \"ready\",",
                  "        \"label\": \"Ready\",",
                  "        \"help\": \"The switch is ready to submit for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(ready);",
                  "",
                  "    var incomplete = {",
                  "        \"id\": \"incomplete\",",
                  "        \"label\": \"Incomplete\",",
                  "        \"help\": \"The switch is missing information required for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(incomplete);",
                  "",
                  "    var canceled =  {",
                  "        \"id\": \"canceled\",",
                  "        \"label\": \"Canceled\",",
                  "        \"help\": \"The switch has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(canceled);",
                  "    ",
                  "    var submitted =  {",
                  "        \"id\": \"submitted\",",
                  "        \"label\": \"Submitted\",",
                  "        \"help\": \"The switch has been submitted for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submitted);",
                  "    ",
                  "    var printed =  {",
                  "        \"id\": \"printed\",",
                  "        \"label\": \"Printed\",",
                  "        \"help\": \"The switch has been printed for signature and/or in-person delivery.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printed);",
                  "    ",
                  "    var inprocess =  {",
                  "        \"id\": \"processing\",",
                  "        \"label\": \"In Process\",",
                  "        \"help\": \"The switch is currently being processed by our fulfillment team.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(inprocess);",
                  "    ",
                  "    var sent =  {",
                  "        \"id\": \"sent\",",
                  "        \"label\": \"Sent\",",
                  "        \"help\": \"The switch has been sent to the company or govt. agency for action.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(sent);",
                  "    ",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"The company or govt. agency has acknowledged that the change has been completed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var unableToProcess =  {",
                  "        \"id\": \"unabletoprocess\",",
                  "        \"label\": \"Unable To Process\",",
                  "        \"help\": \"The switch is unable to be processed.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(unableToProcess);",
                  "    ",
                  "    var deleted =  {",
                  "        \"id\": \"deleted\",",
                  "        \"label\": \"Deleted\",",
                  "        \"help\": \"The switch is deleted\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleted);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{statuses_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/statuses` endpoint is returning the correct values."
          },
          "response": []
        },
        {
          "_postman_id": "f9d48576-d42a-4b77-9d89-c02346deb0a1",
          "name": "Actions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74d90fde-2509-4451-a886-18647421cd78",
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required elements', function() {",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('apiVersion');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('kind');",
                  "    pm.expect(jsonData.data).to.have.property('lang');",
                  "});",
                  "",
                  "pm.test('Has the correct context', function() {",
                  "    pm.expect(jsonData.context).to.equal('testing_context');",
                  "})",
                  "",
                  "pm.test('Has the correct 8 items', function() {",
                  "   pm.expect(jsonData.data.currentItemCount).to.eql(12);",
                  "   pm.expect(jsonData.data.items).to.have.length(12);",
                  "});",
                  "",
                  "pm.test('Has the correct kind attribute', function() {",
                  "   pm.expect(jsonData.data.kind).to.equal('types#switch#actions'); ",
                  "});",
                  "",
                  "pm.test('Has the correct items', function() {",
                  "    var save = {",
                  "        \"id\": \"http-put\",",
                  "        \"label\": \"Save\",",
                  "        \"help\": \"Saves a switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(save);",
                  "    ",
                  "    var submit = {",
                  "        \"id\": \"submit\",",
                  "        \"label\": \"Submit\",",
                  "        \"help\": \"Submit the switch for processing.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(submit);",
                  "",
                  "    var cancel = {",
                  "        \"id\": \"cancel\",",
                  "        \"label\": \"Cancel\",",
                  "        \"help\": \"Cancel the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(cancel);",
                  "",
                  "    var complete =  {",
                  "        \"id\": \"complete\",",
                  "        \"label\": \"Complete\",",
                  "        \"help\": \"You've taken the steps to make this change online or in person, so mark it complete.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(complete);",
                  "    ",
                  "    var printformailing =  {",
                  "        \"id\": \"printformailing\",",
                  "        \"label\": \"Print For Mailing\",",
                  "        \"help\": \"Print this switch for mailing\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(printformailing);",
                  "    ",
                  "    var print =  {",
                  "        \"id\": \"print\",",
                  "        \"label\": \"Print\",",
                  "        \"help\": \"Print the switch to sign or deliver in person.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(print);",
                  "    ",
                  "    var uncancel =  {",
                  "        \"id\": \"uncancel\",",
                  "        \"label\": \"Un-Cancel\",",
                  "        \"help\": \"Returns a canceled switch back to a state where it can be edited.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(uncancel);",
                  "    ",
                  "    var deleteAction =  {",
                  "        \"id\": \"http-delete\",",
                  "        \"label\": \"Delete\",",
                  "        \"help\": \"Deletes a switch that has been canceled.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(deleteAction);",
                  "    ",
                  "    var startprocessing =  {",
                  "        \"id\": \"startprocessing\",",
                  "        \"label\": \"Start Processing\",",
                  "        \"help\": \"Start the processing of the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(startprocessing);",
                  "    ",
                  "    var reassign =  {",
                  "        \"id\": \"reassign\",",
                  "        \"label\": \"Reassign\",",
                  "        \"help\": \"Reassign the switch\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reassign);",
                  "    ",
                  "    var mailreturned =  {",
                  "        \"id\": \"mailreturned\",",
                  "        \"label\": \"Mail Returned\",",
                  "        \"help\": \"Mail the returned switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(mailreturned);",
                  "    ",
                  "    var reject = {",
                  "        \"id\": \"reject\",",
                  "        \"label\": \"Reject\",",
                  "        \"help\": \"Reject the switch.\"",
                  "    };",
                  "    pm.expect(jsonData.data.items).to.deep.include(reject);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "api-key",
                "value": "{{api_key}}",
                "description": "Api Key"
              }
            ],
            "body": {},
            "url": "{{base_url}}{{actions_postfix}}{{context_param}}",
            "description": "Asserts that the GET `/types/switch/actions` endpoint is returning the correct values."
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "d6e4a28e-b3d1-4b2c-915b-c7876f1f1438",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "49f14a4d-1572-41a3-89aa-f9d17e5f8be7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "b10b502f-0595-408f-9e4f-3943eb03b975",
      "name": "Customers",
      "description": "Folder containing the tests for the PUT `/customers/{customerKey}` and GET `/customers/{customerKey}` routes.",
      "item": [
        {
          "_postman_id": "6a43c845-43bc-4dfd-96fe-a38139a01e45",
          "name": "Single Customer Single Account",
          "description": "Folder containing the test that creates a customer with a single account holder and a single account.",
          "item": [
            {
              "_postman_id": "b2f3dd3a-7d56-463b-a625-d2070a99f79f",
              "name": "Create Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fae585af-f112-4ea2-adda-5a5eb1d428a0",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d026f72b-05ea-4b78-a9ac-5d086054de5e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{context_param}}",
                "description": "Creates a customer with a single account holder and a single account."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bab9f974-75c8-4842-b62a-e2a76d1cdfdc",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1d82a45a-23f0-4aa2-b48b-1361f377084e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f055ce6c-3411-4aaf-9a17-a33aabfd356e",
          "name": "Update Customer",
          "description": "Folder containing the tests that update the created customer by adding and removing account holders, accounts, and renaming customer fields.",
          "item": [
            {
              "_postman_id": "d4825af1-9ac6-440a-b960-baf9485d85c6",
              "name": "Update Customer Rename Values",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2d9c74b1-ba33-4165-a4a5-f11907b6773f",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"000\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}000\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that renames some customer values, adds an account holder and an account to the customer."
              },
              "response": []
            },
            {
              "_postman_id": "1a094cb6-b153-4146-be88-f931078db96c",
              "name": "Update Customer Remove Account",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "992025da-dba6-4a58-bb10-38a80e9a8724",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"m\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"m\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that removes and account from the customer."
              },
              "response": []
            },
            {
              "_postman_id": "383f7111-c323-40d7-a758-c94c8a0048bf",
              "name": "Update Customer Remove Account Holder",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2b1ed99f-d52e-45ca-8e52-96456a95c43f",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{customer_key}}123@clickswitch.com\",\n    \"phoneNumber\": \"2185555123\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"Test\",\n        \"middleInitial\": \"j\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}00\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr..\",\n            \"city\": \"Duluthh\",\n            \"zip\": \"55833\",\n            \"state\": \"WI\",\n            \"country\": \"CA\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that removes an account holder from the customer."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3fd065c2-0ad1-4d2b-8970-8a0ea7d9ce59",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fbbefbfa-fbcf-4c1e-b738-6ef601e65352",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "e5266828-cab5-4004-a716-e104fd5371f5",
          "name": "Get Customer",
          "description": "Folder containing the test that GETs the customer to ensure the updates worked.",
          "item": [
            {
              "_postman_id": "8f414dc1-24a8-4fdc-84d9-4bfd7d55ef2b",
              "name": "Get Created Customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ec257296-6c1d-4c72-9790-2632324427bb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7d0287dd-3363-4563-a7eb-51e9634da12d",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"123\" + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555123\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"Test\",",
                      "        \"middleInitial\": \"j\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString() + \"00\";",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr..\",",
                      "        \"city\": \"Duluthh\",",
                      "        \"zip\": \"55833\",",
                      "        \"state\": \"WI\",",
                      "        \"country\": \"CA\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "  {\n    \"email\": \"{{customer_email}}@clickswitch.com\",\n    \"phoneNumber\": \"2183309148\",\n    \"metadata\": {\n      \"employee_id\": \"jsmith\",\n      \"branch\": \"21\"\n    },\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"John\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Doe\"\n        },\n        {\n        \"firstName\": \"Jane\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Doe\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"212345678900\",\n        \"type\": \"{{checking}}\",\n        \"name\": \"{{checking}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n        \"line1\": \"129 Main St.\",\n        \"city\": \"Metropolis\",\n        \"zip\": \"37484\",\n        \"state\": \"DE\",\n        \"country\": \"US\"\n        }\n    ]\n  } \n \n"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1c252ce-7bd2-4213-8a9e-a59a58aff7f1",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e94fea3-2e95-40bd-8425-0bd21a7455ab",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d4de1479-35cb-4093-8525-36939311ef8f",
          "name": "Single Customer Two Accounts",
          "description": "Folder containing the test that creates a customer containing one account holder and two accounts.",
          "item": [
            {
              "_postman_id": "24374036-0d43-4a1d-8432-968b57e02652",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "01a4cd0a-81d4-4e68-922d-45b278eaf2a0",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "744d30ab-5c71-47e4-a9de-62f86d6ba104",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(1);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "  // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer containing one account holder and two accounts."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "888ec7f8-66d0-4050-89c9-51e7c9783fc7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c437c46a-b4da-46bc-a6fe-a7d1580cd1c5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4a44cfc2-7332-4b17-aceb-9d308b066e46",
          "name": "Joint Customer Single Account",
          "description": "Folder containing the test that creates a customer with two account holders and a single account.",
          "item": [
            {
              "_postman_id": "65c6edd2-7cac-45ec-8e57-3e1c3afa61b0",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9dc534b5-53d2-4e0d-bc0e-9305bd8f08e7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "972411c0-ac98-44b5-b5d9-e6a5a15c609f",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(1);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer containing two account holders and a single account."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3e26dd8f-3644-4153-a852-4605951c691c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16157d8a-bb24-4521-9dd5-c84afcabb29b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c5559167-37bb-4104-a47b-b6464c8dd396",
          "name": "Joint Customer Two Accounts",
          "description": "Folder containing the test that creates a customer with two account holders and two accounts.",
          "item": [
            {
              "_postman_id": "8764422c-5c05-4600-9aa8-fcec7668f185",
              "name": "Create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fd0ed89-ce20-4361-9fbb-944873615ee7",
                    "type": "text/javascript",
                    "exec": [
                      "var timestamp = Date.now();",
                      "",
                      "var randomString = makeRandomString();",
                      "",
                      "// Set the timestamp to environment vars to create an unique",
                      "// customer on each test run.",
                      "pm.environment.set(\"customer_key\", timestamp);",
                      "",
                      "pm.environment.set(\"customer_name\", randomString);",
                      "",
                      "// Creates a random string of length 10.",
                      "function makeRandomString() {",
                      "  var text = \"\";",
                      "  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "  for (var i = 0; i < 10; i++)",
                      "    text += possible.charAt(Math.floor(Math.random() * possible.length));",
                      "",
                      "  return text;",
                      "}",
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6d5da495-3091-4a5f-81f5-9191f441d2ef",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required 1st level elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 3rd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('email');",
                      "    pm.expect(jsonData.data.item).to.have.property('phoneNumber');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolders');",
                      "    pm.expect(jsonData.data.item).to.have.property('accounts');",
                      "    pm.expect(jsonData.data.item).to.have.property('addresses');",
                      "    pm.expect(jsonData.data.item).to.have.property('metadata');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('Customer'); ",
                      "});",
                      "",
                      "pm.test('Has the correct email', function() {",
                      "   var email = jsonData.data.item.email;",
                      "   var customerEmail = pm.environment.get(\"customer_key\");",
                      "   pm.expect(email).to.equal(customerEmail + \"@clickswitch.com\")",
                      "});",
                      "",
                      "pm.test('Has the correct phoneNumber', function() {",
                      "   var phone = jsonData.data.item.phoneNumber;",
                      "   pm.expect(phone).to.equal(\"2185555555\")",
                      "});",
                      "",
                      "pm.test('Has the correct account holders', function() {",
                      "   var accountHolders = jsonData.data.item.accountHolders;",
                      "   ",
                      "   pm.expect(accountHolders).to.have.length(2);",
                      "   ",
                      "   var john = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"J\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    john.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(john);",
                      "    ",
                      "   var jane = {",
                      "        \"firstName\": \"\",",
                      "        \"middleInitial\": \"M\",",
                      "        \"lastName\": \"Test\"",
                      "    };",
                      "    ",
                      "    jane.firstName = pm.environment.get(\"customer_name\");",
                      "                ",
                      "    pm.expect(accountHolders).to.deep.include(jane);",
                      "});",
                      "",
                      "pm.test('Has the correct accounts', function() {",
                      "   var accounts = jsonData.data.item.accounts;",
                      "   ",
                      "   pm.expect(accounts).to.have.length(2);",
                      "   ",
                      "   var account = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 0,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account.number = pm.environment.get(\"customer_key\").toString();",
                      "    account.type = pm.environment.get(\"checking_type\");",
                      "    account.name = pm.environment.get(\"checking_name\");",
                      "    account.routingNumber = pm.environment.get(\"routing_number\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account);",
                      "    ",
                      "    // Todo: This should have an index of 1. Bug reported.",
                      "    var account2 = {",
                      "        \"number\": \"\",",
                      "        \"type\": \"\",",
                      "        \"name\": \"\",",
                      "        \"routingNumber\": \"\",",
                      "        \"index\": 1,",
                      "        \"metadata\": {}",
                      "    };",
                      "    ",
                      "    // Set the account vars to the values passed in the request body.",
                      "    account2.number = pm.environment.get(\"customer_key\").toString()+\"0\";",
                      "    account2.type = pm.environment.get(\"savings_type\");",
                      "    account2.name = pm.environment.get(\"savings_name\");",
                      "    account2.routingNumber = pm.environment.get(\"routing_number_2\");",
                      "    ",
                      "    pm.expect(accounts).to.deep.include(account2);",
                      "    ",
                      "});",
                      "",
                      "pm.test('Has the correct addresses', function() {",
                      "   var addresses = jsonData.data.item.addresses;",
                      "   ",
                      "   pm.expect(addresses).to.have.length(1);",
                      "   ",
                      "   // Todo: Removed the spaces from the address.",
                      "   var address = {",
                      "        \"line1\": \"600 Canal Park Dr.\",",
                      "        \"city\": \"Duluth\",",
                      "        \"zip\": \"55802\",",
                      "        \"state\": \"MN\",",
                      "        \"country\": \"US\"",
                      "    };",
                      "                ",
                      "    pm.expect(addresses).to.deep.include(address);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "api key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"customerKey\": \"{{customer_key}}\",\n    \"email\": \"{{customer_key}}@clickswitch.com\",\n    \"phoneNumber\": \"2185555555\",\n    \"accountHolders\" : [\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"J\",\n        \"lastName\": \"Test\"\n        },\n        {\n        \"firstName\": \"{{customer_name}}\",\n        \"middleInitial\": \"M\",\n        \"lastName\": \"Test\"\n        }\n    ],\n    \"accounts\": [\n        {\n        \"number\": \"{{customer_key}}\",\n        \"type\": \"{{checking_type}}\",\n        \"name\": \"{{checking_name}}\",\n        \"routingNumber\": \"{{routing_number}}\"\n        },\n        {\n        \"number\": \"{{customer_key}}0\",\n        \"type\": \"{{savings_type}}\",\n        \"name\": \"{{savings_name}}\",\n        \"routingNumber\": \"{{routing_number_2}}\"\n        }\n    ],\n    \"addresses\": [\n        {\n            \"line1\": \"600 Canal Park Dr.\",\n            \"city\": \"Duluth\",\n            \"zip\": \"55802\",\n            \"state\": \"MN\",\n            \"country\": \"US\"\n        }\n    ]\n}"
                },
                "url": {
                  "raw": "{{base_url}}{{customers_postfix}}{{customer_key}}",
                  "host": [
                    "{{base_url}}{{customers_postfix}}{{customer_key}}"
                  ],
                  "query": [
                    {
                      "key": "context",
                      "value": "",
                      "equals": true,
                      "disabled": true
                    }
                  ]
                },
                "description": "Test that creates a customer with two account holders and two accounts."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fa3918c7-e052-48de-a24f-e3e3ad7a9913",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c0b9dcf-198f-4136-816c-da0466b173c2",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "449fb18f-56cc-434c-b8d2-105b2abfe4bb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "54c1da51-b04e-49fa-b4fc-a0890d98309a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "f359ecb9-c546-4149-9d89-fa6687133697",
      "name": "Targets",
      "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
      "item": [
        {
          "_postman_id": "d3fd99c8-7f5d-447c-a60c-b408eedb0f1a",
          "name": "Deposits",
          "description": "Folder containing the tests that find a deposit target.",
          "item": [
            {
              "_postman_id": "44197ad8-446c-4661-9561-f8bf87d4d739",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "ab1b8835-9ea3-4107-8e3a-592a77c2fbd7",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}{{context_param}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "fb890a1c-5e74-4d23-bfd2-294d6ff02161",
          "name": "Deposits Print Only",
          "description": "Folder containing the tests that find a print only deposit target.",
          "item": [
            {
              "_postman_id": "f937f879-dd3d-41a1-bae8-12e275cb127e",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a026d7c-53d9-417c-a1a9-0cc5e523c9f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_print_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_print_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "98b568fb-d9ea-4f3c-aa3e-6eb1fa9332e2",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc35a7-dcc5-4588-a688-b3508d48835b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c0ffdb5-8dc3-457a-b310-abeb59957e26",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "495c4015-ece3-4c26-b205-2c9ff1a3dcd9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "2e0e9ae4-4e27-4e97-ab3c-72716eedf370",
          "name": "Deposits Online Only",
          "description": "Folder containing the tests that find a online only deposit target.",
          "item": [
            {
              "_postman_id": "df27c92b-ed6a-4c7f-9ab3-edc3fd2e4237",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96f36281-d983-4cd3-b650-56aef5c60e0c",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_online_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_online_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "7f72fad6-1c50-467e-8af2-92e0ede7282c",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5b905ea-437e-4b74-b222-56195e89a5f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "259129d1-ff5f-4ffb-b5a2-31a9ab9e5b5b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "03ea0fbb-28d7-4151-94d5-96bd84a56b84",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9c883c9a-c811-4120-8790-ba1c514f41a2",
          "name": "Split Deposits",
          "description": "Folder containing the tests that finds a split deposit target.",
          "item": [
            {
              "_postman_id": "9cb4657f-3c2e-4746-b3d4-e60aea460f66",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10795ed6-ce38-4565-8bdb-19fc007914ed",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"split_deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{split_deposit_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{split_deposit_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "3c53b5ef-e5c7-403c-bed2-54ee2eb36733",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e61e303a-619f-4bcf-aa1a-8b5f128fc5bc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 3,",
                      "            \"maxChecking\": 3,",
                      "            \"maxSavings\": 3,",
                      "            \"choices\": [],",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": true,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Is Entire Net Amount\",",
                      "                    \"label\": \"Split[1]_Is Entire Net Amount\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_SocialSecurityNumber\",",
                      "                \"label\": \"SocialSecurityNumber\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{split_deposit_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d93cfc3-8c8b-42c1-8d01-71b448777378",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5a33755b-181b-4d3c-94fe-37e66da9cc7e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c1e8e5e6-b14d-42ac-89db-a627084795f5",
          "name": "Payments",
          "description": "Folder containing the tests that find a payment target.",
          "item": [
            {
              "_postman_id": "bb9a93d2-413b-4f62-b7bc-9188b34b1d3f",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47bd635b-41c3-4c34-9f84-4510d828b3c0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "85536a7c-f217-4a01-8c8e-1c378d68a19b",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c32d0f62-0067-43d3-b4e7-3becab451b1a",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.equal(3);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9500365-9511-4bf2-95b4-ea818babc929",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e67aca5-900e-43bc-8111-59c6c7ae6ade",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4b3ad8ee-2a75-4ba5-a8b6-3dad3aa7820d",
          "name": "Payments Print Only",
          "description": "Folder containing the tests that find a print only payment target.",
          "item": [
            {
              "_postman_id": "65dfb559-9ece-4a1c-a825-0e23b7b781b9",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bda6b21d-4ac8-4bf0-84ca-5a5b57d7905b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_print_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_print_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "a73c2172-b929-452f-996a-e657c4eb341b",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77525ab5-0ef7-4dae-b49e-71380f5a4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.equal(3);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payment_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8695ee9-2ce3-4b07-9c0f-18f591e4c942",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b40855f1-9802-40df-b929-318cfc0de191",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "b58508c4-1567-4c52-83cb-2101ff69fd7a",
          "name": "Payments Online Only",
          "description": "Folder containing the tests that find an online only payment target.",
          "item": [
            {
              "_postman_id": "1fc4a6ef-7c1f-4e7e-9df1-3bca5f3fdf1d",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e64aea4-1175-4ff1-ad86-1a0886f45ec0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payments_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_online_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_online_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "76e00f2d-8143-4312-9b68-d560d3f1435a",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76f0cfa0-2c33-4ebf-a49b-349cd95ff332",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{targets_postfix3}}{{payments_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e0f4761e-690b-4320-8652-aba30853e02e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2f4ff74-89c0-4623-bd15-833450903b61",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d5d70d89-ed1b-4945-9907-3d21e5ae34aa",
          "name": "Locations",
          "description": "Folder containing the tests that find a target by location.",
          "item": [
            {
              "_postman_id": "69525eb6-e783-4c5c-a6af-0e38be41efbb",
              "name": "Target By Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has at least one item', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "       pm.expect(i).to.have.property('locationId');",
                      "       pm.expect(i).to.have.property('name');",
                      "       pm.expect(i).to.have.property('address');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('location'); ",
                      "});",
                      "",
                      "pm.environment.set(\"location_id\", jsonData.data.items[0].locationId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                  "host": [
                    "{{base_url}}{{locations_postfix}}"
                  ],
                  "query": [
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{location_name}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "987a0848-308e-432b-aa51-aab711ac353b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "da4426ab-5a69-42b0-bd0d-3eee37b8cf51",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "9674f44a-1e11-433e-8cf1-b87ef2b72fdb",
      "name": "Targets Copy",
      "description": "Folder containing the tests for the GET `/targets`, `/targets/{targetId}`, and `/locations` routes.",
      "item": [
        {
          "_postman_id": "8e841020-7806-4af2-9fdf-eedc713010f7",
          "name": "Deposits",
          "description": "Folder containing the tests that find a deposit target.",
          "item": [
            {
              "_postman_id": "765421bb-f7b6-4b88-8ce8-7bfd4a46e0d1",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd56822-e0af-4fe0-ab14-37c92f907bcd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "ccc42849-7cd4-4076-9cad-96ba2a08abf7",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95385dad-0e49-4d91-99f0-52b75fe91ffd",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_target_id}}{{context_param}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eb920b3c-4af1-44ff-adf0-be00bc730a89",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2cbf03b3-7300-4c39-9b0e-6329a580f48b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4841535c-090e-41fa-9b01-9b46858c196f",
          "name": "Deposits Print Only",
          "description": "Folder containing the tests that find a print only deposit target.",
          "item": [
            {
              "_postman_id": "63b3333e-a978-4485-9093-81173db167a8",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a026d7c-53d9-417c-a1a9-0cc5e523c9f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_print_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_print_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "402b1cec-4273-4e4a-a256-48905a5f667e",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc35a7-dcc5-4588-a688-b3508d48835b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 1,",
                      "            \"maxChecking\": 1,",
                      "            \"maxSavings\": 1,",
                      "            \"choices\": [],",
                      "            \"fields\": []",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_Net or Amount (in dollars)\",",
                      "                \"label\": \"Net or Amount (in dollars)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_or Percentage of Pay (1 - 100)\",",
                      "                \"label\": \"or Percentage of Pay (1 - 100)\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Depositor's Full Mailing Address\",",
                      "                \"label\": \"Depositor's Full Mailing Address\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Employee ID\",",
                      "                \"label\": \"Employee ID\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            },",
                      "            {",
                      "                \"key\": \"Custom_Last 4 of SSN\",",
                      "                \"label\": \"Last 4 of SSN\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": true",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1c0ffdb5-8dc3-457a-b310-abeb59957e26",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "495c4015-ece3-4c26-b205-2c9ff1a3dcd9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "76a0768b-ded2-4ab6-82cb-93d810675297",
          "name": "Deposits Online Only",
          "description": "Folder containing the tests that find a online only deposit target.",
          "item": [
            {
              "_postman_id": "a711d8d6-6f73-44b9-a026-da9f7babdbfc",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96f36281-d983-4cd3-b650-56aef5c60e0c",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"deposit_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{deposit_online_only_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{deposit_online_only_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "3cf6dc76-321e-4a55-9471-ca0f57e930e9",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5b905ea-437e-4b74-b222-56195e89a5f0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{deposit_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "259129d1-ff5f-4ffb-b5a2-31a9ab9e5b5b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "03ea0fbb-28d7-4151-94d5-96bd84a56b84",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "ce9931f5-ad36-4f54-ba4d-a0046cd39355",
          "name": "Split Deposits",
          "description": "Folder containing the tests that finds a split deposit target.",
          "item": [
            {
              "_postman_id": "ec66ceac-9078-48df-b106-035ae6ca47e7",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10795ed6-ce38-4565-8bdb-19fc007914ed",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.eql('deposit');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"split_deposit_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=deposit&name={{split_deposit_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "deposit",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{split_deposit_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "d1a88bc9-eceb-4516-950f-2596165fb7db",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e61e303a-619f-4bcf-aa1a-8b5f128fc5bc",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('deposit'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"1\",",
                      "        \"label\": \"Payroll\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var ux = {",
                      "        \"accounts\": {",
                      "            \"limit\": 3,",
                      "            \"maxChecking\": 3,",
                      "            \"maxSavings\": 3,",
                      "            \"choices\": [],",
                      "            \"fields\": [",
                      "                {",
                      "                    \"key\": \"splitAmount\",",
                      "                    \"label\": \"Percent or Fixed Amount\",",
                      "                    \"type\": \"textbox\",",
                      "                    \"required\": true,",
                      "                    \"regex\": \"^(1-9\\\\\\\\d*\\\\\\\\.\\\\\\\\d2|(100(.0)?|(0(\\\\\\\\.1-9))|(1-90-9?(\\\\\\\\.\\\\\\\\d)?)))$\",",
                      "                    \"validationMessage\": \"Must be an amount with 2 decimal places or a whole percentage\"",
                      "                },",
                      "                {",
                      "                    \"key\": \"splitType\",",
                      "                    \"label\": \"Type\",",
                      "                    \"type\": \"select\",",
                      "                    \"required\": true,",
                      "                    \"selections\": [",
                      "                        {",
                      "                            \"key\": \"remainder\",",
                      "                            \"label\": \"Remainder\"",
                      "                        }",
                      "                    ]",
                      "                },",
                      "                {",
                      "                    \"key\": \"Custom_Is Entire Net Amount\",",
                      "                    \"label\": \"Split[1]_Is Entire Net Amount\",",
                      "                    \"type\": \"Checkbox\",",
                      "                    \"required\": false",
                      "                }",
                      "            ]",
                      "        },",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"Custom_SocialSecurityNumber\",",
                      "                \"label\": \"SocialSecurityNumber\",",
                      "                \"type\": \"textbox\",",
                      "                \"required\": false",
                      "            }",
                      "        ]",
                      "    };",
                      "",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{split_deposit_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d93cfc3-8c8b-42c1-8d01-71b448777378",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5a33755b-181b-4d3c-94fe-37e66da9cc7e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "889465b5-415d-49d5-89b5-53f7c12cbf6d",
          "name": "Payments",
          "description": "Folder containing the tests that find a payment target.",
          "item": [
            {
              "_postman_id": "3f5adc77-a0a9-40f4-b4e0-1929d0f8efbc",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47bd635b-41c3-4c34-9f84-4510d828b3c0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_target_name}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_target_name}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "77194570-1764-4cc9-9d2c-0d6fd01857ed",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c32d0f62-0067-43d3-b4e7-3becab451b1a",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.equal(3);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('submit'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payment_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9500365-9511-4bf2-95b4-ea818babc929",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e67aca5-900e-43bc-8111-59c6c7ae6ade",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "09d9d12a-ba6e-4b54-af7a-93626bcbbbd6",
          "name": "Payments Print Only",
          "description": "Folder containing the tests that find a print only payment target.",
          "item": [
            {
              "_postman_id": "24cb6efa-a572-467c-9f2b-db8c42242970",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bda6b21d-4ac8-4bf0-84ca-5a5b57d7905b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payment_print_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_print_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_print_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "3582a16d-4d07-4f8f-84d9-4843c5411252",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77525ab5-0ef7-4dae-b49e-71380f5a4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "    var uxAccounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [],",
                      "        \"fields\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(uxAccounts); ",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.equal(3);",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('print'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payment_print_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8695ee9-2ce3-4b07-9c0f-18f591e4c942",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b40855f1-9802-40df-b929-318cfc0de191",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "8e86a291-8f1a-4bc7-b14d-557fac4a9312",
          "name": "Payments Online Only",
          "description": "Folder containing the tests that find an online only payment target.",
          "item": [
            {
              "_postman_id": "2c2d4326-1c3b-44d1-83ba-df1ef4febc40",
              "name": "Target By Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e64aea4-1175-4ff1-ad86-1a0886f45ec0",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has some items', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "        pm.expect(i).to.have.property('targetId');",
                      "        pm.expect(i).to.have.property('name');",
                      "        pm.expect(i).to.have.property('type');",
                      "        pm.expect(i.type).to.equal('payment');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('types#targets'); ",
                      "});",
                      "",
                      "// Set an environment variable to test get target by id next.",
                      "pm.environment.set(\"payments_online_target_id\", jsonData.data.items[0].targetId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{targets_postfix2}}?type=payment&name={{payment_online_only}}&customer={{customer_key}}",
                  "host": [
                    "{{base_url}}{{targets_postfix2}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "payment",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{payment_online_only}}",
                      "equals": true
                    },
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "7062732d-d4fb-4bed-bb84-b9f00823dfca",
              "name": "Target By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76f0cfa0-2c33-4ebf-a49b-349cd95ff332",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "    pm.expect(jsonData.data).to.have.property('item');",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('finalAction');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('target'); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal('payment'); ",
                      "});",
                      "",
                      "pm.test('Has the correct categories', function() {",
                      "    var categories = {",
                      "        \"key\": \"15\",",
                      "        \"label\": \"Utility\"",
                      "    };  ",
                      "    pm.expect(jsonData.data.item.categories).to.deep.include(categories); ",
                      "});",
                      "",
                      "pm.test('Has the correct type element', function() {",
                      "    var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a test Biller. These are Online Only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux); ",
                      "});",
                      "",
                      "pm.test('Has the correct final action', function() {",
                      "   pm.expect(jsonData.data.item.finalAction).to.equal('complete'); ",
                      "});",
                      "",
                      "",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{targets_postfix3}}{{payments_online_target_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e0f4761e-690b-4320-8652-aba30853e02e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2f4ff74-89c0-4623-bd15-833450903b61",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "81465d95-5212-4050-95fa-26b026491360",
          "name": "Locations",
          "description": "Folder containing the tests that find a target by location.",
          "item": [
            {
              "_postman_id": "cecebac9-995f-4c30-b2ff-ab28114879e2",
              "name": "Target By Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e307f46d-3641-4098-8537-155ae6a1d450",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has at least one item', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.be.above(0);",
                      "   pm.expect(jsonData.data.items.length).to.be.above(0);",
                      "});",
                      "",
                      "pm.test('Has required inner elements', function() {",
                      "    jsonData.data.items.forEach(i => {",
                      "       pm.expect(i).to.have.property('locationId');",
                      "       pm.expect(i).to.have.property('name');",
                      "       pm.expect(i).to.have.property('address');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Has the correct kind attribute', function() {",
                      "   pm.expect(jsonData.data.kind).to.equal('location'); ",
                      "});",
                      "",
                      "pm.environment.set(\"location_id\", jsonData.data.items[0].locationId);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}{{locations_postfix}}?customer={{customer_key}}&name={{location_name}}",
                  "host": [
                    "{{base_url}}{{locations_postfix}}"
                  ],
                  "query": [
                    {
                      "key": "customer",
                      "value": "{{customer_key}}",
                      "equals": true
                    },
                    {
                      "key": "name",
                      "value": "{{location_name}}",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "987a0848-308e-432b-aa51-aab711ac353b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "da4426ab-5a69-42b0-bd0d-3eee37b8cf51",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "63dc3038-b599-4e56-b35f-52d562974cbb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bcf30ce0-ca6c-424f-86a7-f109d862422e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "1ebd6b99-1ede-4c86-989d-d4fd1388408d",
      "name": "Switches",
      "description": "Folder containing the tests for the GET `/customers/{customerKey}/switches`, POST `/customers/{customerKey}/switches`, GET `/customers/{customerKey}/switches/{switchIndex}`, PUT `/customers/{customerKey}/switches/{switchIndex}`, DELETE `/customers/{customerKey}/switches/{switchIndex}`, and POST `/customers/{customerKey}/switches/{switchIndex}/action` routes.",
      "item": [
        {
          "_postman_id": "493acc59-f1a5-42ae-b688-5a027596e36c",
          "name": "Deposit Using TargetId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a deposit target.",
          "item": [
            {
              "_postman_id": "e5a63129-1e0c-49f2-b959-6b67f8c2b958",
              "name": "Get Switches",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3939a64-cc66-468b-b40c-636565c4076b",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has empty array of switches', function() {",
                      "   pm.expect(jsonData.data.currentItemCount).to.equal(0);",
                      "   pm.expect(jsonData.data.items).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}",
                "description": "Should return empty list since no switches have been created yet."
              },
              "response": []
            },
            {
              "_postman_id": "9e57d71f-31df-48ba-8e2d-eb0b9acc1f55",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1e78918a-5289-42d1-9bfe-158a7b64381e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Depositor's Full Mailing Address\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "8cf55c0f-bb91-4ba3-998f-789736c3ba9d",
              "name": "Get Switch By Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Depositor's Full Mailing Address\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "297f0eb2-95ce-4110-b995-2835a6b9d9ba",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5e8e6ce-e8e7-459a-9f6c-abfd056f1128",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"deposit_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Submit\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"500\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"50\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\",",
                      "            \"Custom_Employee ID\": \"123\",",
                      "            \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": \"500\",\r\n      \"Custom_or Percentage of Pay (1 - 100)\": \"50\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "c8690843-2f65-4c9e-adbc-8f57405a6e2b",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9a5690-3ae7-4784-a80f-1de7b2c418db",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "4778658b-0f09-479f-8d1c-18440e40ee55",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "69223bbd-c247-4ab4-894b-7a9aa7540cd4",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "537299b4-9cc6-4bc5-a8d6-70384fb437c7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "20541407-4ed3-49ec-ae9c-66b5bd793f99",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9fd88b31-077d-413e-9464-ee2116e418d0",
          "name": "Deposit using LocationId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a location target.",
          "item": [
            {
              "_postman_id": "812d4073-ea29-4aa8-adc8-3fa3fda75738",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43dc4729-45de-4aa5-9e5f-cb57ff9ce355",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Work Location\": \"This field is required\",",
                      "                    \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                    \"category\": \"This field is required\"",
                      "                },",
                      "                \"overall\": [",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_WorkLocationDepartment\": \"This field is required\",",
                      "                    \"Custom_Last 3 of SIN\": \"This field is required\",",
                      "                    \"category\": \"This field is required\"",
                      "                },",
                      "                \"overall\": [",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "       values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_Work Location\": null,",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 4 of SSN\": null,",
                      "                \"Custom_Amount or Net Pay\": null,",
                      "                \"Custom_or Percentage\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_WorkLocationDepartment\": null,",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 3 of SIN\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"deposit\",\n  \"locationId\": \"{{location_id}}\",\n  \"accountholderIndex\": 0,\n  \"values\": {\n    \"accounts\": [\n      {\n        \"index\": 0\n      }\n    ]\n  }\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "2e23b02a-8082-4df4-b627-73d3f0da1231",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cae73f51-d132-4101-a403-19b29b781ac9",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has the correct context', function() {",
                      "    pm.expect(jsonData.context).to.equal('testing_context');",
                      "})",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_WorkLocationDepartment\": \"This field is required\",",
                      "                    \"Custom_Last 3 of SIN\": \"This field is required\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_Amount or Net Pay\": \"Net\",",
                      "                \"Custom_or Percentage\": \"100\",",
                      "                \"Custom_Last 4 of SSN\": \"1234\",",
                      "                \"Custom_Employee ID\": \"123\",",
                      "\"Custom_Work Location\": \"123 Main Street\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_WorkLocationDepartment\": null,",
                      "                \"Custom_Employee ID\": \"123\",",
                      "                \"Custom_Last 3 of SIN\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"category\": 1,\r\n      \"Custom_Amount or Net Pay\": \"Net\",\r\n      \"Custom_or Percentage\": \"100\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Work Location\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1{{context_param}}"
              },
              "response": []
            },
            {
              "_postman_id": "5da91877-33d4-4be3-ada1-0f9c27951f95",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e5d8981-0a19-45f0-b122-184fed7d4be6",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "4968361b-d45d-4178-99bf-37e1924984d0",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a65b218-a347-42d8-97de-f8073082f13f",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {}",
                      "    };",
                      "    ",
                      "   jsonData.data.item.state.validation = {};",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "fecbab8a-87df-48ef-9ee4-1bdae826b073",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6c6065f0-2453-4506-9b91-9e8e9b5fcbe5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c77d980d-7e50-4432-a298-9e5de60fd1c8",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "a0ae4813-4b87-4c2d-aac1-1b6529876368",
          "name": "Deposit using neither",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete an unknown deposit target switch.",
          "item": [
            {
              "_postman_id": "423d0a3b-c2dd-4181-9d2d-7eef2c2a627d",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e9353eb-a31c-4b79-96b3-f0da8b150a5a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_Work Location\": \"This field is required\",",
                      "                    \"Custom_Last 4 of SSN\": \"This field is required\",",
                      "                    \"category\": \"This field is required\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_WorkLocationDepartment\": \"This field is required\",",
                      "                    \"Custom_Last 3 of SIN\": \"This field is required\",",
                      "                    \"category\": \"This field is required\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_Work Location\": null,",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 4 of SSN\": null,",
                      "                \"Custom_Amount or Net Pay\": null,",
                      "                \"Custom_or Percentage\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_WorkLocationDepartment\": null,",
                      "                \"Custom_Employee ID\": null,",
                      "                \"Custom_Last 3 of SIN\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "dfd1a849-0132-440f-9b46-61eab8f137ba",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01b44652-b319-4df7-a037-b9b50b145c5b",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.name).to.have.string(\"Test\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Custom_WorkLocationDepartment\": \"This field is required\",",
                      "                    \"Custom_Last 3 of SIN\": \"This field is required\",",
                      "                     \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"Duluth\",",
                      "                    \"state\": \"MN\",",
                      "                    \"zip\": \"55803\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_Work Location\": \"123 Main Street\",",
                      "                \"Custom_Employee ID\": \"123\",",
                      "                \"Custom_Last 4 of SSN\": \"1234\",",
                      "                \"Custom_Amount or Net Pay\": \"Net\",",
                      "                \"Custom_or Percentage\": \"100\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"Duluth\",",
                      "                    \"state\": \"MN\",",
                      "                    \"zip\": \"55803\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_WorkLocationDepartment\": null,",
                      "                \"Custom_Employee ID\": \"123\",",
                      "                \"Custom_Last 3 of SIN\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ], \r\n    \"fields\": {\r\n\t\t\"name\": \"Test\",\r\n\t\t\"mailingAddress\": {\r\n\t\t  \"line1\": \"123 Main Street\",\r\n\t\t  \"city\": \"Duluth\",\r\n\t\t  \"state\": \"MN\",\r\n\t\t  \"zip\": 55803\r\n\t\t},\r\n\t\t\"category\": 1,\r\n\t\t\"Custom_Amount or Net Pay\": \"Net\",\r\n\t\t\"Custom_or Percentage\": \"100\",\r\n\t\t\"Custom_Last 4 of SSN\": \"1234\",\r\n\t\t\"Custom_Employee ID\": \"123\",\r\n\t\t\"Custom_Work Location\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "2d07a9f7-bdc5-4f14-992e-2f56797fb42f",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29197893-057f-4f6d-882a-6049e8512b65",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "fd93cd4f-893b-4224-ae0c-98a85c0aae58",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a6686e9-2e2a-4340-b63a-101309908ceb",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {}",
                      "    };",
                      "    ",
                      "   jsonData.data.item.state.validation = {};",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "d75656d1-f564-4d30-9373-941d37e79dbe",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "31f777c7-bfa4-418d-a09c-f64991954fa7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cd11666c-da12-444f-88b0-b516790882fb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "644c5db1-b9bd-4378-b1fc-f95d84e58baa",
          "name": "Split Deposits",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a split deposit target switch.",
          "item": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ad33e107-5e8f-4873-8125-55059c39ea59",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bfca0bb7-0237-4c70-bded-e9476dae30ea",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "8456429d-8ce8-4646-9176-d2fb3acadef8",
          "name": "Payment using TargetId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a payment target.",
          "item": [
            {
              "_postman_id": "06d1ebd8-0229-4bdf-aa68-c5e293f25834",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a118597-7d96-4700-ab9a-2083b6cff886",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Date to Withdraw funds\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "8da2e701-42e4-4248-8c98-77a5d56c6375",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6943736-a9aa-41d9-95e4-002f231c6b3a",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get(\"payment_target_id\"));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "   var values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Date to Withdraw funds\": \"12-12-18\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"123 Main Street\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"New York\",",
                      "                \"state\": \"NY\",",
                      "                \"zip\": \"55555\"",
                      "            },",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n      \"Switch_ContactServiceAddress\": {\r\n      \t\"line1\": \"123 Main Street\",\r\n      \t\"city\": \"New York\",\r\n      \t\"state\": \"NY\",\r\n      \t\"zip\": \"55555\"\r\n      },\r\n      \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "ab3936e5-d129-425b-bbe3-1952f2818508",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "(isCanada ? pm.test.skip : pm.test)('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "0e40dd80-7048-48fa-a275-6ecd86aafd69",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "0a5d2aee-dfd9-4567-a42f-444561c591d6",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "124087d6-e09d-423f-8de8-8bf6d7527b20",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3734194b-9f59-44f8-a3ae-791431a0e491",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "d7721cc1-f91c-4323-a65f-bb8d43c25e97",
          "name": "Payment using LocationId",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using a location payment target.",
          "item": [
            {
              "_postman_id": "c3973b0e-d0fb-479c-ba0d-4f7df9ec4abb",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b7dd23a-229d-4617-b3ef-5c7d72fdf72e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"This field is required\"",
                      "                },",
                      "                \"overall\": [",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"This field is required\"",
                      "                },",
                      "                \"overall\": [",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "       values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Custom_Withdrawal Date\": null,",
                      "                \"Custom_Amount\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values =  {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 0,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "ad8e61f1-64aa-4b17-9303-a27be7be5328",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6993eb6f-5f8c-4bdd-9f78-58b378accf5c",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.locationId).to.equal(pm.environment.get('location_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"category\": 1,",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"locationId\": \"{{location_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n    \t\"category\": 1,\r\n\t\t\"Custom_Withdrawal Date\": \"12-12-18\",\r\n\t\t\"Custom_Amount\": \"100\",\r\n\t\t\"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "dc2cdabc-e9dd-4662-8837-14f5d5585e89",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "8df63a3b-5041-4c41-b456-0e9f96a5c6a0",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "4ee8c5b4-a23c-4ecb-aa11-4becb23b9c1d",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ec940722-368d-4b6d-ab74-e1464b2ff82d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "009b4804-0c3e-4193-84a7-cb4944b32c16",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "e858d5e4-68af-4ec6-b006-2192ff647a5a",
          "name": "Payment using neither",
          "description": "Folder containing the tests that create, update, submit, cancel, and delete a switch using an unknown payment target.",
          "item": [
            {
              "_postman_id": "938c29cb-bddf-4d67-8d17-5ef2f9ac9957",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d8712b75-f6a3-4d47-969e-d7eebabb3625",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"This field is required\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"Switch_BillingAccountNumber\": \"This field is required\",",
                      "                    \"category\": \"This field is required\",",
                      "                    \"name\": \"This field is required\",",
                      "                    \"mailingAddress\": {",
                      "                        \"line1\": \"This field is required\",",
                      "                        \"city\": \"This field is required\",",
                      "                        \"state\": \"This field is required\",",
                      "                        \"zip\": \"This field is required\"",
                      "                    }",
                      "                },",
                      "                \"overall\": [",
                      "                    \"At least one account must be selected\"",
                      "                ]",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (!isCanada) {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Custom_Withdrawal Date\": null,",
                      "                \"Custom_Amount\": null,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    } else {",
                      "        values = {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"name\": null,",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": null,",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": null,",
                      "                    \"state\": null,",
                      "                    \"zip\": null",
                      "                },",
                      "                \"category\": 0,",
                      "                \"Switch_BillingAccountNumber\": null",
                      "            }",
                      "        };",
                      "    }",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "e3fee01f-58d5-4158-9f9f-435cca358fdd",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3fa99aa-57ed-47bf-9a2d-fbc2b7857aa1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.name).to.have.string(\"Test\");",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                     \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Submit\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                     \"mailingAddress\": {}",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };  ",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*1157\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*1570\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    if (pm.environment.get('isCanada') === 'false') {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"Duluth\",",
                      "                    \"state\": \"MN\",",
                      "                    \"zip\": \"55803\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Custom_Withdrawal Date\": \"12-12-18\",",
                      "                \"Custom_Amount\": \"100\",",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    } else {",
                      "         values = {",
                      "            \"accounts\": [",
                      "                {",
                      "                    \"index\": 0",
                      "                }",
                      "            ],",
                      "            \"fields\": {",
                      "                \"name\": \"Test\",",
                      "                \"phoneNumber\": null,",
                      "                \"website\": null,",
                      "                \"mailingAddress\": {",
                      "                    \"line1\": \"123 Main Street\",",
                      "                    \"line2\": null,",
                      "                    \"line3\": null,",
                      "                    \"city\": \"Duluth\",",
                      "                    \"state\": \"MN\",",
                      "                    \"zip\": \"55803\"",
                      "                },",
                      "                \"category\": 1,",
                      "                \"Switch_BillingAccountNumber\": \"1234\"",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ], \r\n    \"fields\": {\r\n\t\t\"name\": \"Test\",\r\n\t\t\"mailingAddress\": {\r\n\t\t  \"line1\": \"123 Main Street\",\r\n\t\t  \"city\": \"Duluth\",\r\n\t\t  \"state\": \"MN\",\r\n\t\t  \"zip\": 55803\r\n\t\t},\r\n\t\t\"category\": 1,\r\n\t\t\"Custom_Withdrawal Date\": \"12-12-18\",\r\n        \"Custom_Amount\": \"100\",\r\n        \"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "cfb05469-768c-4fc4-855b-8f6984d4c26e",
              "name": "Submit Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "466adb61-8322-4aa8-82f8-fdd9e24c7c78",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Submitted\",",
                      "        \"actions\": [",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Submit\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "f50adcfd-2f02-47da-80b7-d23282116179",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                 \"mailingAddress\": {}",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "4ca55fdf-e5fd-4f67-ac2e-487e3758e67c",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "df745722-a50c-4f91-8955-5ebf8bedc944",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2193e97-5b25-4643-a9b7-6ee517f1a26b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "c3ade53b-1f0f-489e-97a2-fa8c00dfb622",
          "name": "Payment Print Only",
          "description": "Folder containing the tests that create, update and delete a switch using a print only payment target.",
          "item": [
            {
              "_postman_id": "6417f012-4fbf-4f09-b220-faa31783b451",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7680edc-9cb2-4f90-b750-f1ea16e024c1",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('payment_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state =   {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"line1\": \"This field is required\",",
                      "                \"city\": \"This field is required\",",
                      "                \"state\": \"This field is required\",",
                      "                \"zip\": \"This field is required\",",
                      "                \"Switch_BillingAccountNumber\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Date to Withdraw funds\": null,",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": null,",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": null,",
                      "                \"state\": null,",
                      "                \"zip\": null",
                      "            },",
                      "            \"Switch_BillingAccountNumber\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "ccc2eb33-99f8-445c-8833-f80fef334be3",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c35447e7-77e5-4f5c-a4c8-e1f4a83d2487",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Payment\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('payment_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "   var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Ready\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\",",
                      "                \"Print\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Incomplete\",",
                      "            \"actions\": [",
                      "                \"HTTP-PUT\",",
                      "                \"Cancel\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "   ",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values = {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Date to Withdraw funds\": \"12-12-18\",",
                      "            \"Switch_ContactServiceAddress\": {",
                      "                \"line1\": \"123 Main Street\",",
                      "                \"line2\": null,",
                      "                \"line3\": null,",
                      "                \"city\": \"New York\",",
                      "                \"state\": \"NY\",",
                      "                \"zip\": \"55555\"",
                      "            },",
                      "            \"Switch_BillingAccountNumber\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"payment\",\r\n  \"targetId\": \"{{payment_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n\t\t\"Custom_Date to Withdraw funds\": \"12-12-18\",\r\n\t\t\"Switch_ContactServiceAddress\": {\r\n\t\t\t\"line1\": \"123 Main Street\",\r\n\t\t\t\"city\": \"New York\",\r\n\t\t\t\"state\": \"NY\",\r\n\t\t\t\"zip\": \"55555\"\r\n\t\t},\r\n\t\t\"Switch_BillingAccountNumber\": \"1234\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "8072f6b0-8129-4df5-b70a-88ae1ed424a5",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "const isCanada = pm.environment.get('isCanada') === 'true';",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    if (!isCanada) {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {},",
                      "                \"overall\": []",
                      "            }",
                      "    };",
                      "    } else {",
                      "        state = {",
                      "            \"status\": \"Canceled\",",
                      "            \"actions\": [",
                      "                \"Uncancel\",",
                      "                \"HTTP-DELETE\"",
                      "            ],",
                      "            \"validation\": {",
                      "                \"accounts\": [],",
                      "                \"fields\": {",
                      "                    \"state\": \"Must be a valid 2 character Province or Territory code\",",
                      "                    \"zip\": \"Must be a valid postal code\"",
                      "                },",
                      "                \"overall\": []",
                      "            }",
                      "        };",
                      "    }",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "14dac58f-eae7-448e-964e-bc572ff866e9",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e2c9fcb5-b2df-4a8d-9af2-8fa54176da7d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcd57b52-e02c-4a4b-abd8-fe74de1fd3e7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "1a4a756d-77f7-4cf9-a88c-3cbb1342548b",
          "name": "Deposit Online Only",
          "description": "Folder containing the tests that create, update and delete a switch using a print only deposit target.",
          "item": [
            {
              "_postman_id": "3e28dc2d-a825-4c84-a014-ea1fd0be2403",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7868b44e-5ea4-4d92-aefd-16d228e67edb",
                    "type": "text/javascript",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_online_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_online_target_id}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "8bd087ce-98b3-4ed6-9ed8-03da14439a64",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "954bab1b-02c0-4a9f-a4f4-9e7b61287a2f",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_online_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                \"At least one account must be selected\"",
                      "            ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var ux = {",
                      "        \"fields\": [",
                      "            {",
                      "                \"key\": \"instructions\",",
                      "                \"label\": \"Instructions\",",
                      "                \"type\": \"html\",",
                      "                \"body\": \"This is a Test biller. These are Online only instructions.\"",
                      "            }",
                      "        ]",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux).to.deep.include(ux);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": []",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_online_target_id}}\",\r\n  \"accountholderIndex\": 0\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "767dbaa9-9d73-478a-8e29-e00d9749b64d",
              "name": "Cancel Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Canceled\",",
                      "        \"actions\": [",
                      "            \"Uncancel\",",
                      "            \"HTTP-DELETE\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": [",
                      "                        \"At least one account must be selected\"",
                      "                    ]",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Cancel\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "bdb9e91c-b594-4177-9912-667671929952",
              "name": "Delete Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1be1b33e-16f0-4720-af7c-af5cad2f089b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1",
                "description": "\t"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b652b3c1-9694-486a-9762-389c6a4b147d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "049ad08e-2ce2-4f5f-acdd-27ea10487ba9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "11d2b950-0c79-4aeb-85a2-d68c5acce5c4",
          "name": "Deposit Print Only",
          "description": "Folder containing the tests that create, update, submit, cancel, and deletea switch for a print only deposit target.",
          "item": [
            {
              "_postman_id": "298a20db-5dee-470c-b5a6-571af056b260",
              "name": "Create Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd144dbd-9698-49f4-9216-b876b393e95e",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state =  {",
                      "        \"status\": \"Incomplete\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {",
                      "                \"Custom_Depositor's Full Mailing Address\": \"This field is required\",",
                      "                \"Custom_Last 4 of SSN\": \"This field is required\"",
                      "            },",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": null,",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": null,",
                      "            \"Custom_Depositor's Full Mailing Address\": null,",
                      "            \"Custom_Employee ID\": null,",
                      "            \"Custom_Last 4 of SSN\": null",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ]\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}"
              },
              "response": []
            },
            {
              "_postman_id": "d16ccaab-5860-4b98-b16c-1f54bd541e44",
              "name": "Update Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fe6e487-c16d-4bfe-833a-db4effd09deb",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has required elements', function() {",
                      "    pm.expect(jsonData).to.have.property('data');",
                      "    pm.expect(jsonData).to.have.property('apiVersion');",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('kind');",
                      "    pm.expect(jsonData.data).to.have.property('lang');",
                      "});",
                      "",
                      "pm.test('Has required 2nd level elements', function() {",
                      "    pm.expect(jsonData.data.item).to.have.property('index');",
                      "    pm.expect(jsonData.data.item).to.have.property('type');",
                      "    pm.expect(jsonData.data.item).to.have.property('targetId');",
                      "    pm.expect(jsonData.data.item).to.have.property('name');",
                      "    pm.expect(jsonData.data.item).to.have.property('accountHolderIndex');",
                      "    pm.expect(jsonData.data.item).to.have.property('values');",
                      "    pm.expect(jsonData.data.item).to.have.property('ux');",
                      "    pm.expect(jsonData.data.item).to.have.property('state');",
                      "});",
                      "",
                      "pm.test('Has the correct index', function() {",
                      "   pm.expect(jsonData.data.item.index).to.equal(1);",
                      "});",
                      "",
                      "pm.test('Has the correct type', function() {",
                      "   pm.expect(jsonData.data.item.type).to.equal(\"Deposit\");",
                      "});",
                      "",
                      "pm.test('Has the correct targetId and locationId', function() {",
                      "   pm.expect(jsonData.data.item.targetId).to.equal(pm.environment.get('deposit_print_target_id'));",
                      "});",
                      "",
                      "pm.test('Has the correct accountHolderIndex', function() {",
                      "   pm.expect(jsonData.data.item.accountHolderIndex).to.equal(0);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state;",
                      "    state = {",
                      "        \"status\": \"Ready\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\",",
                      "            \"Cancel\",",
                      "            \"Print\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.accounts element', function() {",
                      "   var accounts = {",
                      "        \"limit\": 1,",
                      "        \"maxChecking\": 1,",
                      "        \"maxSavings\": 1,",
                      "        \"choices\": [",
                      "            {",
                      "                \"index\": 0,",
                      "                \"label\": \"*3607\"",
                      "            },",
                      "            {",
                      "                \"index\": 1,",
                      "                \"label\": \"*6070\"",
                      "            }",
                      "        ],",
                      "        \"fields\": []",
                      "    };",
                      "            ",
                      "    var customer_key = pm.environment.get('customer_key').toString();",
                      "    ",
                      "    var accountName1 = '*' + customer_key.substring(customer_key.length-4,customer_key.length);",
                      "    ",
                      "    var accountName2 = '*' + customer_key.substring(customer_key.length-3,customer_key.length) + '0';",
                      "    ",
                      "    accounts.choices[0].label = accountName1;",
                      "    accounts.choices[1].label = accountName2;",
                      "    ",
                      "    pm.expect(jsonData.data.item.ux.accounts).to.deep.include(accounts);",
                      "});",
                      "",
                      "pm.test('Has the correct ux.fields element', function() {",
                      "    pm.expect(jsonData.data.item.ux.fields.length).to.be.at.least(1);",
                      "});",
                      "",
                      "pm.test('Has the correct values element', function() {",
                      "    var values;",
                      "    values =  {",
                      "        \"accounts\": [",
                      "            {",
                      "                \"index\": 0",
                      "            }",
                      "        ],",
                      "        \"fields\": {",
                      "            \"Custom_Net or Amount (in dollars)\": \"500\",",
                      "            \"Custom_or Percentage of Pay (1 - 100)\": \"50\",",
                      "            \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\",",
                      "            \"Custom_Employee ID\": \"123\",",
                      "            \"Custom_Last 4 of SSN\": \"1234\"",
                      "        }",
                      "    };",
                      "    ",
                      "    pm.expect(jsonData.data.item.values).to.deep.include(values);",
                      "});",
                      "",
                      "pm.test('Has matching values and ux.fields names', function() {",
                      "   var values = jsonData.data.item.values.fields;",
                      "   var ux = jsonData.data.item.ux.fields;",
                      "   ",
                      "   var getValueKeys = function(object, array) {",
                      "       for (var k in object) {",
                      "           if (typeof object[k] === 'object' && object[k] !== null) {",
                      "               for (var i in object[k]) array.push(i);",
                      "           } else {",
                      "               array.push(k);",
                      "           }",
                      "       } ",
                      "   };",
                      "   ",
                      "    var getUxKeys = function(object, array) {",
                      "        for (var k in object) {",
                      "           if (object[k].hasOwnProperty('fields')) {",
                      "                for (var i in object[k].fields) {",
                      "                   array.push(object[k].fields[i].key);",
                      "                }",
                      "           } else {",
                      "              array.push(object[k].key);",
                      "           }",
                      "        } ",
                      "    };",
                      "   ",
                      "    var valueKeys = [];",
                      "    var uxKeys = [];",
                      "    ",
                      "    getValueKeys(values, valueKeys);",
                      "    getUxKeys(ux, uxKeys);",
                      "   ",
                      "   valueKeys.sort();",
                      "   uxKeys.sort();",
                      "   ",
                      "   pm.expect(valueKeys).to.eql(uxKeys);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}",
                    "description": "Api-Key"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"type\": \"deposit\",\r\n  \"targetId\": \"{{deposit_print_target_id}}\",\r\n  \"accountholderIndex\": 0,\r\n  \"values\": {\r\n    \"accounts\": [\r\n      {\r\n        \"index\": 0\r\n      }\r\n    ],\r\n    \"fields\": {\r\n      \"Custom_Net or Amount (in dollars)\": \"500\",\r\n      \"Custom_or Percentage of Pay (1 - 100)\": \"50\",\r\n      \"Custom_Last 4 of SSN\": \"1234\",\r\n      \"Custom_Employee ID\": \"123\",\r\n      \"Custom_Depositor's Full Mailing Address\": \"123 Main Street\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1"
              },
              "response": []
            },
            {
              "_postman_id": "7b3aea6c-2412-4cfc-8f35-8da807caa9ef",
              "name": "Print Switch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b4982a1-c3ae-4b11-9f97-6ccd09edb375",
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Has the correct state', function() {",
                      "    var state = {",
                      "        \"status\": \"Printed\",",
                      "        \"actions\": [",
                      "            \"HTTP-PUT\"",
                      "        ],",
                      "        \"validation\": {",
                      "            \"accounts\": [],",
                      "            \"fields\": {},",
                      "            \"overall\": []",
                      "        }",
                      "    };",
                      "    ",
                      "   pm.expect(jsonData.data.item.state).to.deep.include(state);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"index\": 1,\r\n  \"action\": \"Print\"\r\n}"
                },
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}{{switches_postfix}}/1/action"
              },
              "response": []
            },
            {
              "_postman_id": "2c1bd144-f150-4c07-afa9-672ae8db4e58",
              "name": "Get Switch PDF",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c8ad97b-fa49-42f4-a004-c4e2e9b39682",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "Api Key",
                    "key": "api-key",
                    "value": "{{api_key}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/pdf"
                  }
                ],
                "body": {},
                "url": "{{base_url}}{{customers_postfix}}{{customer_key}}/{{switches_postfix}}/1"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9c8697f0-40b9-459c-a357-fc8a4acb8d80",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3df654aa-c6e6-43ef-b7b6-6e545557f17d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1f165295-f989-4f43-91f0-c158d2f42c00",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b0b0fd91-799a-4373-b796-a7ca5b53bee6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "4e6218b2-1e44-4194-b629-238f81893bf9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7c7cc4ad-67c5-45dd-ac30-d3aafba818fb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}